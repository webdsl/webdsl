module webdslc

imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  libstratego-tool-doc
  libstratego-xtc
imports
  libwebdsl-generator
  libwebdsl-front
  libto-java-servlet
  libwrite-files
  libstatistics
  libjava-transformations
  libback-end-transformations

strategies

  webdslc-main =
    set-default-config
    ; xtc-io-wrap(
        webdslc-options
      , webdslc-usage
      , webdslc-about
      , ![] // xtc dependencies
      , xtc-webdslc; <exit> 0
    )

  xtc-webdslc = id
      ; if WebDSLShowVersion then get-webdsl-version; debug(!"WebDSL version: "); <exit> 0 end
      ; set-appname-and-dirs
      ; stage(xtc-parse-webdsl|["parsing ",<AppName>,".app"])
      ; if OptionAppStatistics
        then dsl-to-core-analysis
           ; all-statistics
           ; <exit> 0
        end
      ; dsl-to-core
      ; add-backend-annotations
      ; stage(rename-identifiers-top|"renaming identifiers")
      ; try(where(DebugPrintBackendTree; pp-aterm(!"Application AST:"); debug))
      ; add-global-info // put information in annotation of Application cons to avoid having to traverse AST again later
        // clean dynamic rules
       ; try(dr-scope-all-end)
       ; dr-scope-all-start
        // BACKEND START
      ; back-end-transformations-using-global-info
      ; stage(back-end-transformations | "generation analysis")
      //; if is-custom-compile-units-enabled then cleanup-custom-compile-units-dummy-defines end // after back-end DR for all pages/templates is created remove code that is not part of current compile unit, also see org/webdsl/dsl/utils/custom-compile-units 
      ; stage(
            ?Application(_, <id>)
          ; collect-all(?Section(_, <id>)); concat
            // current term is a list of toplevel definitions
          ; if JavaServletBackend then
              where(java-package-name-for-generated-code := Qualified("webdsl","generated"))
            ; core-to-java-servlet(|java-package-name-for-generated-code)
           else
              <fatal-error> ["\n", "No backend specified. Use --servlet for the Java servlet backend."]
           end
        |"code generation")
      ; stage(
            filenames := 
              <where(CachingEnabled); output-generated-files-caching
               <+ output-generated-files>
          ; where([] := filenames <+ <verbose-msg-newline> ["Written: ", filenames])
          |"writing files")
      ; if CachingEnabled then
            cleanup-generated-files
          ; prune-fragment-dir
        end
      ; if is-custom-compile-units-enabled then store-custom-compile-units-timestamps end
      ; if is-compile-units-cache-enabled then store-compile-units-cache end
      ; update-entities-changed-marker-file
      ; print-total-log-time


  output-generated-files-caching = filter(cache-aux-file(file-to-filename, output-generated-file))
