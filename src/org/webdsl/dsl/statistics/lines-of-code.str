module org/webdsl/dsl/statistics/lines-of-code

imports
  libwebdsl-front
  libwebdsl-generator

// extract lines of code per language element

signature constructors
  HTMLWrapperMultipleTmp : Term -> Term
  HTMLWrapperTmp : Term * Term * Term * Term -> Term

rules  // preprocessing

  prepare-ast-for-lines-of-code-stats =
    import-modules
  ; keep-htmlwrapper-normalize-constructors  // htmlwrapper normally expanded during normalize-constructors
  ; normalize-constructors  // simplify number of constructors to match for counting, and make prettyprinting more stable by reducing variations
  ; topdown(try({\ TemplateCall(a,b,c,TemplateBody([])){anno*} -> TemplateCall(a,b,c,[]){anno*} \}))  // remove empty blocks that add an additional empty line in prettyprinter
  ; restore-htmlwrapper-normalize-constructors

  keep-htmlwrapper-normalize-constructors =
    alltd(
       {\ HTMLWrapperMultiple(a){anno*} -> HTMLWrapperMultipleTmp(a){anno*} \}
    <+ {\ HTMLWrapper(a,b,c,d){anno*}   -> HTMLWrapperTmp(a,b,c,d){anno*}     \}
    )

  restore-htmlwrapper-normalize-constructors =
    alltd(
       {\ HTMLWrapperMultipleTmp(a){anno*} -> HTMLWrapperMultiple(a){anno*} \}
    <+ {\ HTMLWrapperTmp(a,b,c,d){anno*}     -> HTMLWrapper(a,b,c,d){anno*}     \}
    )

rules

  get-lines-of-code :  // assumes only the main file is parsed and its ast is the current term
    app -> result
    with  prepare-ast-for-lines-of-code-stats
        ; collect(?Section(_,<id>) <+ ?AccessControlDefinition(_,<id>))
        ; concat
        ; remove-all(?Imports(_) <+ ?Note(_) <+ ?Description(_))
        ; (entcount, entlines, ast1) := <count-entity-loc>
        ; (pagecount, pagelines, ast2) := <count-page-loc> ast1
        ; (templatecount, templatelines, ast3) := <count-template-loc> ast2
        ; (ajaxtemplatecount, ajaxtemplatelines, ast4) := <count-ajax-template-loc> ast3
        ; (funcount, funlines, ast5) := <count-function-loc> ast4
        ; (account, aclines, ast6) := <count-ac-loc> ast5
        ; (nccount, nclines, ast7) := <count-native-class-loc> ast6
        ; (sfcount, sflines, ast8) := <count-service-fun-loc> ast7
        ; (ficount, filines, ast9) := <count-background-fun-invokes-loc> ast8
        ; (searchcount, searchlines, ast10) := <count-search-loc> ast9
        ; (varcount, varlines, ast11) := <count-vardecls-loc> ast10
        ; (initcount, initlines, ast12) := <count-global-init-loc> ast11
        ; (routingcount, routinglines, ast13) := <count-routing-loc> ast12
        ; (expandcount, expandlines, ast14) := <count-expand-loc> ast13
        ; (attributescount, attributeslines, ast15) := <count-attributes-loc> ast14
        ; (testingcount, testinglines, ast16) := <count-testing-loc> ast15
        ; (wrappercount, wrapperlines, ast17) := <count-wrapper-loc> ast16
        ; <debug(!"Remaining top-level definitions: ")> ast17
        ; result := <separate-by(|"\n\n"); concat-strings>
            [ entcount,
              pagecount,
              templatecount,
              ajaxtemplatecount,
              wrappercount,
              attributescount,
              expandcount,
              funcount,
              account,
              nccount,
              sfcount,
              ficount,
              searchcount,
              varcount,
              initcount,
              routingcount,
              testingcount,

              entlines,
              pagelines,
              templatelines,
              ajaxtemplatelines,
              wrapperlines,
              attributeslines,
              expandlines,
              funlines,
              aclines,
              nclines,
              sflines,
              filines,
              searchlines,
              varlines,
              initlines,
              routinglines,
              testinglines
            ]

  get-loc-count =
    not(?[])
  ; map(pp-webdsl-to-string)
  ; separate-by(|"\n")
  ; concat-strings
  ; ?resultlines
  ; get-lines
  ; length
  ; ?resultloc
  ; !(resultloc, resultlines)

  get-loc-count = ?[]; !(0, "")

  count-page-loc :
    ast -> ($[Page LOC: [loc]], lines, rest)
    with  (pages, rest) := <partition(where(?Define(<fetch(?Page())>,_,_,_,_)))>
        ; (loc,lines) := <get-loc-count> pages

  count-template-loc :
    ast -> ($[Template LOC: [loc]], lines, rest)
    with  (ts, rest) := <partition(where(?Define(<not(fetch(?Page() <+ ?AjaxTemplate()))>,_,_,_,_)))>
        ; (loc,lines) := <get-loc-count> ts

  count-ajax-template-loc :
    ast -> ($[Ajax Template LOC: [loc]], lines, rest)
    with  (ts, rest) := <partition(where(?Define(<fetch(?AjaxTemplate())>,_,_,_,_)))>
        ; (loc,lines) := <get-loc-count> ts

  count-entity-loc :
    ast -> ($[Entity LOC: [loc]], lines, rest)
    with  (ents, rest) := <partition(?Entity(_,_,_) <+ ?EntityNoSuper(_,_) <+ ?SessionEntity(_,_) <+ ?Enum(_,_) <+ ?ExtendEntity(_,_) <+ ?ExtendSessionEntity(_,_))>
        ; (loc,lines) := <get-loc-count> ents

  count-function-loc :
    ast -> ($[Function LOC: [loc]], lines, rest)
    with  (funs, rest) := <partition(?Function(_,_,_,_) <+ ?Predicate(_,_,_) <+ ?CachedGlobalFunction(_))>
        ; (loc,lines) := <get-loc-count> funs

  count-ac-loc :
    ast -> ($[Access control LOC: [loc]], lines, rest)
    with  (ac, rest) := <partition(?AccessControlPrincipal(_,_) <+ ?AccessControlRule(_,_,_,_,_) <+ ?SpecialAccessControlRule(_,_))>
        ; (loc,lines) := <get-loc-count> ac

  count-native-class-loc :
    ast -> ($[Java class wrappers LOC: [loc]], lines, rest)
    with  (nc, rest) := <partition(?NativeClass(_,_,_,_) <+ ?TypeDef(_,_))>
        ; (loc,lines) := <get-loc-count> nc

  count-service-fun-loc :
    ast -> ($[Service function LOC: [loc]], lines, rest)
    with  (sf, rest) := <partition(?ServiceFunction(_,_,_,_))>
        ; (loc,lines) := <get-loc-count> sf

  count-background-fun-invokes-loc :
    ast -> ($[Background function invokes LOC: [loc]], lines, rest)
    with  (ie, rest) := <partition(?InvokeTimedTask(_,_))>
        ; (loc,lines) := <get-loc-count> ie

  count-search-loc :
    ast -> ($[Search specification LOC: [loc]], lines, rest)
    with  (s, rest) := <partition(?FullTextAnalyzer(_,_,_) <+ ?SearchMapping(_,_))>
        ; (loc,lines) := <get-loc-count> s

  count-vardecls-loc :
    ast -> ($[Global variables LOC: [loc]], lines, rest)
    with  (v, rest) := <partition(?GlobalVarDeclInit(_,_,_) <+ ?GlobalVarDecl(_,_) <+ ?GlobalVarDeclInitInferred(_,_) <+ ?RequestScope(_))>
        ; (loc,lines) := <get-loc-count> v

  count-global-init-loc :
    ast -> ($[Global init LOC: [loc]], lines, rest)
    with  (g, rest) := <partition(?InitAction(_))>
        ; (loc,lines) := <get-loc-count> g

  count-routing-loc :
    ast -> ($[Routing LOC: [loc]], lines, rest)
    with  (r, rest) := <partition(?Routing(_))>
        ; (loc,lines) := <get-loc-count> r

  count-expand-loc :
    ast -> ($[Expand LOC: [loc]], lines, rest)
    with  (r, rest) := <partition(?ExpandTemplateCall(_,_) <+ ?ExpandTemplateDefinition(_,_,_) <+ ?ExpandLocal(_,_,_))>
        ; (loc,lines) := <get-loc-count> r

  count-attributes-loc :
    ast -> ($[Attributes LOC: [loc]], lines, rest)
    with  (r, rest) := <partition(?AttributeCollection(_,_,_))>
        ; (loc,lines) := <get-loc-count> r

  count-testing-loc :
    ast -> ($[Testing LOC: [loc]], lines, rest)
    with  (r, rest) := <partition(?Test(_,_))>
        ; (loc,lines) := <get-loc-count> r

  count-wrapper-loc :
    ast -> ($[HTML Wrapper LOC: [loc]], lines, rest)
    with  (r, rest) := <partition(?HTMLWrapperMultiple(_) <+ ?HTMLWrapper(_,_,_,_))>
        ; (loc,lines) := <get-loc-count> r
