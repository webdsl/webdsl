module org/webdsl/dsl/statistics/app-statistics

imports
  libwebdsl-front
  libwebdsl-generator

rules

  get-app-statistics =  // assumes all analysis is done and dynamic rules have all the information
    (pagestats, pagedetail) := <count-pages>
  ; (tstats, tdetail) := <count-templates>
  ; {| DefinedEntNameStats :
      (entstats, entdetail) := <count-entities>
    ; (propstats, propdetail) := <count-properties>
    |}
  ; (gfunstats, gfundetail) := <count-global-functions>
  ; (efunstats, efundetail) := <count-entity-functions>
  ; totalstats := <separate-by(|"\n\n"); concat-strings> [
      "==============================================="
    , pagestats
    , tstats
    , entstats
    , propstats
    , gfunstats
    , efunstats
    ]
  ; <separate-by(|"\n\n"); concat-strings> [
      totalstats
    , pagedetail
    , tdetail
    , entdetail
    , propdetail
    , gfundetail
    , efundetail
    , totalstats
    ]

  print-statistics-helper(|name, defined*, builtin*) = print-statistics-helper(|name, defined*, builtin*, [], [])

  print-statistics-helper(|name, defined*, builtin*, wrapper*, unused*) :
    _ -> (stats, detail)
    with  if   not(wrapper* := []; unused* := [])
          then wrapstats := <concat-strings> [ "\n", $[Defined wrapper [name] (not included in defined count): [<length> wrapper*]], "\n\n" ]
             ; wrapheader := <concat-strings> ["------", wrapstats, "\n", $[Wrapper [name]:]]
             ; unusedstats := <concat-strings> [ "\n", $[Defined unused [name]: [<length> unused*]], "\n\n" ]
             ; unusedheader := <concat-strings> ["------", unusedstats, "\n", $[Defined Unused [name]:]]
          else wrapstats := ""
             ; wrapheader := ""
             ; unusedstats := ""
             ; unusedheader := "" end
        ; builtinstats := $[Built-in [name]: [<length> builtin*]]
        ; stats := <concat-strings> [$[Defined [name]: [<length> defined*]], wrapstats, unusedstats, "\n", builtinstats]
        ; detail := <separate-by(|"\n"); concat-strings> [
            "======"
          , stats
          , "======"
          , $[Defined [name]:]
          , defined*
          , wrapheader
          , wrapper*
          , unusedheader
          , unused*
          , "------"
          , $[Built-in [name]:]
          , builtin*
          ]

rules

  count-pages :
    _ ->  <print-statistics-helper(|"pages", defined*, builtin*)>
    with  page* := <all-keys-CurrentTemplateDecl; map(CurrentTemplateDecl); filter(where(?Define(<fetch(Page())>,_,_,_,_)))>
        ; (builtin*, defined*) := <partition-pages> page*

  partition-pages =
    partition(is-node-defined-in-built-ins)
  ; (map-get-name-from-define,map-get-name-from-define)

  map-get-name-from-define = map(?Define(_,<id>,_,_,_))

  is-node-defined-in-built-ins =
    has-anno(?At("../.servletapp/src-webdsl-template/built-in.app",_,_))
 <+ has-no-anno(?At(_,_,_))

rules

  count-templates :
    _ ->  <print-statistics-helper(|"templates", defined*, builtin*, wrapper*, unused*)>
    with  t* := <all-keys-CurrentTemplateDecl; map(CurrentTemplateDecl); remove-all(?Define(<fetch(Page()<+Local())>,_,_,_,_))>
         ; (builtin*, defined*, wrapper*, unused*) := <partition-templates> t*

  partition-templates =
    partition(is-node-defined-in-built-ins)
  ; ?(builtin*, defined1*)
  ; (unused*, defined2*) := <partition(can-template-be-removed)> defined1*
  ; (wrapper*, defined3*) := <partition(is-wrapper-template-def)> defined2*
  ; !( <map-get-name-from-define> builtin*
     , <map-get-name-from-define> defined3*
     , <map-get-name-from-define> wrapper*
     , <map-get-name-from-define> unused*)

  // separate single element wrapper templates
  is-wrapper-template-def :
    d@Define(_,_,_,_,body) -> d
    where <  ?[XMLElement(_,_,[TemplateCall("elements",_,_,_)],_)]
          <+ ?[TemplateCall(_,_,_,TemplateBody([TemplateCall("elements",_,_,_)]))]
          > body

rules

  count-entities :
    _ -> <print-statistics-helper(|"entities", defined*, builtin*)>
    with  entity* := <all-keys-EntDecl; map(EntDecl)>
        ; (builtin*, defined*) := <partition-entities> entity*

  partition-entities =
    partition(is-node-defined-in-built-ins)
  ; (map(?Entity(<id>,_,_)),map(?Entity(<register-defined-entity-stats>,_,_)))

  register-defined-entity-stats :
    x -> x
    with  rules( DefinedEntNameStats : x )

rules

  count-properties :
    _ -> <print-statistics-helper(|"entity properties", defined*, builtin*)>
    with  prop* := <all-keys-PropertyDecl>
        ; (builtin*, defined*) := <  partition(where(?(<not(DefinedEntNameStats)>,_)))
                                   ; (map(entity-prop-tuple-to-string),map(entity-prop-tuple-to-string))> prop*

  entity-prop-tuple-to-string : (a,b) -> <concat-strings> [a," : ",b]

rules

  count-global-functions :
    _ -> <print-statistics-helper(|"global functions", defined*, builtin*)>
    with  fun* := <all-keys-FunctionDecl; map(FunctionDecl)>
        ; (builtin*, defined*) := <partition-functions> fun*

  partition-functions =
    partition(is-node-defined-in-built-ins)
  ; (map(?Function(<id>,_,_,_)),map(?Function(<id>,_,_,_)))

rules

  count-entity-functions :
    _ -> <print-statistics-helper(|"entity functions", defined*, builtin*)>
    with  fun* := <all-keys-EntityFunctionDecl; map(EntityFunctionDecl)>
        ; (builtin*, defined*) := <partition-functions> fun*
