module org/webdsl/dsl/statistics/app-statistics

imports
  libwebdsl-front
  libwebdsl-generator

rules

  get-app-statistics =  // assumes all analysis is done and dynamic rules have all the information
    (pagestats, pagedetail) := <count-pages>
  ; (tstats, tdetail) := <count-templates>
  ; (entstats, entdetail) := <count-entities>
  ; (propstats, propdetail) := <count-properties>
  ; (gfunstats, gfundetail) := <count-global-functions>
  ; (efunstats, efundetail) := <count-entity-functions>
  ; <separate-by(|"\n\n"); concat-strings> [pagestats, tstats, entstats, propstats, gfunstats, efunstats,
                                            pagedetail, tdetail, entdetail, propdetail, gfundetail, efundetail]

  print-statistics-helper(|name, defined*, builtin*) :
    _ -> (stats, detail)
    with  stats := $[Defined  [name]: [<length> defined*]]
        ; detail := <separate-by(|"\n"); concat-strings> [$[Defined [name]:], defined*, "\n",  $[Built-in [name]: [<length> builtin*]] , $[Built-in [name]:], builtin*]

rules

  count-pages :
    _ ->  <print-statistics-helper(|"pages", defined*, [])>
    with  page* := <all-keys-CurrentTemplateDecl; map(CurrentTemplateDecl); filter(where(?Define(<fetch(Page())>,_,_,_,_)))>
        ; defined* := <map(?Define(_,<id>,_,_,_)); uniq> page* // this treats original and override as one page for counting

rules

  count-templates :
    _ ->  <print-statistics-helper(|"templates", defined*, builtin*)>
    with  t* := <all-keys-CurrentTemplateDecl; map(CurrentTemplateDecl); remove-all(?Define(<fetch(Page()<+Local())>,_,_,_,_))>
         ; (builtin*, defined*) := <map(?Define(_,<id>,_,_,_)); partition(built-in-template-name)> t*

  built-in-template-name =
     "output"
  <+ "rawoutput"
  <+ "dateoutputgeneric"
  <+ "dateinputgeneric"
  <+ "datepickerinput"
  <+ "pageIndexLink"
  <+ "pageIndex"
  <+ "pageIndexUpto"
  <+ "showSearchStats"
  <+ "highlight"
  <+ "highlightedSummary"
  <+ "mimetype"
  <+ "downloadInline"
  <+ "internalElementsWrapper"
  <+ "break"
  <+ "div"
  <+ "span"
  <+ "container"
  <+ "fieldset"
  <+ "group"
  <+ "groupitem"
  <+ "row"
  <+ "column"
  <+ "par"
  <+ "pre"
  <+ "spacer"
  <+ "menubar"
  <+ "menuspacer"
  <+ "menu"
  <+ "menuitems"
  <+ "menuheader"
  <+ "menuitem"
  <+ "wrapsubmit"
  <+ "elementsempty"
  <+ "outputLabel"
  <+ "labelcolumns"
  <+ "label"
  <+ "labelInternal"
  <+ "validate"
  <+ "showMessages"
  <+ "noMessages"
  <+ "templateSuccess"
  <+ "messages"
  <+ "description"
  <+ "brand"
  <+ "navCollapse"
  <+ "navItems"
  <+ "navItem"
  <+ "navCollapseButton"
  <+ "small"
  <+ "theader"
  <+ "tbody"
  <+ "th"
  <+ "inlForm"
  <+ "controlGroup"
  <+ "breadcrumbs"
  <+ "breadcrumbFirst"
  <+ "subMenu"
  <+ "well"
  <+ "wellSmall"
  <+ "blockquote"
  <+ "definitionList"
  <+ "definitionItem"
  <+ "definitionListDescription"
  <+ "requireACE"
  <+ "ace"
  <+ "aceView"
  <+ "outputRelaxed"
  <+ "rssWrapper"
  <+ "rssDateTime"
  <+ "rssWrapper"
  <+ "header1"
  <+ "header2"
  <+ "header3"
  <+ "header4"
  <+ "hrule"
  <+ "save"
  <+ "footer"
  <+ "appname"
  <+ "breadcrumb"
  <+ string-starts-with(|"input")
  <+ string-starts-with(|"select")
  <+ string-starts-with(|"selectcheckbox")
  <+ string-starts-with(|"radio")
  <+ string-starts-with(|"errorTemplate")
  <+ string-starts-with(|"grid")
  <+ string-starts-with(|"form")
  <+ string-starts-with(|"dropdown")
  <+ string-starts-with(|"page")
  <+ string-starts-with(|"tab")
  <+ string-starts-with(|"horizontal")
  <+ string-starts-with(|"pull")
  <+ string-starts-with(|"navbar")
  <+ string-starts-with(|"button")
  <+ string-starts-with(|"alert")
  <+ string-starts-with(|"modal")
  <+ where(string-starts-with(|"i"); explode-string; ?[_,<is-upper>|_]) // bootstrap library e.g. iArrow


rules

  count-entities :
    _ -> <print-statistics-helper(|"entities", defined*, builtin*)>
    with  entity* := <all-keys-EntDecl>
        ; (builtin*, defined*) := <partition(built-in-entity-name)> entity*

  built-in-entity-name =
      "Exception"
  <+ "QueuedEmail"
  <+ "RequestLogEntry"
  <+ "ValidationException"
  <+ "ValidationExceptionMultiple"
  <+ "dummy_webdsl_entity"
  <+ "SessionManager"
  <+ "SessionMessage"
  <+ "SecurityContext"
  <+ "Entity"
  // below are not entities but Java classes exposed as types through native class mapping
  <+ "JSONObject"
  <+ "PageServlet"


rules

  count-properties :
    _ -> <print-statistics-helper(|"entity properties", defined*, builtin*)>
    with  prop* := <all-keys-PropertyDecl>
        ; (builtin*, defined*) := <  partition(where(?(<built-in-entity-name>,_)))
                                   ; (map(entity-prop-tuple-to-string),map(entity-prop-tuple-to-string))> prop*

  entity-prop-tuple-to-string : (a,b) -> <concat-strings> [a," : ",b]


rules

  count-global-functions :
    _ -> <print-statistics-helper(|"global functions", defined*, builtin*)>
    with  fun* := <all-keys-FunctionDecl; map(?(<id>,_))>
        ; (builtin*, defined*) := <partition(built-in-global-fun-name)> fun*

  built-in-global-fun-name =
     "handleValidationErrors"
  <+ "logStatistics"
  <+ "renewFacetIndexReaders"
  <+ "optimizeSearchIndex"
  <+ "updateSuggestionIndex"
  <+ "baseURL"
  <+ "getValidationErrorsByName"
  <+ "attribute"
  <+ "hasNotNullAttribute"
  <+ "getHttpMethod"
  <+ "getRequestParameter"
  <+ "getRequestParameterList"
  <+ "readRequestBody"
  <+ "navigate"
  <+ "cancel"
  <+ "rollback"
  <+ "flush"
  <+ "requestPage"
  <+ "getSessionManager"
  <+ "baseURL"
  <+ "age"
  <+ "getDispatchServlet"
  <+ "remoteAddress"
  <+ "baseUrl"
  <+ "urlComponents"
  <+ "replace"
  <+ "mimetype"
  <+ "downloadInline"
  <+ "getTemplate"
  <+ "sleep"
  <+ "createTempFile"
  <+ "inEmailContext"
  <+ "convertDateFormatToJQuery"
  <+ "updateListRequest"
  <+ "authenticate"
  <+ "logout"
  <+ string-starts-with-uppercase
  <+ string-starts-with(|"createEmpty")
  <+ string-starts-with(|"getUnique")
  <+ string-starts-with(|"isUnique")
  <+ string-starts-with(|"find")
  <+ string-starts-with(|"internal")
  <+ string-starts-with(|"validate")
  <+ string-starts-with(|"load")
  <+ string-starts-with(|"search")
  <+ string-starts-with(|"check")
  <+ string-starts-with(|"debug")
  <+ string-starts-with(|"assert")
  <+ string-starts-with(|"getReflection")
  <+ string-ends-with(|"Searcher")
  <+ string-ends-with(|"Driver")
  <+ string-ends-with(|"NewTransaction")


rules

  count-entity-functions :
    _ -> <print-statistics-helper(|"entity functions", defined*, builtin*)>
    with  fun* := <all-keys-EntityFunctionDecl; map(?(_,<id>,_))>
        ; (builtin*, defined*) := <partition(built-in-entity-fun-name)> fun*

  string-starts-with-uppercase = where(explode-string; Hd; is-upper)

  built-in-entity-fun-name =
     "all"
  <+ "getName"
  <+ "dummy_webdsl_entity"
  <+ string-starts-with-uppercase
  <+ string-starts-with(|"validate")
  <+ string-starts-with(|"allowed")
  <+ string-starts-with(|"set")
  <+ string-starts-with(|"addTo")
  <+ string-starts-with(|"removeFrom")
