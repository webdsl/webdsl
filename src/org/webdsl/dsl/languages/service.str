module org/webdsl/dsl/languages/json

imports
  libstrategolib
  libwebdsl-front

strategies

  declare :
    ServiceFunction(mods, name, fargs, body) -> <id>
    with <declare> Define([Page()|mods], name, fargs, [], body)

  rename :
    ServiceFunction(mods, x, farg1*, b1){anno*} -> 
    ServiceFunction(mods, x, farg2*, b2){anno*}
    with {| Rename, InDef, VarInContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          |}

  desugar :
    ServiceFunction(mod*, x, farg*, Block(stat*)){anno*} -> result
    where x_result := <newname-webdsl> "result"
        ; stat2* := <alltd(service-return-replace(|x_result))> stat*
        ; result :=
            <rename-toplevel> def|[
              mod* service page x(farg*) {
                var x_result : String
                init{
                  mimetype("application/json");
                  stat2*
                }
                output(x_result)
              }
            ]|{anno*}

  keep-position-anno = ?ServiceFunction(_,_,_,_)

  service-return-replace(|x_result):
    stat|[ return e; ]| -> Block([Stat(Assignment(Var(x_result), Call(e,"toString",[]))), ReturnInPageInit()])
    // stat|[ { x_result := e.toString(); return; ]| this return is a redirect, created a different constructor 'ReturnInPageInit' for regular Java return in init method
