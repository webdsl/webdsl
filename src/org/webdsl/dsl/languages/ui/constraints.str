module org/webdsl/dsl/languages/ui/constraints

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator

rules

  constraint-error-ui :
    IfTempl(e, _, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)
        ; <type-of> e // don't report cascaded error, e should have valid type

  // constraint-error-ui :
  //   IfNoElseTempl(e, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
  //   where not(SimpleSort("Bool") := <type-of> e)
  //       ; <type-of> e // don't report cascaded error, e should have valid type

  constraint-error-ui :
    IfElseIfTempl(e, _, _, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)
        ; <type-of> e // don't report cascaded error, e should have valid type

  constraint-error-ui :
    ElseIfTempl(e, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)
        ; <type-of> e // don't report cascaded error, e should have valid type

rules  // redefining action

  // slightly inefficient: traversing entire tree for each def
  constraint-error-ui :
    Define(_,_,_,_,body) -> <fail>
    where actions := <collect(?Action(_,_,_,_))> body
        ; action-names := <map(?Action(_,<strip-annos>,_,_))> actions
        ; double-names := <find-doubles> action-names
        ; double-actions := <filter(where(?Action(_,<strip-annos>,_,_); <member> (<id>, double-names)))> actions
        ; <map(try(add-double-action-error))> double-actions

  add-double-action-error :
    Action(_,name,_,_) -> <add-error(|["action with name '",name,"' defined multiple times"])>

rules

  constraint-error-ui :
    NoSpan() -> <add-warning(|["The 'no-span' modifier is obsolete, spans are no longer added by default."])>

rules

  constraint-error-ui :
    Define(_,_,_,_,_){anno*} -> <add-error(|["define is nested too deeply"])>
    where <fetch(TooDeeplyNestedDefine)> anno*

  constraint-error-ui :
    Define(mod*,_,_,_,_) -> <add-error(|["ajax template only allowed as top-level definition"])>
    where <fetch(?Local()); fetch(?AjaxTemplate())> mod*
