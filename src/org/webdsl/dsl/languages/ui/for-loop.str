module org/webdsl/dsl/languages/ui/for-loop

imports
  libstratego-lib
  libwebdsl-front
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/languages/ui/-
  org/webdsl/dsl/languages/prefetch/-
  org/webdsl/dsl/languages/data-model/-
  org/webdsl/dsl/languages/action/for-stmt
  
rules

  rename-ui :
    def@For(x, srt, e1, f1, elems1, elems3){anno*} -> For(y, srt2, e2, f2, elems2, elems4){newanno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInContext, IteratorContext
          : srt2   := <rename-all> srt
          ; y      := <rename-bound-immutable(|srt2)> x
          ; rules(
              VarDecl : y -> def
              IteratorContext :+= Arg(y, srt2)
            )
          ; <declare-vars-in-context> y
          ; f2     := <rename-all; try(rename-query-condition-anno)> f1
          ; elems2 := <for-body-elements-rename-helper> elems1
          ; newanno* := <update-iterator-context; update-template-args-anno; rename-query-optimization-annos> anno*
          |}
       ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  for-body-elements-rename-helper :
  	elems1 -> elems2
  	with  if [TemplateCall("internalElementsWrapper",[],[],TemplateBody(_))] := elems1
  	      then elems2 := <rename-all> elems1 // don't try to put names from inside the For body into the closure passed to the lifted For body (see desugar-in-define-context rules below)
  	      else elems2 := <rename-template-elements-with-var-scope> elems1
  	      end

  rename-ui :
    def@ForInferred(x, e1, f1, elems1, elems3){anno*} -> ForInferred(y, e2, f2, elems2, elems4){anno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInContext
          : srt := <type-of; for-loop-inferred-get-inner-type; add-immutable-anno <+ !"unknown"> e2 
            // type-of can fail if the expression cannot be typed, in that case the for loop var will not be declared and constraint error triggers
            // add ImmutableReference() annotation, because x will not be assignable even if e was
          ; y      := <rename-bound-immutable(|srt)> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; f2     := <rename-all> f1
          ; elems2 := <for-body-elements-rename-helper> elems1
          |}
       ; elems4 := <rename-all> elems3 // separator cannot refer to loop index         

  for-loop-inferred-get-inner-type =
     ?GenericSort(_,[<id>]) 
  <+ template-var-arg-inner-sort
  <+ !"unknown"
    
  desugar-action :
    ForInferred(x, e, f, elems1, elems2){anno*} -> For(x, srt, e, f, elems1, elems2){anno*}
    with srt := <type-of; for-loop-inferred-get-inner-type; add-immutable-anno> e //add ImmutableReference() annotation, because x will not be assignable even if e was

  rename-ui :
    def@ForAll(x, srt, f1, elems1, elems3){anno*} -> ForAll(y, srt2, f2, elems2, elems4){newanno*}
    with {| Rename, VarInContext, IteratorContext
          : srt2   := <rename-all> srt
          ; y      := <rename-bound-immutable(|srt2)> x
          ; rules(
              VarDecl : y -> def
              IteratorContext :+= Arg(y, srt2)
            )
          ; <declare-vars-in-context> y
          ; f2     := <rename-all; try(rename-query-condition-anno)> f1
          ; elems2 := <for-body-elements-rename-helper> elems1
          ; newanno* := <update-iterator-context; update-template-args-anno; rename-query-optimization-annos> anno*
          |}
        ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  rename-ui :
    def@ForCount(x, e1, e2, elems1, elems3){anno*} -> ForCount(y, e3, e4, elems2, elems4){anno*}
    with  e3 := <rename-all> e1
        ; e4 := <rename-all> e2 
        ; {| Rename, VarInContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; elems2 := <for-body-elements-rename-helper> elems1
          |}  
        ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  update-template-args-anno :
    anno* -> [templName*, templArgs*, tokeep*]
    where tokeep* := <remove-all(?TemplateArgs(_) <+ ?TemplateName(_))> anno*
    ; templArgs* := [TemplateArgs(<TemplateArg <+ ![]>)]
    ; templName* := <![TemplateName(<InTemplate <+ InPage>)] <+ ![]>

  add-backend-annotation :
    def@ForAll(_, SimpleSort(x_class), _, _, _){anno*} -> def{CachedEntity(), anno*}
    where not(<fetch-elem(?CachedEntity())> anno*)
    ; <is-cached-entity> x_class

  add-backend-annotation :
    ForAll(x, srt, f, b1, s){anno*} -> ForAll(x, srt, f, b2, s){anno*}
    where <fetch-elem(?TemplateName(tname))> anno* 
    ; pf@PrefetchFor(Var(x), _, _, _){pfanno*} := <get-prefetch-for(|x)> b1
    ; <not(fetch-elem(?PrefetchForName(_)))> pfanno*
    ; pfname := PrefetchForName(<newname-webdsl-suffix(| <suffix-from-name> tname )> "prefetchFor")
    ; b2 := <replace-prefetch-for(|x, pf{pfname,pfanno*})> b1

  add-query-optimization :
    def@ForAll(x, srt, f, b, s){anno*} -> ForAll(x, srt, f, b2, s){IsOptimized(),qc,tokeep*}
    where <fetch-elem(?TemplateArgs(args))> anno*
      ; <fetch-elem(?TemplateName(tname))> anno*
      ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (try(where(NotOptimizedWarnings); <debug(!"NotOptimized:")> ("ForAll", x, srt)); get-empty-query-analysis)> anno* 
      ; bindableargs := <filter(query-optimization-bindable-argument)> args
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; (qc, b2) := <query-analysis-to-query-optimizition(|qa,x,srt,bindableargs)> b

  desugar-query-analysis :
    def@ForAll(x, srt, f, body1, sep){anno*} -> ForAll(x, srt, f, body2, sep){newanno*}
    with /*<debug(!"forall1: ")> Var(x); */cond := <?Filter(<id>, _, _) <+ !True()> f
    where <fetch-elem(?TemplateArgs(args*))> anno*
    ; <fetch-elem(?TemplateName(tname))> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; <template-body-ready> body1
    ; tgenname := <normalize-signature; generate-template-name> (tname, args*)
    ; /*info(|"desugar forall");*/
    {| CurrentTemplateName
      : rules( CurrentTemplateName := tgenname )
      ; (body2, newanno*) := <perform-query-analysis(|("ForAll", x ,srt), [args*,ic*],cond, x,f)/* <+ (<debug(!"forall1.5: ")> Var(x); fail)*/> (body1, anno*)
    |}
    /*;<debug(!"forall2: ")> Var(x)*/ 

  add-backend-annotation :
    For(x, srt, call, f, elems1, elems3){anno*} -> For(x, srt, call, f, elems2, elems3){anno*}
    where <fetch-elem(?TemplateName(tname))> anno*
    ; pf@PrefetchFor(Var(x), _, _, _){pfanno*} := <get-prefetch-for(|x)> elems1
    ; <not(fetch-elem(?PrefetchForName(_)))> pfanno*
    ; pfname := PrefetchForName(<newname-webdsl-suffix(| <suffix-from-name> tname )> "prefetchFor")
    ; elems2 := <replace-prefetch-for(|x, pf{pfname,pfanno*})> elems1

  add-query-optimization :
    For(x, srt, call, f, elems1, elems3){anno*} -> For(x, srt, call, f, elems2, elems3){IsOptimized(),qc,tokeep*}
    where <is-entity-type-strip-generics> srt
      ; <fetch-elem(?TemplateArgs(args))> anno*
      ; <fetch-elem(?TemplateName(tname))> anno*
      ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (try(where(NotOptimizedWarnings); <debug(!"NotOptimized:")> ("For", x, srt)); get-empty-query-analysis)> anno* 
      ; bindableargs := <filter(query-optimization-bindable-argument)> args
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; (qc, elems2) := <query-analysis-to-query-optimizition(|qa,x,srt,bindableargs)> elems1
      //; newcall := /*<try(pass-query-optimization-to-call(|qo))>*/ call

  desugar-query-analysis :
    def@For(x, srt, e, f, elems1, elems3){anno*} -> For(x, srt, e, f, elems2, elems3){qc,newanno*}
    where <is-entity-type-strip-generics> srt
    ; <fetch-elem(?TemplateArgs(args*))> anno*
    ; <fetch-elem(?TemplateName(tname))> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; <template-body-ready> elems1
    ; cond := <?Filter(<id>, _, _) <+ !True()> f
    ; tgenname := <normalize-signature; generate-template-name> (tname, args*)
    ; {| CurrentTemplateName
      : rules( CurrentTemplateName := tgenname )
      ; (elems2, newanno*) := <perform-query-analysis(|("For", x, srt), [args*,ic*],cond,x,f)> (elems1, anno*)
    |}
    // Query condition anno is placed directly, because they are used to determine the filter that is used, during the analysis of parent blocks
    ; bindableargs := <filter(query-optimization-bindable-argument)> args*
    ; qc := <get-query-condition(|x,srt,bindableargs)> newanno*
          
rules // ForAll only declared entity types
  
  constraint-error-ui: ForAll(_, srt, _, _, _) -> <forall-constraint-error(|srt)>

  forall-constraint-error(|srt) :
    x -> <add-error(|["'for' without 'in' can only iterate over a defined entity type, incorrect type used: ", <pp-type> srt])>
    where not(<is-entity-type> srt) <+ <?SimpleSort("Entity")> srt

rules

  constraint-error-ui : For(_, srt, e, _, _, _)            -> <for-constraint-error(|srt, e)>
     
  for-constraint-error(|srt, e) :
    x -> <add-error(|[<pp-webdsl> e, " should be a collection of type ", <pp-type> srt])>
    where not(GenericSort(_, [srt]) := <type-of> e)  
    
rules    

  constraint-error-ui : ForCount(x, e1, e2, elems1, sep) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-ui : ForCount(x, e1, e2, elems1, sep) -> <expression-type-constraint(|SimpleSort("Int"))> e2
   
rules
	
  // if 'for' body is not a single templatecall, lift elements to a new template definition and replace with a single templatecall to that new template
  // no special handling of variables is then needed to handle 'for' loops, because templatecall code already keep track of multiple instantiations of a template and its variables
  // 'for' body needs to be desugared within define context, that way the <rename> invoke will correctly add information of the enclosing context  
  desugar-in-define-context :
  	For(x, srt, e, f, elems, elems2){anno*} -> For(x, srt, e, f, [result], elems2){anno*}
    where result := <for-lifting-desugar-helper> (elems, anno*) 
  desugar-in-define-context :
  	ForAll(x, srt, f, elems, elems2){anno*} -> ForAll(x, srt, f, [result], elems2){anno*}
    where result := <for-lifting-desugar-helper> (elems, anno*) 
  desugar-in-define-context :
  	ForCount(x, e1, e2, elems, elems2){anno*} -> ForCount(x, e1, e2, [result], elems2){anno*} 
    where result := <for-lifting-desugar-helper> (elems, anno*) 
    
  for-lifting-desugar-helper :
  	(elems, anno*) -> result
    where <oncetd(is-var-decl-cons)> elems // only necessary if contents has vardecl or placeholder variable
  	with  result := TemplateCall("internalElementsWrapper",[],[],TemplateBody(elems)){TemplateCallInlineDisabled(),anno*} // wrap the body in a call so it gets lifted as elements
    // rename of templatecall will happen as part of desugar-in-define-context,
    // which does rename on complete template after the desugar to fix references
    