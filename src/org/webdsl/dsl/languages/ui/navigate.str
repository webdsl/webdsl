module org/webdsl/dsl/languages/ui/navigate

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator
 
overlays

  NavigateErrorMessage =
    "Not a valid navigate link, page does not exist: "   
        
rules // typechecking page elements  

  this-call-to-page-call: ThisCall(name, args){anno*} -> PageCall(name, args){anno*}

  templatecall-replace-page-args(|tname):
    [tc, txt] -> [<this-call-to-page-call> tc, txt]
    where "navigatebutton" := tname

  eq-type-of: 
    PageCall(name, arg*) -> t
    where t := <test-page-call> (Page(), <strip-annos> name, arg*)
  
  // url() is declared as a template, but can be used as a page in a navigate call
  eq-type-of-ui: 
    PageCall("url", [args]) -> InternalSort("Page")

  check-link :
    tc@PageCall("url", [e]) -> tc
    where <type-compatible> (<type-of> e, SimpleSort("String"))

  check-link :
    pc@PageCall(p, args) -> pc
    where not("url" := <strip-annos> p)
        ; InternalSort("Page") := <type-of> pc

rules // desugar

  desugar-ui: 
    TemplateCall("navigate", [e1,e2], passign*, elem*){anno*} -> 
    TemplateCall("navigatebutton", [e2,e1], passign*, elem*){anno*}

rules //more specific NavigateCall

  desugar-ui: 
    NavigateCall(pc@PageCall(x,arg*),passign*,elem*){anno*} -> 
    <rename-all> TemplateCall("navigate", [pc], passign*, TemplateBody(elem*)){anno*}
      
rules

  constraint-error-action: pc@PageCall(p, e*) -> <add-error(|err)>
    where argtypes := <map(type-of)> e* // don't report when sub-expression was already wrong
        ; <not(check-link)> pc
        ; if "url" := p then
             err := ["Invalid url call: expected one string argument."]
          else
              with(  sig := <pretty-print-call(|p,argtypes)> )
            ; err := ["There is no page with signature ", sig]
          end
    