module org/webdsl/dsl/languages/ui/desugar

strategies

  //desugar-ui = DeriveInput
  desugar-ui = DeriveOutput

rules //desugar dummy templatecall

  desugar-ui :
    Define(mods, name, args, targs, elems){anno*} -> result
    where <oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems
    with  elems2 := <inline-dummy-contents> elems
        ; not(<oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems2; debug(!"Internal error: dummy templates should have been removed."))
        ; result := Define(mods, name, args, targs, elems2){anno*}

  inline-dummy-contents =
  	topdown(try(repeat(inline-dummy-contents-list)))
  		
  inline-dummy-contents-list =		
    is-list
  ; fetch(?TemplateCall("dummy",_,_,TemplateBody(_)))
  ; map(try(?TemplateCall("dummy",_,_,TemplateBody(<id>))))
  ; flatten-list

  desugar-query-analysis :
    inp@Define(mod*, x,farg1*, req*, elem1*){anno*} -> def{newanno*}
    where not(<fetch-elem(is-query-analysis)> anno*)
        ; genname := <generate-template-name-fargs>(x, farg1*, mod*)
        ; not(<fetch(Local)> mod*) // We analyze local redefines after they have been lifted
        ; <template-body-ready> elem1*
		    ; {| CurrentTemplateName
		      : rules(CurrentTemplateName := genname )
		      ; (elem2*, newanno*) := <perform-query-analysis(|("Define", genname), farg1*,True(), None(), None())> (elem1*, anno*)
		    |}
        ; def := Define(mod*, x, farg1*, req*, elem2*){newanno*}
        ; rules ( CurrentTemplateDecl : genname -> def) // We need the argument annotations in other desugar rules, so do not wait for rename to update

  add-query-optimization :
    def@Define(mod*, x,farg1*, req*, elem1*){anno*} -> Define(mod*, x,farg1*, req*, elem2*){IsOptimized(),tokeep*}
    where <not(fetch-elem(IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (try(where(NotOptimizedWarnings); <debug(!"NotOptimized:")> ("Define", <generate-template-name-fargs>(x, farg1*,mod*), <is-not-analyzed; Snd> def)); get-empty-query-analysis)> anno*
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; bindableargs := <filter(query-optimization-bindable-argument)> farg1*
      ; elem2* := <foldr(!elem1*,add-query-optimization-to-argument(|qa,bindableargs)); try(add-session-var-optimizations(|qa,mod*,x))> farg1*

  add-session-var-optimizations(|qa,mod*,x) :
    elem1* -> elem2*
    where <fetch(Page)> mod*
    with elem2* := <get-session-args; filter(has-traversals-on(|qa)); foldr(!elem1*,add-query-optimization-to-argument(|qa,[]))>

  has-traversals-on(|qa) :
    arg@Arg(x, srt) -> arg
    where {|RootVar
      : rules( RootVar : Var(x) -> srt )
      ; QueryAnalysis(analysis, _, _, _, _) := qa
      ; not([] := <filter-traversal-summary> analysis)
      |}


rules
	
  desugar-in-define-context :
  	a@Action(amod*, nm, farg1*, b1){anno*} -> Action(amod*, nm, farg3*, b1){anno1*}
  	where has-no-anno(?SubmitActionTemplateArgsAdded())
  	    ; AccessControlRulesApplied 
  	      // after ac is applied, additional arguments might be needed that are used in the ac expression
  	      //  this desugaring changes arguments, so ac rule matching would break if it came after this
  	with  (arg2*,farg2*) := <get-args-fargs-from-closure-in-anno-filtered> (anno*,b1)
  	    // note: arg2* arguments are coming from original template, call might be in lifted template,
  	    //  where the arguments have different types (ref arg instead of regular)
  	    //  e.g. original has a template var of type Tag, lifted has template argument of type Ref<Tag>
  	    //  so if there is lifting need to: get closure from call and match names in arg2*
  	    // note: closure in anno has all template args, but not local args like for loop iterator, 
  	    //  front-end currently forces actions to be specified at top in template,
  	    //  and inline action desugaring has already added these local arguments to the action def and call
  	    ; anno1* := [SubmitActionTemplateArgsAdded() | anno*]
      	; farg3* :=  [farg1*,farg2*]
        ; rules ( 
          	DesugarSubmitActionCall : // matching only on the unique name 'nm' of the defined action
              ActionCall(nm, arg1*){anno2*} ->  ActionCall(nm, [arg1*,arg5*]){anno3*}
              where has-no-anno(?SubmitActionTemplateArgsAdded())
                  ; AccessControlRulesApplied
                  ; anno3* := [SubmitActionTemplateArgsAdded(),ActionFargAnno(farg3*)| anno2*] 
                  ; (arg4*,farg4*) := <get-args-fargs-from-closure-in-anno-filtered> (anno2*,anno2*) // not filtering here, just want complete closure
                  ; if arg2* := arg4* // if already the same, skip
                    then arg5* := arg2*
                    else arg5* := <filter(replace-var-in-action-call(|arg4*))> arg2* // replace with var{uniq} from action call environment
                    end
          ) 
        
  // strings with annotations seem to take annotations into account when matching, strip annos here because we are looking for a match of name ignoring annotations  
  replace-var-in-action-call(|arg4*):
	Var(x){anno*} -> result
	where y := x{}
	    ; result := <fetch-elem(where(\z -> <?Var(<strip-annos>);?y> z\))> arg4*
 
  desugar-actioncall-pre-rename = ?ActionCall(_,_); DesugarSubmitActionCall
  
signature constructors SubmitActionTemplateArgsAdded : Term
