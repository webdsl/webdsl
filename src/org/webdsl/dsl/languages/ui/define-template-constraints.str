module org/webdsl/dsl/languages/ui/define-template-constraints

imports
  libstrategolib

imports
  libwebdsl-front

rules
  
  constraint-error-global = with(
      all-keys-TopLevelTemplateDecl
    ; remove-all(?(_,[]))             // no-arg templates are catched by next constraint
    ; map(bagof-TopLevelTemplateDecl); concat => decls
    )
    ; <constraint-double-decls(
          template-def-to-sig; sig-to-lower
        ,{  Snd; template-def-to-sig; pretty-print-template-signature => prettysig
          ; <concat-strings> ["Multiple template definitions with signature ",prettysig,". Use 'override' modifier to replace existing templates."]
         }
      )> decls
    ; fail
   
  // Page arguments are not appended, so remove them when comparing signatures
  remove-fargs-if-page: Define(mod*, name, fargs, targs, body) -> Define(mod*, name, [], targs, body)
    where <fetch(?Page())> mod*
   
  // Pages are not overloaded, so pages can clash with no-arg templates.
  constraint-error-global = with (
      all-keys-TopLevelTemplateDecl
    ; filter(?(_,[]))               // templates with args are renamed, catched by constraint above
    ; map(bagof-TopLevelTemplateDecl); concat => template*
    ; all-keys-PageDecl
    ; map(bagof-PageDecl); concat => page*
    )
    ; <constraint-double-decls(
          try(remove-fargs-if-page); template-def-to-sig; sig-to-lower
        ,{  Snd; template-def-to-sig; Fst => name
          ; <concat-strings> ["Multiple page/template definitions with name '", name, "'. Use 'override' modifier to replace existing pages/templates."]
         }
      )> [page*, template*]
    ; fail
  
  template-def-to-sig :
    Define(_, nm, arg, _, _) -> <strip-all-annos> (nm,<map(?Arg(_,<id>))> arg)

  pretty-print-template-signature :
    (ident,argtypes) -> result 
    with result := <concat-strings> [ident,"(",<pp-types> argtypes,")"]
 
rules

  constraint-error-ui:
    Define(mod*, name, fargs, targs, body) -> <add-error(|["A page cannot be an ajax template."])>
    where <fetch(Page)> mod*
    where <fetch(AjaxTemplate)> mod*