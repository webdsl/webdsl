module org/webdsl/dsl/languages/ui/template-id

rules

  // If 'id' is used, create a var in the enclosing define.
  // If the elements with 'id' are lifted to another template, they will still refer to the template id of the original context.
  normalize-constructor :
    Define(mod*, x, farg*, req*, elem*){anno*} -> Define(mod*, x, farg*, req*, [idvar | elem2*]){anno*}
    where <oncetd(?TemplateId())> elem*
    with  elem2* := <alltd(\ TemplateId(){anno*} -> Var( $[id$[x]] ){anno*} \)> elem*
        ; idvar := TemplateVarDeclInit( $[id$[x]]
                                      , SimpleSort("String")
                                      , Call(ThisCall("getTemplate", []), "getUniqueId", []))

  normalize-constructor : Entity(s, super, entbodydecs){anno*} -> Entity(s, super, <normalize-constructor-entity-helper> entbodydecs){anno*}
  normalize-constructor : EntityNoSuper(s, entbodydecs){anno*} -> EntityNoSuper(s,<normalize-constructor-entity-helper> entbodydecs){anno*}
  normalize-constructor : ExtendEntity(s, entbodydecs){anno*} -> ExtendEntity(s, <normalize-constructor-entity-helper> entbodydecs){anno*}
  normalize-constructor : SessionEntity(nm, entbodydecs){anno*} -> SessionEntity(nm, <normalize-constructor-entity-helper> entbodydecs){anno*}
  normalize-constructor : ExtendSessionEntity(x_class, entbodydecs){anno*} -> ExtendSessionEntity(x_class, <normalize-constructor-entity-helper> entbodydecs){anno*}

  normalize-constructor-entity-helper :
    entbodydecs -> entbodydecs2
    where <oncetd(?TemplateId())> entbodydecs
    with  entbodydecs2 := <alltd(\ TemplateId(){anno*} -> FieldAccess(Var("this"), "id"){anno*} \)> entbodydecs

rules

  reserved-var-name-message : "id" -> "Variable name 'id' is not allowed, it refers to the current unique template id."

  constraint-error-action : VarDecl(x, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : TemplateVarDecl(x, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : VarDeclInit(x, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : TemplateVarDeclInit(x, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : VarDeclInitInferred(x, _)-> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : TemplateVarDeclInitInferred(x, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : GlobalVarDeclInit(x, _, _)-> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : GlobalVarDeclInitInferred(x, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : RequestScopeTemplateVarDecl(x, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : Arg(x, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : For(x, _, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForInferred(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForAll(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForCount(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : ForStmt(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForStmtInferred(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForAllStmt(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ForCountStmt(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action : ForExp(_, x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>

  constraint-error-action :
    Placeholder(Add(String(""),Var(_)), _){anno*} -> <add-error(|<reserved-var-name-message> x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action :
    PlaceholderWithAjaxCall(Add(String(""),Var(_)), _){anno*} -> <add-error(|<reserved-var-name-message> x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*
    
  constraint-error-action :
    Placeholder(_, Add(String(""),Var(_)), _){anno*} -> <add-error(|<reserved-var-name-message> x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action :
    PlaceholderWithAjaxCall(_, Add(String(""),Var(_)), _){anno*} -> <add-error(|<reserved-var-name-message> x)>
    where <fetch(?DeclaredPlaceholderName(x))> anno*

  constraint-error-action : ExpVarArgFor(x, _, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ExpVarArgForInferred(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ExpVarArgForAll(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
  constraint-error-action : ExpVarArgForCount(x, _, _, _) -> <add-error(|<reserved-var-name-message> x)>
