/**

 Access Control for WebDSL

*/

module org/webdsl/dsl/languages/access-control/typecheck

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/access-control/-
  org/webdsl/dsl/languages/ui/declare
  org/webdsl/dsl/languages/data-model/declare
  org/webdsl/dsl/languages/data-model/name-property
  org/webdsl/dsl/typechecker/error
  org/webdsl/dsl/typechecker/utils

rules //principal declaration

  constraint-error-ac :
    a@AccessControlPrincipal(ident,props) -> <add-error(|["Entity '",ident,"' does not exist, and cannot be used as principal for access control."])> ident
    where <not(IsEntity)> ident

  constraint-error-ac :
    a@AccessControlPrincipal(ident,props) -> <fail>
    where <map(
             constraint-error-principal-prop(|ident)
          <+ constraint-error-principal-proptype(|ident)
          <+ constraint-error-principal-propname(|ident)
          <+ id
          )> props

  constraint-error-principal-prop(|ent) :
    propname -> <add-error(|["Principal credential '",propname,"' is not a property of entity '",ent,"'."])>
    where not(!(ent,propname);is-property)

  constraint-error-principal-proptype(|ent) :
    propname -> <add-error(|["Principal credential '",propname,"' is not compatible with String type."])>
    where not(<type-compatible> (<type-of-property> (ent,propname), SimpleSort("String")))

  constraint-error-principal-propname(|ent) :
    propname -> <add-error(|["Principal credential type '",ent,"' does not have a 'name' property, a property with 'name' annotation is not sufficient for use as credential."])> 
    where <type-compatible> (<type-of-property> (ent,propname), SimpleSort("String"))
        ; <?"name"> propname
        ; not(<has-name-property> ent)

rules //predicate

  constraint-error-ac :
    a@Predicate(ident,fargs,exp) -> <add-error(|["predicate should contain a Bool expression: ",<pp-webdsl> a])> exp
    where t := <type-of> exp
    where not(SimpleSort("Bool") := t)

rules //ac rules

  constraint-error-ac :
    a@AccessControlRule(checktype,matchstring,fargs,check,acrules) -> <add-error(|["rule should contain a Bool expression: ",<pp-webdsl> a])> check
    where t := <type-of> check
    where not(SimpleSort("Bool") := t)

  constraint-error-ac :
    a@AccessControlRule(checktype,matchstring,fargs,check,acrules) -> <add-error(|["rule type unknown: ",<pp-webdsl> a])> checktype
    where <not(elem)> (checktype,[ "page"
                                  ,"action"
                                  ,"template"
                                  ,"ajaxtemplate"
                                  ,"pointcut"
                                 ])

  constraint-error-ac :
    a@AccessControlRule(checktype,matchstring,fargs,check,acrules) -> []
    where <?"page"<+?"template"> checktype
        ; <fetch-elem(check-nested-rule-type(|["action"]))> acrules
  check-nested-rule-type(|ruletypes) :
    a@AccessControlRule(checktype,matchstring,fargs,check,acrules) -> <add-error(|["nested rule type unknown: ",<pp-webdsl> a])> checktype
    where <not(elem)> (checktype,ruletypes)

rules //special ac rules

  constraint-error-ac :
    a@SpecialAccessControlRule(checktype,check) -> <add-error(|["rule should contain a Bool expression: ",<pp-webdsl> a])> check
    where t := <type-of> check
    where not(SimpleSort("Bool") := t)

  constraint-error-ac :
    a@SpecialAccessControlRule(checktype,check) -> <add-error(|["rule type unknown: ",<pp-webdsl> a])> checktype
    where <not(elem)> (checktype,[ "logsql" ])

rules //pointcuts

  // correct element arguments received a type during rename, x{y} will match in that case
  constraint-error-ac :
    a@AccessControlPointcutElement(ident,matchident,faidents,wc) -> <fail>
    where <filter({x,y:not(?_{y});?x;<add-error(|["pointcut element uses unknown identifier: ",<pp-webdsl> x])> a})> faidents

  constraint-error-ac :
    AccessControlPointcut(pname,fa,elems) -> <fail>
    where argids := <map(\Arg(ident,thesort)->ident\)> fa
        ; <filter(constraint-error-ac-pointcut-arg(|argids))> elems
  constraint-error-ac-pointcut-arg(|argids) :
    acpe@AccessControlPointcutElement(ident,matchident,faidents,wc) -> <fail>
    where <filter({x:?x;<not(fetch(?x))>faidents;<add-error(|["pointcut element must use pointcut argument: ",x])>acpe})> argids

  constraint-error-ac :
    a@AccessControlRule("pointcut",matchident,args,checks,childrules) -> <add-error(|["pointcut ",matchident," does not exist: ",<pp-webdsl> a])> matchident
    where MatchArgs(fargs,wc) := args
        ; t1* := <map(?Arg(_,<id>))> fargs
        ; not(<MatchesAccessControlPointcut> (matchident,t1*))

rules //general

  constraint-error-ac :
    AccessControlRule(_,_,_,_,_) -> <add-error(|["cannot have access control rules without a principal declaration: "])>
    where not(is-access-control-enabled)
    where not(defined-in-built-in-app-file)

  constraint-error-ac =
      ?AccessControlPrincipal(_,_)
    ; where(principals := <bagof-PrincipalDecl; uniq; length>)
    ; where(<gt> (principals, 1))
    ; add-error(|["Only one access control principal can be defined."])

rules

  get-toplevel-name = ?Predicate(<id>, _,_)

rules //matching

  constraint-error: //error when exact page match, but no such page
    acr@AccessControlRule("page",x_pagematchname,margs@MatchArgs(farg1,_),e,acrule*) -> <add-error(|["Page rule refers to non-existing page: ",<pp-webdsl> acr])> x_pagematchname
    where not(<string-as-chars(fetch('*'))> x_pagematchname) //don't trigger when wildcard is used
    where not(<PageDecl <+ PageDeclOverride> x_pagematchname)
          <+   not(<?MatchArgs(_,Some(_))> margs) //don't trigger when wildcard is used
             ; Define(_,_,farg2,_,_) := <PageDecl> x_pagematchname
             ; not(<zip({?(Arg(_,t1),Arg(_,t2));<?t1> t2})> (farg1,farg2)) //also arg types must match

  constraint-error: //error when exact template match, but no such template
    acr@AccessControlRule(x_kind,x_templatename,margs,e,acrule*) -> <add-error(|["Template rule refers to non-existing template: ",<pp-webdsl> acr])> x_templatename
    where not(<string-as-chars(fetch('*'))>x_templatename) //don't trigger when wildcard is used
    where not(<?MatchArgs(_,Some(_))> margs) //don't trigger when wildcard is used
    where ("template" := x_kind <+ "ajaxtemplate" := x_kind)
        ; sig := <normalize-signature> (x_templatename,<?MatchArgs(<id>,_)> margs)
        ; not(decl := <TemplateNewName; TemplateDecl> sig)
