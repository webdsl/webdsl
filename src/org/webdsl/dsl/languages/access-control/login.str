module org/webdsl/dsl/languages/access-control/login

imports
  libwebdsl-front

rules

  declare-override = declare-login; fail //declare-override happens after regular declare, generating login template requires all entities declared

  declare-login =
          PrincipalDecl => AccessControlPrincipal(x_ident,props)
   ;with( len := <length> props
        ; <register-reserved-function> ("authenticate",len)
        ; declare-authenticate-function(|x_ident,props)
        ; <register-reserved-function> ("logout",0)
        ; declare-logout-function
        ; emit-and-declare-login-template(|x_ident,props)
        ; emit-and-declare-logout-template(|x_ident,props)
        ; emit-and-declare-authentication-template(|x_ident,props)
          )

rules //authenticate function

  declare-authenticate-function(|x_ident,props) =
    with(
      farg_loginfun* := <map(create-farg-for-login-fun(|x_ident))> props
      // we can't emit yet, need a renamed SecurityContext to infer checks
    ; <declare> def |[ function authenticate(farg_loginfun*) : Bool {} ]|
    )

  create-farg-for-login-fun(|x_ident) :
    x -> result
    with  type := <entity-prop-to-type(|x_ident)> x
        ; result := Arg(<credential-to-var-name> x, type)

  credential-to-var-name = <concat-strings> ["cred",<id>]

  entity-prop-to-type(|x_ident) :
    x -> result
    with result := <type-of-property <+ !"Undefined"> (x_ident,x)
    //Undefined when the principal declaration was incorrect, e.g. principal type or credential property doesn't exist
    //doesn't overlap with an entity name Undefined, since that would be type SimpleSort("Undefined")

  emit-ac-defs: AccessControlPrincipal(x_ident, props) -> <fail>
    with emit-authenticate-function(|x_ident,props)

  emit-authenticate-function(|x_ident,props) =
    with(
      farg_loginfun* := <map(create-farg-for-login-fun(|x_ident))> props
    ; x_firstprop := <Hd> props
    ; x_firstpropvarname := <credential-to-var-name> x_firstprop
    ; x_findfun := <concat-strings> ["find",x_ident,"By",<capitalize-string> x_firstprop]
    ; srt_ent := SimpleSort(x_ident)
    ; stat_auth* := <Tl; map(cred-prop-to-auth-stat(|x_ident))> props
    ; <emit-webdsl-code-no-declare> def|[
      function authenticate(farg_loginfun*) : Bool {
        var tmpentitylist : List<srt_ent> := x_findfun(x_firstpropvarname);
        if(tmpentitylist.length > 0) {
          for(tmpentity : srt_ent in tmpentitylist){
            var allow : Bool := true;

            stat_auth*

            if(allow){
              securityContext.principal := tmpentity;
              getDispatchServlet().renewCookieValue();  // renew cookieValue, should be done after any login action
              return true;
            }
          }
        }
        securityContext.principal := null;
        return false;
      }
      ]|
    )

  cred-prop-to-auth-stat(|x_ident) =
     cred-prop-to-auth-stat-secret(|x_ident)
  <+ cred-prop-to-auth-stat-stringcomp(|x_ident)

  cred-prop-to-auth-stat-secret(|x_ident) :
    x -> stat*
    where SimpleSort("Secret") := <entity-prop-to-type(|x_ident)> x
    with  x_varname := <credential-to-var-name> x
        ; stat* := webdsl |[
            if(!tmpentity.x.check(x_varname)) {
              allow := false;
            }
          ]|

  cred-prop-to-auth-stat-stringcomp(|x_ident) :
    x -> stat*
    where <type-compatible> (<entity-prop-to-type(|x_ident)> x, SimpleSort("String"))
    with  x_varname := <credential-to-var-name> x
        ; stat* := webdsl |[
            if(tmpentity.x != x_varname){
              allow := false;
            }
          ]|

rules //logout function

  declare-logout-function =
    <declare> def |[ function logout(){} ]|

  emit-ac-defs : AccessControlPrincipal(x_ident, props) -> <fail>
    with create-logout-function(|x_ident,props)

  create-logout-function(|x_ident,props) =
    with(
      <emit-webdsl-code> def|[
        function logout() {
          securityContext.principal := null;
        }
      ]|
    )

rules // login template

  emit-and-declare-login-template(|x_ident,props) =
    with(
      e_loginfunarg* := <map(!Var(<credential-to-var-name>))> props
    ; elem_loginvar* := <map(create-vars-for-login-tpl(|x_ident))> props
    ; elem_logininput* := <map(create-inputs-for-login-tpl(|x_ident))> props
    ; <emit-webdsl-code> def|[
      define login() {

        elem_loginvar*
        var stayLoggedIn := false;

        form {
       	  <fieldset>
            <legend>
              output("Login")
            </legend>
            <table>
              elem_logininput*
              <tr>
                labelcolumns("Stay logged in:"){input(stayLoggedIn)}
              </tr>
            </table>
            action("Login", signinAction())
          </fieldset>
        }

        action signinAction() {
          getSessionManager().stayLoggedIn := stayLoggedIn;
          validate(authenticate(e_loginfunarg*), "The login credentials are not valid.");
          message("You are now logged in.");
          return root();
        }
      }
      ]|
    )

  create-vars-for-login-tpl(|x_ident) :
    x -> result
    with  type := <entity-prop-to-type(|x_ident)> x
        ; result := TemplateVarDecl(<credential-to-var-name> x,type)

  create-inputs-for-login-tpl(|x_ident) :
    x -> result
    with  x1 := <credential-to-var-name> x
        ; e := String(<concat-strings> [<make-human-readable> x , ": "])
        ; result := elem |[ <tr> labelcolumns(e){input(x1)} </tr> ]|

rules // logout template

  emit-and-declare-logout-template(|x_ident,props) =
    with(
      <emit-webdsl-code> def|[
        define logout() {
          if(securityContext.principal != null){
            "Logged in as: " output(securityContext.principal.name)
          }
          form{
            submitlink signoffAction() {"Logout"}
            action signoffAction() {
              logout();
            }
          }
        }
      ]|
    )

rules // authentication template

  emit-and-declare-authentication-template(|x_ident,props) =
    with(
      <emit-webdsl-code> def|[
        define authentication() {
          if(loggedIn()){
            logout()
          }
          else{
            login()
          }
        }
      ]|
    )
