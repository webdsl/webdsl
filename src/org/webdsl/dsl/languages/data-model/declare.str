module org/webdsl/dsl/languages/data-model/declare

signature constructors
  IsGeneratedProperty : Term

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator
  org/webdsl/dsl/modules/types/entity
  org/webdsl/dsl/languages/webservice-synchronization/declare

strategies

  declare-data = declare-entity
  declare-data = declare-extend-entity

strategies

  // Prevent name clash of entity & functions for backend cache
  get-toplevel-name = get-entity-def; ?(<concat-strings> ["ent_",<id>],_)
  get-toplevel-name = get-extend-entity-def; ?(<concat-strings> ["ent_",<id>],_)

strategies // register all declared entities

  all-properties = all-properties(|[])

  all-properties(|alreadychecked) :
    x_class -> []
    where <fetch(?x_class)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'

  all-properties(|alreadychecked) :
    x_class -> result
    where not(<fetch(?x_class)> alreadychecked)
    with  props := <bagof-Properties> x_class
        ; if not(<Extends> x_class)
          then result := []
          else
            if not("Entity" := <Extends> x_class)
            then result := <concat> [props, <Extends; all-properties(|[x_class|alreadychecked])> x_class]
            else result := props end
          end

  /**
   *  gives all the properties of the entity and its supers, as a list of tuples of (entitywiththeproperty,property)
   *  includes built-in properties like id, version and name
   */
  all-entity-properties-tuples = all-entity-properties-tuples(|[])

  all-entity-properties-tuples(|alreadychecked) :
    x_class -> []
    where <fetch(?x_class)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'

  all-entity-properties-tuples(|alreadychecked) :
    x_class -> result
    where not(<fetch(?x_class)> alreadychecked)
    with  props := <bagof-AllProperties; map(\x -> <PropertyDecl> (x_class, x)\)> x_class
        ; props1 := <map(create-tuple-with-entity-prop(|x_class))> props
        ; if not("Entity" := x_class) //stop at Entity (but its properties are included)
           ; super := <Extends> x_class //stop if invalid entity found (for each entity Extends should succeed, but need to cope with app errors)
          then result := <concat> [<all-entity-properties-tuples(|[x_class|alreadychecked])> super, props1]
               //order from least specific to most specific, that way when iterating over them and creating DR the more specific takes precedence
          else result := props1 end

  create-tuple-with-entity-prop(|x_class) : prop -> (x_class,prop)


  /**
   *  Doesn't include functions from 'Entity', see modules/types/entity
   */
  all-functions = all-functions(|[])

  all-functions(|alreadychecked) :
    x_class -> []
    where <fetch(?x_class)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'

  all-functions(|alreadychecked):
    x_class -> result
    where not(<fetch(?x_class)> alreadychecked)
    with  funcs := <bagof-Functions> x_class
        ; if not(<Extends> x_class)
          then result := funcs
          else
            if not("Entity" := <Extends> x_class)
            then result := <concat> [funcs, <Extends; all-functions(|[x_class|alreadychecked])> x_class]
            else result := funcs end
          end

rules

  IsEntity = where(EntDecl)
  is-entity-type = is-defined-entity-type
  is-defined-entity-type = where(?SimpleSort(<IsEntity>)) //without the where it would remove SimpleSort constructor due to term projection syntax

  Extends :
    x_class -> x_super
    where x_super := <EntDecl; ?Entity(_,<id>,_)> x_class

  Extends :
    GenericSort(c,[SimpleSort(x_class)]) -> GenericSort(c,[SimpleSort(x_super)])
    where x_super := <EntDecl; ?Entity(_,<id>,_)> x_class

  declare-entity =
    ?ent@Entity(x_class, x_super, entbodydecs)
    ; with(
        rules( EntDecl :+ x_class -> ent
             SubClass :+ x_super -> x_class )
      ; <declare-entity-body(|x_class)> entbodydecs
      ; <declare-function(|x_class)> fun |[ function getName() : String { } ]|
      ; not(<extend-entity-declare> Entity(x_class, x_super, entbodydecs); debug(!"INTERNAL ERROR: extend-entity-declare must always fail"); <exit> 1) //for example used in typechecker/entity-events, ends in fail for extensibility
    )

  normalize-declare: EntityNoSuper(x_class, entbodydecs) -> Entity(x_class, "Entity", entbodydecs)

  declare-entity = ?EntityNoSuper(_, _); declare-normalized

  get-class-hierarchy:
    x -> [x | <defined-superclasses> x]

  defined-superclasses = defined-superclasses(|[])

  defined-superclasses(|alreadychecked) :
    x -> []
    where "Entity" := <Extends> x
       <+ not(<Extends> x) //e.g. x is not a valid entity, then the Extends rule is not declared
       <+ <fetch(?x)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'

  defined-superclasses(|alreadychecked) :
    x -> [super | <defined-superclasses(|[x|alreadychecked])> super]
    where not(<fetch(?x)> alreadychecked)
    where super := <Extends> x
        ; not("Entity" := super)

  normalize-declare: SessionEntity(nm, entbodydecs) -> EntityNoSuper(<capitalize-string> nm, entbodydecs)

  declare-entity =
    ?sent@SessionEntity(nm, entbodydecs)
    ; with (
        x_class := <capitalize-string> nm
      ; rules(
          IsSession : nm
          SessionEntityNames :+= nm
          TypeOf : nm -> SimpleSort(x_class)
          VarDecl :+ nm -> sent
          IsSessionEntityType : SimpleSort(x_class)
        )
      ; <declare-normalized> sent
      ; <not(extend-session-entity-declare(|x_class)) <+ debug(|"INTERNAL ERROR: extend-session-entity-declare must always fail");fail> sent
    )

  declare-extend-entity :
    ExtendSessionEntity(x_class, entbodydecs) -> ExtendSessionEntity(x_class, entbodydecs)
    with <declare-extend-entity> ExtendEntity(<capitalize-string> x_class, entbodydecs)

  declare-extend-entity :
    ExtendEntity(x_class, entbodydecs) -> ExtendEntity(x_class, entbodydecs)
    with  <declare-entity-body(|x_class)> entbodydecs

  declare-entity-body(|x_class): entbodydecs -> entbodydecs2
    with  (props,funcs,extendfuncs,validations,searchmappings,syncconfig,rest) := <split-entity-body> entbodydecs
      ; if (<not(?[])>searchmappings)
        then rules(IndexedEntity : x_class) ; <map(?SearchMappingEmbedded(<id>); map(declare-search-mapping(|x_class)))> searchmappings
        end
      ; if <fetch(?CachedEntity())> rest
        then rules(IsCachedEntity : x_class)
        end
      ; if (<not(?[])> syncconfig)
        then <map(declare-synchronization(|x_class))> syncconfig
        end
        ; <map(\prop -> <rules(Properties :+ x_class -> prop); declare-property(|x_class)> \)> props
        ; <map(\func -> <rules(Functions :+ x_class -> func); declare-function(|x_class)> \)> funcs
        ; <map(declare-extend-function(|x_class))> extendfuncs
        ; <handle-entity-id(|x_class)> props
        ; entbodydecs2 := <concat> [props,funcs,validations,syncconfig,rest]
        ; <filter(extend-entity-declare-body(|x_class))> entbodydecs2

  get-property :
    (x_class, x) -> prop
    where prop := <PropertyDecl <+ <get-property> (<Extends> x_class, x)>

  get-derived-property-exp :
    (x_class, x) -> e
    where e := <DerivedPropertyExp <+ <get-derived-property-exp> (<Extends> x_class, x)>

  IsProperty = where(PropertyDecl)

  TypeOfProperty = PropertyDecl; get-property-type

  declare-property(|x_class) =
    ?prop@Property(x, k, s, annos)
    ; rules( PropertyDecl   :+ (x_class, x) -> prop
             AllProperties  :+ x_class -> x             // used to get all properties, including built-ins
             //renaming to allow direct references to properties in entity functions/derived properties
             //RenameProperty : (x_class,x) -> y
           )
    ; with (
        try(
            <has-searchable-anno> annos
          ; <filter(declare-searchable-anno(|x_class, x))> annos
          ; rules( IndexedEntity : x_class )
        )
      )
    ; !prop
    ; try(declare-list-property(|x_class))
    ; not(<extend-property-declare(|x_class)> prop; debug(!"INTERNAL ERROR: extend-property-declare must always fail"); <exit> 1) //for example used in typechecker/property-events, ends in fail for extensibility
    ; !prop

  normalize-declare: DerivedProperty(x, k, srt, annos, e){anno*} -> Property(x, k, srt, []){anno*}

  declare-property(|x_class) =
    ?prop@DerivedProperty(x, k, srt, annos, e)
    ; where (
        try(
            <has-searchable-anno> annos
          ; <filter(declare-searchable-anno(|x_class, x))> annos
          ; rules( IndexedEntity : x_class )
        )
        ; try(
            <fetch(?SimpleAnno("cache"))> annos
          ; x_invalname := <concat-strings>["invalidate", <capitalize-string>x]
          ; <declare-function(|x_class)> fun |[ function x_invalname(){ } ]|
        )
      )
    ; rules(
        IsDerivedProperty : (x_class, x) //use in constraint to prevent assignment to derived prop
        DerivedPropertyExp : (x_class, x) -> e
      )
    ; with-origin(normalize-declare)
    ; declare-property(|x_class)

rules

  declare-list-property(|x_class) =
    ?Property(x, k, GenericSort(coll, [s@SimpleSort(_)]), annos)
    ; where(
             y := <concat-strings>[x, "List"]
           ; t := GenericSort("List", [s])
           )
        ; rules(
            TypeOfProperty : (x_class, y) -> t
          )
        ; if <IsDerivedProperty> (x_class, x) then rules( IsDerivedProperty : (x_class, y) ) end

rules

  is-cached-entity = is-cached-entity(|[])

  is-cached-entity(|checked) =
    ?x_class
  ; where(not(<fetch(?x_class)> checked))
  ; (IsCachedEntity <+ <Extends; is-cached-entity(|[x_class|checked])> x_class)

rules
	
  is-derived-property = is-derived-property(|[])

  is-derived-property(|checked) =
    ?(x_class, x)
    ; where(not(<fetch(?x_class)> checked))
    ; (   IsDerivedProperty
       <+ if   <IsProperty> (x_class, x) //this handles property override, used for 'name' property. The 'name' in Entity is derived, but a subclass can override this with a regular 'name' property.
          then fail
          else <is-derived-property(|[x_class|checked])> (<Extends> x_class, x)
          end
      )

rules
	
  is-property = is-property(|[])

  is-property(|checked) =
    ?(x_class, x)
  ; where(not(<fetch(?x_class)> checked))
  ; (IsProperty <+ <is-property(|[x_class|checked])> (<Extends> x_class, x))

rules

  type-of-property = type-of-property(|[])
    
  type-of-property(|checked) =
    ?(x_class, x)
  ; where(not(<fetch(?x_class)> checked))
  ; (TypeOfProperty <+ <type-of-property(|[x_class|checked])> (<Extends> x_class, x))

rules

  class-of-property = class-of-property(|[])

  class-of-property(|checked) =
    ?(x_class, x)
  ; where(not(<fetch(?x_class)> checked))
  ; (where(TypeOfProperty) < Fst + <class-of-property(|[x_class|checked])> (<Extends> x_class, x))

rules

  property-annos = property-annos(|[])

  property-annos(|checked) =
    ?(x_class, x)
  ; where(not(<fetch(?x_class)> checked))
  ; (PropertyAnnos <+ <property-annos(|[x_class|checked])> (<Extends> x_class, x))

rules
	
  is-indexed-entity = is-indexed-entity(|[])
  
  is-indexed-entity(|checked) =
      IndexedEntity
    <+
    	?x_class
      ; where(not(<fetch(?x_class)> checked))
      ; Extends
      ; is-indexed-entity(|[x_class|checked])

rules // functions that cannot be overloaded

  declare-no-overloading(|x_class) =
         (name, params) := <extract-function-sig>
       ; match := (x_class, name)
       ; rules(EntityFunctionNoOverloading :+ match -> params )
       ; id

rules // backend annotations

  add-backend-annotation =
    ?Entity(x_class,_,_)
    ; add-new-anno(|SuperClassesAnno(<defined-superclasses> x_class))

  add-backend-annotation =
    (?Entity(x_class,_,_) <+ ?EntityNoSuper(x_class, _) <+ ?SessionEntity(x_class, _))
    ; where(<is-cached-entity> x_class)
    ; add-new-anno(|CachedEntity())

rules // mark entities in built-in.app as precompiled

  add-backend-annotation :
    e@EntityNoSuper(name, body){anno*} -> EntityNoSuper(name, body){Precompiled(),anno*}
    where not(<fetch(Precompiled)> anno*)
    where not(<?"RequestLogEntry"> name) // do not precompile this, has an extend entity in generator
    where <fetch(?PositionAnno(<string-starts-with(|"../.servletapp/src-webdsl-template/built-in.app")>))> anno*

  keep-position-anno = ?EntityNoSuper(name,_); where(not(<?"RequestLogEntry"> name))
