module org/webdsl/dsl/languages/data-model/inverse-anno

imports 
  libstrategolib
  libwebdsl-front

rules

  normalize-constructor : 
    Property(x, k, srt, annos){anno*} -> Property(x, k, srt, annos'){anno*} 
    where <fetch(?IncompleteInverseAnno(prop))> annos
    with  ent := <try-strip-generic-sort; ?SimpleSort(<id>)> srt
        ; annos' := <map(try(\IncompleteInverseAnno(prop){anno1*} -> InverseAnno(ent, prop){anno1*}\))> annos
 
rules

  extend-property-declare(|x_class) = declare-inverse-property(|x_class); fail
  
  declare-inverse-property(|x_class) :
    p@Property(x, k, s, annos) -> p 
    where <fetch(?InverseAnno(ent,prop))> annos
        ; rules(
            InverseProperty : (x_class,x) -> (ent,prop)
            InverseProperty : (ent,prop)  -> (x_class,x)
          )
          
  extend-property-declare(|x_class) = declare-inverse-reference-only(|x_class); fail

  declare-inverse-reference-only(|x_class):
    p@Property(x, k, s, annos) -> p 
    where <fetch(?InverseReferenceOnlyAnno())> annos
        ; rules(
            InverseRefOnly : (x_class,x)
          )
       
// add PropertyTypeAnno for code completion
signature constructors 
  PropertyTypeAnno : Term -> Term 
  EntityNameAnno : Term -> Term 
rules
    
  rename-data :    
    InverseAnno(ent, prop){anno*} -> InverseAnno(ent, prop){PropertyTypeAnno(x),EntityNameAnno(<InEntity>),anno*}
    where x := <rename-inverse-anno-helper>
    
  rename-inverse-anno-helper = InProperty; get-property-type
          
rules
  
  desugar-data =
    ?ent
    ; create-inverse-anno
    ; not(?ent)

  create-inverse-anno :
    Entity(x_class,superclass, entbodydecs1){anno*} -> Entity(x_class,superclass, entbodydecs2){anno*}
    where entbodydecs2 := <map(try(desugar-inverse-property(|x_class)); try(desugar-inverse-reference-only(|x_class)))> entbodydecs1

  create-inverse-anno :
    EntityNoSuper(x_class, entbodydecs1){anno*} -> EntityNoSuper(x_class, entbodydecs2){anno*}
    where entbodydecs2 := <map(try(desugar-inverse-property(|x_class)); try(desugar-inverse-reference-only(|x_class)))> entbodydecs1

  desugar-inverse-property(|x_class) :
    Property(x, k, s, annos){anno*} -> Property(x, k, s, annos2){anno*}
    where <map(try(declare-inverse-anno(|x_class, x)))> annos
        ; annos2 := <create-inverse-slave-anno(|x_class,x)> annos

  desugar-inverse-reference-only(|x_class) :
    Property(x, k, s, annos){anno*} -> Property(x, k, s, annos2){anno*}
    where <InverseProperty;InverseRefOnly> (x_class,x)
    where <not(fetch(?InverseReferenceOnlyAnno()))> annos
    with  annos2 := [InverseReferenceOnlyAnno()| annos]
          
  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <once-CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)
        ; rules( InverseSlaveOf : (x_class, p) -> (ent, fld) )
    
  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      )
      

rules

  constraint-error-data :
    InverseAnno(ent, fld) -> <add-error(|["The entity ", ent, " does not exist"])> ent
    where not(<IsEntity> ent)

  constraint-error-data :
    InverseAnno(ent, fld) -> <add-error(|["The property ", ent, ".", fld, " does not exist"])> fld
    where not(<type-of-property> (ent, fld))

  constraint-error-data :
    InverseAnno(ent, fld) -> <add-error(|["The property ", ent, ".", fld, " is a derived property"])> fld
    where <is-derived-property> (ent, fld)

  constraint-error-data :
    InverseAnno(ent, fld) -> <add-error(|["Inverse annotations cannot be declared on both sides. Remove either the (inverse=", ent, ".", fld, ") or the (inverse=", i_ent, ".", i_fld, ") annotation"])>
    where [inverse_prop] := <filter(?Property(fld, _, _, annos))> <bagof-Properties> ent
        ; not([] := <filter(?InverseAnno(i_ent, i_fld))> annos)
        ; <not(eq)> ((ent, fld), (i_ent, i_fld))  // not reflexive

  constraint-error-data :
    InverseAnno(ent, fld) -> <add-error(|["In a many-to-one bidirectional association the inverse annotation should be declared on the many side. (inverse=", i_ent, ".", i_fld, ")"])>
    where <filter(?Property(fld, _, _, annos))> <bagof-Properties> ent
        ; [InverseSlaveAnno(i_ent, i_fld)] := <filter(?InverseSlaveAnno(_, _))> annos
        ; SimpleSort(_) := <type-of-property> (ent, fld)
        ; GenericSort(_, _) := <type-of-property> (i_ent, i_fld)
  
/**
 * Check inverse annotations for
 * - type-compatibility between srt2 and e2
 * - type-compatibility between srt1 and e1
 *
 * Code example
 *   entity e1 {
 *     instance2 -> srt2 (inverse=e2.instance1)
 *   }
 *   entity e2 {
 *     instance1 -> srt1
 *   }
 */
  // check all properties in the context of an entity. This is necessary for the inverse check on attribute type
  constraint-error-data =
    (  ?Entity(ent1, _, entbodydecs) 
    <+ ?EntityNoSuper(ent1, entbodydecs) 
    <+ ?ExtendEntity(ent1, entbodydecs)  )
    ; where (
        <filter(check-property-inverse-annos(|ent1))> entbodydecs
      )
    ; fail
  
  // takes care of different constructor types of properties
  check-property-inverse-annos(|ent1) =
    (?p@Property(_, proptype, srt2, annos) <+ ?p@DerivedProperty(_, proptype, srt2, annos, _))
    ; (   <check-entity-type-inverse-annos(|ent1, srt2, annos, proptype)> p
       <+ <check-property-inverse-annos(|ent1, srt2, annos)> p
       <+ <check-property-inverse-ref-only-annos(|ent1)> p
      )

  // check that inverse is declared on entity type properties
  check-entity-type-inverse-annos(|ent1, srt2, annos, proptype) :
    p -> <add-error(|["Inverse is only allowed on reference type properties."])>
    where <fetch(?InverseAnno(ent2, fld2))> annos
        ; not(<?Ref() <+ ?Comp()> proptype)  
        
  // check type-compatibility of inverse
  check-property-inverse-annos(|ent1, srt2, annos) :
    p -> <add-error(|["Inverse not allowed between types ", <pp-type> srt2, " and ", <pp-type> type_other_side, " (inverse property ",ent2, ".", fld2, ")."])>
    where <fetch(?InverseAnno(ent2, fld2))> annos
        ; type_other_side := <TypeOfProperty> (ent2,fld2)
        ; not( <inverse-compatible> (SimpleSort(ent1), SimpleSort(ent2), srt2, type_other_side) )
      
  /**
   *  (e1,e2,srt2,srt1)
   */
  
  inverse-compatible = ?(srt1, srt2, srt2, srt1)
  
  inverse-compatible = ?(srt1, srt2, GenericSort("Set", [srt2]), srt1)
  inverse-compatible = ?(srt1, srt2, srt2, GenericSort("Set", [srt1]))
  inverse-compatible = ?(srt1, srt2, GenericSort("Set", [srt2]), GenericSort("Set", [srt1]))
  
  inverse-compatible = ?(srt1, srt2, GenericSort("List", [srt2]), srt1)
  inverse-compatible = ?(srt1, srt2, srt2, GenericSort("List", [srt1]))
  
  
  constraint-error-data : 
  p@Property(_, _, srt, annos) -> <add-error(|["Inverse between lists not allowed"])>
  where GenericSort("List",_) := srt
      ; <fetch(?InverseAnno(ent, fld))> annos
      ; GenericSort("List", _) := <type-of-property> (ent, fld)
        
  check-property-inverse-ref-only-annos(|ent1) : 
  p@Property(x, _, srt, annos) -> <add-error(|["The inverse-reference-only annotation can only be used on properties of type Set that have an inverse property defined"])> a
  where <fetch(?a@InverseReferenceOnlyAnno())> annos
      ; if <InverseProperty>(ent1,x)
        then not( GenericSort("Set",_) := srt )
        end
      

rules // inverse of same property
  
  constraint-error-global-nondouble-entities =
      ?x_class
    ; all-properties
    ; filter(get-property-annos;not([]);fetch-elem(?InverseAnno(_,_)))
    ; remove-all(AlreadyCheckedInverseAnnos) //since this check is triggered for each entity in a hierarchy, need to prevent duplicate errors
    ; constraint-double-decls(
          alltd(strip-annos)
        , {ppinverse:
            with(ppinverse := <Fst; pp-webdsl-to-string>)
          ; with({reporteddef: Snd; ?reporteddef; rules(AlreadyCheckedInverseAnnos : reporteddef ) })
          ; <concat-strings> ["Inverse annotation '",ppinverse,"' is defined multiple times."]
          }
      )


rules
  
  add-backend-annotation =
    ?inv@name#([ent,fld])
    ; <?"InverseAnno" <+ ?"InverseSlaveAnno"> name    
    ; <has-no-anno(?TypeAnno(_))> inv
    ; type := <type-of-property> (ent,fld)
    ; <add-anno(|TypeAnno(type))> inv
