module org/webdsl/dsl/languages/data-model/load-entity-function

imports
  libstrategolib

imports
  libwebdsl-front

rules

  extend-entity-declare :
    Entity(x_class, _, _) -> <fail>
    with  load-entity-function-declare(|x_class)

  load-entity-function-declare(|x_class) =
    with(// load entity with id (property)
        x_staticname := "load"
      ; x_funname := <concat-strings> [x_staticname,x_class]
      ; <register-reserved-function> (x_funname,1)
      ; if srt1 := <HasNaturalId;EntityIdType> x_class then
            x_funnamefind := <concat-strings> ["find",x_class]
          ; <declare-emit-static-function(|x_class, x_staticname)> fun |[
              function x_funname(prop: srt1):x_class {
                return x_funnamefind(prop);
              }
            ]|
        else
            srt2 := SimpleSort("UUID")
          ; e0 := String(x_class)
          ; <declare-emit-static-function(|x_class, x_staticname)> fun |[
              function x_funname(prop: UUID):x_class {
                return getEntity(e0,prop) as x_class;
              }
            ]|
        end
    )

rules //loadEntity primarily for internal use in function above, implemented in back-end

  built-in-template-rule-setup = 
    x_funname := "loadEntity"
  ; <register-reserved-function> (x_funname,2)
  ; <declare> fun |[ function x_funname(type:String,id:UUID):Entity {} ]| //put type into string and extract in back-end to produce the actual java type to be loaded. type must be string literal
  ; fail
  
  built-in-template-rule-setup = 
    x_funname := "getEntity"
  ; <register-reserved-function> (x_funname,2)
  ; <declare> fun |[ function x_funname(type:String,id:UUID):Entity {} ]| //put type into string and extract in back-end to produce the actual java type to be loaded. type must be string literal
  ; fail
  
  built-in-template-rule-setup = 
    x_funname := "loadEntity"
  ; <register-reserved-function> (x_funname,1)
  ; <declare> fun |[ function x_funname(typeid:String):Entity {} ]|
  ; fail
  