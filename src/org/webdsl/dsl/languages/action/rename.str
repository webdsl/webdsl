module org/webdsl/dsl/languages/action/rename

signature
  constructors
    EntityFunctionAnno : Term

rules

  rename-action :
    v@VarDecl(x, srt){anno*} -> VarDecl(y, srt2){anno*}
    where InDef
    with  (y, srt2) := <vardecl-rename-common> (v, x, srt)
  register-templatevardecl-for-rename :
    v@TemplateVarDecl(x, srt){anno*} -> TemplateVarDecl(y, srt2){anno*}
    where InDef
    with  (y, srt2) := <vardecl-rename-common> (v, x, srt)

  vardecl-rename-common = vardecl-rename-common(rename-bound)
  vardecl-rename-immutable-common = vardecl-rename-common(rename-bound-immutable)
  vardecl-rename-common(s) :
    (v, x, srt) -> (y, srt2)
    with  srt2 := <rename-all> srt
        ; y := <s(|srt2)> x
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)

  rename-action :
    v@VarDeclInit(x, srt, e){anno*} -> VarDeclInit(y, srt2, e'){anno*}
    where InDef
    where (y, srt2, e') := <vardeclinit-rename-common> (v, x, srt, e)
  register-templatevardecl-for-rename :
    v@TemplateVarDeclInit(x, srt, e){anno*} -> TemplateVarDeclInit(y, srt2, e'){anno*}
    where InDef
    where (y, srt2, e') := <vardeclinit-rename-common> (v, x, srt, e)

  vardeclinit-rename-common :
    (v, x, srt, e) -> (y, srt2, e')
    with  e' := <rename-all> e
        ; (y, srt2) := <vardecl-rename-common> (v, x, srt)

  //local variable declaration with inferred type
  rename-action :
    v@VarDeclInitInferred(x, e){anno*} -> VarDeclInitInferred(y, e'){anno*}
    where InDef
    with  (y, e') := <vardeclinitinferred-rename-common > (v, x, e)
  register-templatevardecl-for-rename :
    v@TemplateVarDeclInitInferred(x, e){anno*} -> TemplateVarDeclInitInferred(y, e'){anno*}
    where InDef
    with  (y, e') := <vardeclinitinferred-rename-common > (v, x, e)

  vardeclinitinferred-rename-common :
    (v, x, e) -> (y, e')
    where InDef
    with  e' := <rename-all> e
        ; srt := <type-of;strip-immutable-anno <+ !"unknown"> e'
          // type-of can fail if the expression cannot be typed, in that case the var will not be declared and constraint error triggers
          // strip ImmutableReference() annotation, because x will be assignable even if e wasn't
        ; (y, srt2) := <vardecl-rename-common> (v, x, srt)

  //global variable declaration with explicit type and initializer
  rename-action :
    v@GlobalVarDeclInit(x, srt, e{anno*}){anno_v*} -> GlobalVarDeclInit(x, srt, e'{ObjectCreationSecretTypesNeedDigests(),anno*}){anno_v*}
    with  e' := <rename-all> e

  //global variable declaration with inferred type
  rename-action :
    v@GlobalVarDeclInitInferred(x, e{anno*}){anno_v*} -> GlobalVarDeclInitInferred(x, e'{ObjectCreationSecretTypesNeedDigests(),anno*}){anno_v*}
    with  e' := <rename-all> e

   rename-action :
     s@SimpleSort(_) -> s2
     with  s2 := <rename-type> s

   rename-action :
     GenericSort(g, types){anno*} -> GenericSort(g, types2){anno*}
     where not( g := "SDFInput")
     with  types2 := <rename-all> types

   /**
    *  Important, takes care of scoping if-then-else blocks in action code and in templates
    */
   rename-action :
    Block(stat1*){anno*} -> Block(stat2*){anno*}
    with {| Rename, VarInContext
          : stat2* := <rename-all> stat1*
          |}

  rename-action :
    Function(x, farg1*, srt, b1){anno*} -> newfun
    where not(InEntity)
    with {| Rename, InDef, FunctionArg, VarInContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; rules ( FunctionArg := farg2* )
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          ; newanno* := <rename-query-optimization-annos> anno*
          |}
        ; newfun := Function(x, farg2*, srt, b2){newanno*}
        ; store-global-function

  rename-action :
    Function(x, farg1*, srt, b1){anno*} -> newfun
    where x_class := <InEntity>
    with {| Rename, InDef, FunctionArg, VarInContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; rules ( FunctionArg := farg2* )
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          ; newanno* := <rename-query-optimization-annos/*; try(update-query-optimization-anno(|x_class, x, srt, farg1*))*/> anno*
          |}
        ; newfun := <add-anno(|EntityFunctionAnno());add-anno(|FunctionEntity(x_class))> Function(x, farg2*, srt, b2){newanno*}
        ; store-entity-function(|x_class)

rules

  // store current function definition with renamed body
  store-entity-function(|x_class) =
    ?def@Function(f, fargs, s, b)
    ; with(
        (n, t*) := <normalize-signature> (f, fargs)
      ; x_class_no_anno := <strip-annos> x_class
      ; rules( EntityFunctionDecl : (x_class_no_anno, n, t*) -> def )
      )

  // store current function definition with renamed body
  store-global-function =
    ?def@Function(f, fargs, s, b){anno*}
    ; with(
        (n, t*) := <normalize-signature> (f, fargs)
      ; rules( FunctionDecl : (n, t*) -> def)
      )

rules

  /**
   *  Used for rename of many argument types, including templates, functions
   */
  rename-action :
    a@Arg(x, srt){anno*} -> Arg(y, srt2){anno*}
    with srt2 := <rename-type; try(rename-entityderive-arg)> srt
       ; y := <rename-bound-immutable(|srt2)> x
       ; rules(VarDecl : y -> a)
