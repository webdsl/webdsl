module org/webdsl/dsl/languages/action/list-creation-exp

rules

  rename-action :
    TypedListCreation(srt1, e1*){anno*} -> TypedListCreation(srt1, e2*){anno1*}
    with  anno1* := <put-closure-in-anno> anno*
        ; e2* := <rename-all> e1*
    
  rename-action :
    ListCreation(e1*){anno*} -> ListCreation(e2*){anno1*}
    with  anno1* := <put-closure-in-anno> anno*
        ; e2* := <rename-all> e1*

rules

  constraint-error-action :
    ListCreation([]) -> <add-error(|["Type cannot be determined for empty untyped list creation."])>

  constraint-error-action :
    ListCreation(e*) -> <fail>
    where thead := <Hd; type-of> e*
        ; <map(try(check-list-creation-exp(|thead)))> e*

  check-list-creation-exp(|thead) :
    e -> <add-error(|["Expected type: ",thead,", found type: ",t])>
    where t := <type-of> e
        ; <not(type-compatible)> (thead, t)

rules

  desugar-action = desugar-typed-list-cr-exp

  desugar-typed-list-cr-exp :
    TypedListCreation(srt1, e1*){anno*} -> <rename> ThisCall($fun, arg*)
    where not([] := e1*) // prevent loop, empty List<srt1>() is generated here
    with  $fun := <toplevel-rename> "typedlistCr"
        ; (arg*,farg*) := <get-args-fargs-from-closure-in-anno-filtered> (anno*,e1*)
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(desugar-list-creation-element)> e1*
        ; def := def|[
            function $fun (farg*) : srt2 {
              var l : srt2 := List<srt1>();
              stat*
              return l;
            }
          ]|
        ; <rename-this-var; emit-webdsl-code> def{anno*}

  desugar-list-creation-element =
    desugar-for-in-list-creation
 <+ \ e -> |[ l.add(e); ]| \

  desugar-for-in-list-creation :
    ExpVarArgFor(x, srt, e, fltr, e*) -> webdsl|[ for( x: srt in e fltr ){ stat* } ]|
    where stat* := <map(desugar-list-creation-element)> e*

  desugar-for-in-list-creation :
    ExpVarArgForAll(x, srt, fltr, e*) -> webdsl|[ for( x: srt fltr ){ stat* } ]|
    where stat* := <map(desugar-list-creation-element)> e*

  desugar-for-in-list-creation :
    ExpVarArgForCount(x, e1, e2, e*)  -> webdsl|[ for( x: Int from e1 to e2 ){ stat* } ]|
    where stat* := <map(desugar-list-creation-element)> e*

  desugar-action :
    ListCreation([e1|e1*]){anno*} -> result
    with  srt1 := <type-of> e1
        ; result := <desugar-typed-list-cr-exp> TypedListCreation(srt1,[e1|e1*]){anno*}

rules

  keep-position-anno = ?TypedListCreation(_,_) 
  keep-position-anno = ?ListCreation(_) 
  
