module org/webdsl/dsl/languages/action/function-utils

  /**
   *  generic function rules/strategies (work on all function constructor variants)
   */
  rules 
      
    is-function-cons = ?Function(_, _, _, _)
    is-function-cons = ?Predicate(_, _, _)
    is-function-cons = ?PredicateInEntity(_, _, _)
    is-function-cons = ?StaticEntityFunction(_, _, _, _)
    
    // includes argument names and return types
    get-function-sig-full : Function(f, args, sort, body) -> (f,args,sort)
    get-function-sig-full : Predicate(f, args, body) -> (f,args,SimpleSort("Bool"))
    get-function-sig-full : 
      NativeClassFunction(static,name,args1,ret1){anno*} -> (name,args2,ret2)  
      with Function(name, args2, ret2, None()){anno*} := <normalize-declare>
    get-function-sig-full : StaticEntityFunction(x,farg,ReturnType(returntype),body) -> (x,farg,returntype)
    get-function-sig-full = ?NativeClassFunctionFromStatic(_,<get-function-sig-full>)

    is-extend-function-cons = ?ExtendFunction(_) //wraps around the other function constructors

    extract-function-sig =
    (  \Function(x,farg,_,_) -> (x, <map(farg-to-type)> farg)\
    <+ \Predicate(x,farg,_) -> (x, <map(farg-to-type)> farg)\
    <+ \PredicateInEntity(x,farg,_) -> (x, <map(farg-to-type)> farg)\
    <+ \StaticEntityFunction(x,farg,_,_) -> (x, <map(farg-to-type)> farg)\
    ); strip-all-annos

    sig-to-lower: (name,args) -> (<lower-case> name, args)

rules

    get-varname-from-formarg : Arg(ident,srt) -> Var(ident)
