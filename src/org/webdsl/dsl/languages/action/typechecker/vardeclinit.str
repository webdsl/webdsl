module org/webdsl/dsl/languages/action/typechecker/vardeclinit

imports
  libstrategolib
  libwebdsl-front

rules

  constraint-error-action :
    GlobalVarDeclInit(x, srt, e) -> <check-global-var-name> x

  constraint-error-action :
    GlobalVarDeclInitInferred(x, e) -> <check-global-var-name> x

  check-global-var-name :
    x -> <add-error(|["Name '",x,"' is not allowed, ",error])>
    where error := <disallow-global-var-name> x{}

  disallow-global-var-name : "global" -> "'global.' refers to global persisted variables"
  disallow-global-var-name : "session" -> "'session.' refers to session entity variables"

rules

  constraint-error-action :
    GlobalVarDeclInit(x, srt, e) -> <add-error(|<vardeclinit-global-error-message> x)>
    where not(<is-entity-type> srt)
        ; not(<IsRequestScopedVarDecl> x)

  constraint-error-action :
    GlobalVarDeclInitInferred(x, e) -> <add-error(|<vardeclinit-global-error-message> x)>
    where not(<type-of;is-entity-type> e)
        ; not(<IsRequestScopedVarDecl> x)

  vardeclinit-global-error-message :
    x -> ["Global variable ", x, " has illegal type. Global variables can only be of a defined entity type, not a list, set or builtin type."]

rules

  constraint-error-action : VarDeclInitInferred(x, e)         -> <constraint-error-vardeclinitinferred(|x, e)>
  constraint-error-action : TemplateVarDeclInitInferred(x, e) -> <constraint-error-vardeclinitinferred(|x, e)>
  constraint-error-action : GlobalVarDeclInitInferred(x, e)   -> <constraint-error-vardeclinitinferred(|x, e)>

  constraint-error-vardeclinitinferred(|x, e) :
    _ -> <add-error(|"Expression has invalid type for variable declaration.")> e
    where <type-of> e
        ; (?ClassSort(_) <+ ?EntitySort(_)) // names like 'String' (ClassSort), 'Entity' (EntitySort) are not allowed as expression, but type-of will succeed, hence the extra check
