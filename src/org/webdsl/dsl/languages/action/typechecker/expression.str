module org/webdsl/dsl/languages/action/typechecker/expression

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/languages/data-model/declare
  org/webdsl/dsl/languages/ui/declare
  org/webdsl/dsl/languages/ui/template-ref-arguments
  org/webdsl/dsl/languages/action/typechecker/declare
  org/webdsl/dsl/modules/types/-
  org/webdsl/dsl/languages/hql/typechecker

signature
  constructors
    Op : String -> Annotation

rules // typechecking expressions

  constraint-error-action :
    Var(x) -> <add-error(|["Variable '", x, "' not defined"])>
    where not(type-of)

  eq-type-of-action :
    Var(x) -> <TypeOf> x

  constraint-error-action :
    Cast(e, s) -> <add-error(|["Cannot cast ", <pp-webdsl> e, " to type ", <pp-type> s])>
    where not(type-of)
        ; not(<?HqlQuery(_) <+ ?HqlQueryLimit(_,_)> e) //disabled cast check on queries to allow working around current lack of type analysis in queries
        ; <type-of> e // don't report cascaded error, e should have valid type

  eq-type-of-action:
    Cast(e, s) -> s
    where <type-compatible> (s, <type-of> e) //cast up
       <+ <type-compatible> (<type-of> e, s) //cast down

  eq-type-of-action :
    Assignment(y, e) -> SimpleSort("Void") //<type-of> y

  eq-type-of-action :
    PropertyAssignment(y, e) -> SimpleSort("Void") //<type-of> y

  eq-type-of-action = type-of-qualified

  type-of-qualified :
    Qualified(x,y) -> <type-of-property> (<type-of-qualified> x, y)
    where <?Qualified(_,_)> x

  type-of-qualified :
    Qualified(x,y) ->  <type-of-property> (<TypeOf;?SimpleSort(<id>)> x, y)
    where not(<?Qualified(_,_)> x)

  constraint-error-action :
    FieldAccess(e, f) -> <add-error(|["No property ", f, " defined for ",<type-of<+!"type unknown"> e])> f
    where not(type-of)
        ; <type-of> e // don't report cascaded error, e should have valid type

  eq-type-of-action :
    FieldAccess(e, f) -> <type-of-property> (x_class, f)
    where SimpleSort(x_class) := <type-of> e

  eq-type-of-action :
    InColl(e1, e2) -> SimpleSort("Bool")
    where t := <type-of> e1
        ; GenericSort(_, [lt]) := <type-of> e2
        ; <type-compatible> (lt, t)

  constraint-error-action :
    InColl(e1, e2) -> <add-error(|["Expression ", <pp-webdsl> e1, " has wrong type"])>
    where not(type-of)
        ; <type-of> e1 ; <type-of> e2 // don't report cascaded errors, e1 and e2 should have valid types

rules // binary operators

  eq-type-of-action = type-of-binop

  type-of-binop :
    c#([e1,e2]) -> <check-binop> (c,<strip-annos> t1, <strip-annos> t2)
    where <elem> (c, ["Add", "Sub", "Mul", "Div", "Mod", "Eq", "NotEq", "SmallerThan", "SmallerThanOrEqual", "LargerThan", "LargerThanOrEqual", "And", "Or"])
    where t1 := <type-of <+ verbose-2(!"warning: cannot determine type of argument (type-of rule fails): ");fail> e1
        ; t2 := <type-of <+ verbose-2(!"warning: cannot determine type of argument (type-of rule fails): ");fail> e2

  check-binop : ("Add",t1,t2) -> t3
    where <is-equal-numeric-type> (t1, t2); t3 := t1
       <+ <is-string-type> t1; t3 := SimpleSort("String") //all types can be converted to strings in a concatenation implicitly
       <+ <is-string-type> t2; t3 := SimpleSort("String")

  check-binop : ("Sub",t1,t2) -> t3 where t3 := <is-equal-numeric-type> (t1,t2)
  check-binop : ("Mul",t1,t2) -> t3 where t3 := <is-equal-numeric-type> (t1,t2)
  check-binop : ("Div",t1,t2) -> t3 where t3 := <is-equal-numeric-type> (t1,t2)
  check-binop : ("Mod",t1,t2) -> t3 where t3 := <is-equal-numeric-type> (t1,t2)

  check-binop : ("SmallerThan", t1, t2) -> SimpleSort("Bool") where <is-equal-numeric-type> (t1,t2)
  check-binop : ("SmallerThanOrEqual", t1, t2) -> SimpleSort("Bool") where <is-equal-numeric-type> (t1,t2)
  check-binop : ("LargerThan", t1, t2) -> SimpleSort("Bool") where <is-equal-numeric-type> (t1,t2)
  check-binop : ("LargerThanOrEqual", t1, t2) -> SimpleSort("Bool") where <is-equal-numeric-type> (t1,t2)

  check-binop : ("And", SimpleSort("Bool"), SimpleSort("Bool")) -> SimpleSort("Bool")
  check-binop : ("Or", SimpleSort("Bool"), SimpleSort("Bool")) -> SimpleSort("Bool")

  check-binop : ("Eq",    t1, t2) -> SimpleSort("Bool") where <can-compare-equals> (t1,t2)
  check-binop : ("NotEq", t1, t2) -> SimpleSort("Bool") where <can-compare-equals> (t1,t2)

  is-equal-numeric-type =
    ?(t,t)
  ; <is-numeric-type> t
  <+ ( ?(SimpleSort("Int"),SimpleSort("Long")) <+ ?(SimpleSort("Long"),SimpleSort("Int")) ); !SimpleSort("Long") // implicit widening conversion from Int to Long
  <+ ( ?(SimpleSort("Double"),SimpleSort("Float")) <+ ?(SimpleSort("Float"),SimpleSort("Double")) ); !SimpleSort("Double") // implicit widening conversion from Float to Double

  can-compare-equals =
    ?(t1,t2)
  ; ( <?t1> t2
      <+ <type-compatible> (t1,t2)
      <+ <type-compatible> (t2,t1) )

rules

  constraint-error-action :
    x@c#([e1, e2]) -> <add-error(|["Wrong operand types for operator ", c, ": ", <pp-webdsl> e1, " has type ",<type-of;pp-type<+!"type unknown"> e1, ",", <pp-webdsl> e2, " has type ",<type-of;pp-type<+!"type unknown"> e2])>
    where <elem> (c, ["Add", "Sub", "Mul", "Div", "Mod", "Eq", "NotEq", "SmallerThan", "SmallerThanOrEqual", "LargerThan", "LargerThanOrEqual", "And", "Or"])
        ; not(<type-of> x)
        ; <type-of> e1 ; <type-of> e2 // don't report cascaded errors, e1 and e2 should have valid types

  constraint-error-action :
    Not(e) -> <constraint-helper-is-bool-exp> e

  eq-type-of-action :
    Not(e) -> SimpleSort("Bool")
    where SimpleSort("Bool") := <type-of> e

  eq-type-of-action :
    IsA(e, s) -> SimpleSort("Bool")
    where <is-webdsl-type <+ IsNativeClass> s
        ; <type-of> e

  constraint-error-action :
    HqlQuery(q) -> <add-error(|["Type error in query ", <pp-webdsl> q])>
    where not(type-of)

  eq-type-of-action :
    HqlQuery(q) -> <type-of-query> q

  eq-type-of-action :
    HqlQueryLimit(q, l) -> <type-of-query> q

  eq-type-of-action :
    HqlQueryLimitOffset(q, o, l) -> <type-of-query> q

rules//backend annotation

  add-backend-annotation :
    f@FieldAccess(object, prop) {anno*} -> f{IsGeneratedProperty(),anno*}
     where not(<fetch(IsGeneratedProperty)> anno*)
     where SimpleSort(entity) := <type-of> object
         ; property :=	<get-property> (entity, prop)
         ; <has-anno(|IsGeneratedProperty())> property
