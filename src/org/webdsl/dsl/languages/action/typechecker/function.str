module org/webdsl/dsl/languages/action/typechecker/function

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front

rules // generalize constraints for all function types

  constraint-error-action =
      ?Function(f, args, _, body)
    ; constraint-error-function(|f,args,body)
    
rules
  // checks for returns within a Function
  constraint-error-action =
    ?Function(f, _, SimpleSort("Void"), body) 
    ; where (
        not([] := <collect(?Return(_))> body)
        ; add-error(|["function ", <pp-webdsl> f, " has no return type but tries to return a variable"])
      )

  // checks the return type of functions
  constraint-error-action :
    Function(f, args, sort, body1) -> <add-error(|["The return statement in function ", f, " should have type ", <pp-type> sort])>
    where returns := <collect(?Return(_))> body1
        ; wrongreturns := <filter(\ Return(e) -> Return(e) where not(<type-compatible> (sort,<type-of> e)) \)> returns
        ; not([] := wrongreturns)
  
  // checks for at least one return inside a normal function
  constraint-error-action :
    Function(f, args, rt, body) -> <add-error(|["Return statement missing in function ", <pp-webdsl> f])>
    where not(SimpleSort("Void") := rt)
        ; [] := <collect(?Return(_))> body

rules //reserved functions

  register-reserved-function :
    (name,argcount) -> (name,argcount)
    where rules ( IsReservedFunction : (name,argcount) )

  // disallow this function name for any argument count
  register-reserved-function-name :
    name -> name
    where rules ( IsReservedFunctionName : name )

  constraint-error-function(|f,args,body) =
      where(not(defined-in-built-in-app-file))  // skip check for functions defined in built-in.app
    ; where(argcount := <length> args)
    ; where(<IsReservedFunction> (f, argcount) <+ <IsReservedFunctionName> f)
    ; error-message-generated-function(|f,argcount)

  error-message-generated-function(|f,argcount) =
    add-error(|["Function with name '", f, "' and ", argcount," argument(s) collides with a generated function that you are not allowed to overwrite"])

rules // forbidden elements

  constraint-error-function(|f,args,body) =
    <alltd(check-forbidden-in-function)> body
    ; fail
  
  check-forbidden-in-function =
    ?GoTo(_); add-error(|["Goto can only be used inside an action."])

rules // global functions

  is-reserved-function =
      extract-function-sig => (name, args)
    ; <IsReservedFunction> (name, <length> args)
    
  constraint-error-global =
      all-keys-FunctionSig
    ; map(bagof-FunctionSig); concat
    ; remove-all(is-reserved-function)
    ; constraint-double-decls(
          extract-function-sig; sig-to-lower
        ,{prettysig:  
            Snd; extract-function-sig; pp-func-sig => prettysig
          ; <concat-strings> ["Global function with signature ",prettysig," is defined multiple times."]
         }
      )
    ; fail

/*
  constraint-error-global =
      funcs := <all-keys-FunctionSig; map(FunctionSig)>
    ; ents := <all-keys-EntDecl; map(EntDecl)>
    ; funcname* := <all-keys-FunctionSig; map(Fst)>
    ; entname* := <all-keys-EntDecl>
    ; allnames := <concat; map(lower-case)> [<uniq> funcname*, <uniq> entname*]
    ; !funcs
    ; constraint-double-decls(
             extract-function-sig; Fst; lower-case
        , {  Snd; extract-function-sig; Fst => name
          ; <concat-strings> ["Global function '",name,"' has the same name as an entity."]
         }
        | allnames
      )
    ; fail
*/

rules // extend function which extends nothing
  
  constraint-error-global =
      bagof-ExtendGlobalFunctions
    ; filter(constraint-extend-global-function)
      // cleanup dr
    ; rules(ExtendGlobalFunctions :- _)
    ; fail
  
  constraint-extend-global-function: ef@ExtendFunction(f) -> <add-error(|["Extend function with signature ",prettysig," extends a non-existing function."])>
    with  esig := <extract-function-sig; strip-annos> f
        ; globalsigs := <all-keys-FunctionSig; strip-annos> // remove {DR_DUMMY}
        ; prettysig := <pp-func-sig> esig
    where not(<fetch-elem(?esig)> globalsigs)

rules
  
  //constraint-error-arg-list always fails, so no accidental rewrite
  constraint-error-action = ?Define(_,_,<constraint-error-arg-list>,_,_) 
  constraint-error-action = ?Function(_,<constraint-error-arg-list>,_,_)
  constraint-error-action = ?Predicate(_,<constraint-error-arg-list>,_)
  constraint-error-action = ?Action(_,_,<constraint-error-arg-list>,_)
  
  constraint-error-arg-list :
    list@[x|xs] -> <fail>
    where <map(?Arg(_,_))> list
    with  namesstripped := <map(?Arg(<strip-annos>,_))> list
        ; doubles := <find-doubles> namesstripped
        ; <map(try(constraint-error-arg-list(|doubles)))> list

  constraint-error-arg-list(|doubles):
    Arg(name,srt) -> <add-error(|["Duplicate name '",name1,"' in argument list."])>
    where name1 := <strip-annos> name
        ; <fetch(?name1)> doubles
        
rules

  get-toplevel-name = ?Function(<id>, _, _, _)
  
rules // mark functions in built-in.app as precompiled
  
  add-backend-annotation :
    f@Function(name,_,_,_){anno*} -> f{Precompiled(),anno*}
    where not(<fetch(Precompiled)> anno*)
    where <fetch(?PositionAnno(<string-starts-with(|"../.servletapp/src-webdsl-template/built-in.app")>))> anno*

  keep-position-anno = ?Function(_,_,_,_)
