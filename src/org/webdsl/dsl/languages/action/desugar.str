module org/webdsl/dsl/languages/action/desugar

rules

  desugar-action :
    ef@ExtendFunction(Function(fun, fargs, _, Block(stats))) -> RemoveMe()
    where <IsGlobalFunctionSignature> (fun,<map(?Arg(_,<id>))> fargs)
    with rules (
           ExtendFunction :+
             f@Function(fun, fargs2, SimpleSort("Void"), Block(stats2)){anno*} -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats)){anno*}
             where <eq> (<map(?Arg(_,<strip-annos>))> fargs, <map(?Arg(_,<strip-annos>))> fargs2)
             with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
         )

  desugar-action = once-ExtendFunction

  desugar-action :
    VarDeclInitInferred(x, e) -> VarDeclInit(x, t, e)
    with t := <desugar-vardeclinitinferred-helper> e
  desugar-action :
    TemplateVarDeclInitInferred(x, e) -> TemplateVarDeclInit(x, t, e)
    with t := <desugar-vardeclinitinferred-helper> e
  desugar-action : 
    GlobalVarDeclInitInferred(x, e) -> GlobalVarDeclInit(x, t, e) 
    with t := <desugar-vardeclinitinferred-helper> e
  desugar-vardeclinitinferred-helper : 
    e -> t
    with t := <type-of; strip-immutable-anno> e //strip ImmutableReference() annotation, because x will be assignable even if e wasn't

  // We perform query analysis on entity functions
  desugar-query-analysis :
    f@Function(x, farg*, srt, b1){anno*} -> def{newanno*}
    where <fetch-elem(?FunctionEntity(x_class))> anno*
        ; <not(fetch-elem(?StaticFunctionAnno()))> anno*
        ; <action-body-ready> b1
        ; thisargs := <get-this-args(|x_class)> b1
        ; args := <conc> (farg*, thisargs)
        ; {| ThisEntity
           : rules( ThisEntity := x_class )
           ; (b2, newanno*) := <perform-query-analysis(|("EntityFunction", x_class, x, <formal-arguments-to-types> farg*), args, True(), None(), None())> (b1, anno*)
          |}
        ; def := Function(x, farg*, srt, b2){newanno*}
        ; <store-entity-function(|x_class)> def

  // Analyzing a derived property as if it is an entity function without arguments, with a single return statement as body
  desugar-query-analysis :
    prop1 -> prop2
    where <is-derived-prop-cons> prop1
		    ; x := <get-property-name> prop1
		    ; e := <get-derived-prop-exp> prop1
		    ; anno* := <get-annotations> e
		    ; <action-body-ready> e
		    ; thisvars := <collect(?Var("this"); {\t->t{}\}); make-set> e
		    ; thisargs@[Arg(_, SimpleSort(x_class))|_] := <map({x,t:\v@Var(x) -> Arg(x, t) where t := <type-of>v \})> thisvars
		    ; {| ThisEntity
		       : rules( ThisEntity := x_class )
		       ; (_, newanno*) := <perform-query-analysis(|("DerivedProperty", x_class, x), thisargs, True(), None(), None())> (Return(e), anno*)
		       |}
        ; e2 := e{newanno*}
		    ; prop2 := <set-derived-prop-exp(|e2)> prop1
		    ; rules( DerivedPropertyExp : (x_class, x) -> e2 )

  add-query-optimization :
    f@Function(x, farg1*, srt, b1){anno*} -> Function(x, farg1*, srt, b2){IsOptimized(),tokeep*}
    where <fetch-elem(?FunctionEntity(x_class))> anno*
    ; <not(fetch-elem(?StaticFunctionAnno()))> anno*
    ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (try(where(NotOptimizedWarnings); <debug(!"NotOptimized:")> ("EntityFunction", x_class, x, <formal-arguments-to-types> farg1*, <is-not-analyzed; Snd> f)); get-empty-query-analysis)> anno*
    ; tokeep* := <remove-all(is-query-analysis)> anno*
    ; bindableargs := <filter(query-optimization-bindable-argument)> farg1*
    ; (qa2, farg2*) := <try(add-query-optimization-handle-this-keyword(|x_class))> (qa, farg1*)
    ; b2 := <foldr(!b1,add-query-optimization-to-argument(|qa2,bindableargs))> farg2*

  add-query-optimization-handle-this-keyword(|x_class) :
  	(qa, farg*) -> (qa2, [Arg(x, SimpleSort(x_class))|farg*])
  	where [thisvar@Var(x)|otherthisvars] := <collect(?Var("this")); make-set> qa
  	; qa2 := <foldr(!qa, add-query-optimization-handle-this-keyword-helper(|thisvar))> otherthisvars // Ensure that there is only one this var, because there can be different annotations for the this keyword

  add-query-optimization-handle-this-keyword-helper(|thisvar) :
    (v, qa) -> qa2
    with qa2 := <alltd(?v; !thisvar)> qa

  // We perform query analysis on global functions
  desugar-query-analysis :
    f@Function(x, farg*, srt, b1){anno*} -> def{newanno*}
    where <not(fetch-elem(?FunctionEntity(_)))> anno*
        ; <not(fetch-elem(?StaticFunctionAnno()))> anno*
        ; <action-body-ready> b1
        ; (b2, newanno*) := <perform-query-analysis(|("GlobalFunction", x, <formal-arguments-to-types> farg*), farg*, True(), None(), None())> (b1, anno*)
        ; def := Function(x, farg*, srt, b2){newanno*}
        ; <store-global-function> def{newanno*}

  add-query-optimization :
    f@Function(x, farg1*, srt, b1){anno*} -> Function(x, farg1*, srt, b2){IsOptimized(),tokeep*}
    where <not(fetch-elem(?FunctionEntity(_)))> anno*
    ; <not(fetch-elem(?StaticFunctionAnno()))> anno*
    ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (try(where(NotOptimizedWarnings); <debug(!"NotOptimized:")> ("GlobalFunction", x, <formal-arguments-to-types> farg1*, <is-not-analyzed; Snd> f); <debug(!"nod:")>f); get-empty-query-analysis)> anno*
    ; tokeep* := <remove-all(is-query-analysis)> anno*
    ; bindableargs := <filter(query-optimization-bindable-argument)> farg1*
    ; b2 := <foldr(!b1,add-query-optimization-to-argument(|qa,bindableargs))> farg1*
