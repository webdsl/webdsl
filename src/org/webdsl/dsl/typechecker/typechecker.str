/**

  Type rules for WebDSL

*/

module org/webdsl/dsl/typechecker/typechecker

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/typechecker/-

strategies

  typecheck =
    in-typechecking-phase(
        typecheck-init
      ; typecheck-declare
      ; typechecker-after-declare
      ; rename-top
      ; if(not(WebDSLCompileBuiltIns)) then mark-unused-templates end
      ; if-typechecking(
          where(
              log-time(constraint-error-all | "constraint-error" )
            // do not apply on Application, it would show the entire AST with the error at command line
            ; log-time(not(<constraint-error-global> "") | "constraint-error-global"))
        , 
          id)
      ; if(not(WebDSLCompileBuiltIns)) then drop-unused-templates end
      ; if is-custom-compile-units-enabled then prune-unchanged-folders-contents end
      ; if is-compile-units-cache-enabled then try-get-changed-compile-units-and-prune end
    )
    
  // Moving back to early constructor normalization because reproducing the exact same syntax fragment
  // in error messages is not an issue in the plugin (errors are marked in the editor, Spoofax tracks origins).
  // Reducing number of constructors as early as possible reduces the amount of stratego code considerably.
  // To complete this change, error reporting in console should work using locations as well, 
  // instead of printing AST fragments.
  normalize-constructors =
    topdown(try(repeat(normalize-constructor)))
    //repeat normalize-constructor on transformed terms as there might be more normalizations applicable on the same term,
    //e.g. IncompleteInverseAnno transformation would be skipped after normalize-constructor on Property with AnyProp() (':' notation).

  normalize-constructor : DefinePage(a,b,c,d,e){anno*} -> Define([Page()|a],b,c,d,e){anno*}
  normalize-constructor : DefineTemplate(a,b,c,d,e){anno*} -> Define([Template()|a],b,c,d,e){anno*}
  
  normalize-constructor : Property(x, AnyProp(), srt, annos){anno*} -> Property(x, <get-propkind-from-type> srt, srt, annos){anno*}
  //repeat normalize-constructor on transformed Property. Otherwise, normalize-constructor on Property for IncompleteInverseAnno transformation would be skipped (normalize-constructor is invoked in topdown-try style)
  
  normalize-constructor : DerivedProperty(x, AnyProp(), srt, annos, e){anno*} -> DerivedProperty(x, <get-propkind-from-type> srt, srt, annos, e){anno*}
  
  normalize-constructor : CachedFunction(f){anno*} -> <add-anno(|SimpleAnno("cache"))>f{anno*}

  get-propkind-from-type =
    if is-simple-sort
    then !Simple()
    else !Ref() end
  
  //call resolving/overloading is done during rename, typechecking errors are produced by constraint-error strategy
  //when no longer in typechecking, but e.g. during desugaring a failed resolve should give an error
  in-typechecking-phase(s) =
    {| InTypeCheckingPhase:
        rules(InTypeCheckingPhase := True())
      ; s
    |}
    
  // This must be called *before* any declares as it sets up the built-in types
  typecheck-init = 
    {| CurrentModule:
        rules(CurrentModule := "___BUILTIN___")
      ; not(built-in-template-rule-setup
         ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure built-in-template-setup rules end with ';fail'")
       ) // setup dyn rules for checks
    |}
  
  typecheck-declare =
    log-time(declare-all | "declare-all") //declares globally visible webdsl elements
    
  typechecker-after-declare =
      log-time(declare-all-override | "declare-all-override")
    ; log-time(
        not(
            after-tc-declare-hook
          ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure after-tc-declare-hook rules end with ';fail'")
        ) // setup dyn rules for checks
        | "after-tc-declare-hook")

  constraint-error-all =
    bottomup(try(constraint-error; where(stage-newline-once); debug(!"INTERNAL ERROR: constraint-error succeeded for: ")))
  
  catch-errors-editor(s) = 
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))

        InEditorAnalysis := True()  // make it easy to detect editor analysis, catch-errors-editor is only called in editor project
      )
      ; s
      ; !(<bagof-AllErrors <+ ![]>, <bagof-AllWarnings <+ ![]>)
    |}
  
rules

  //fallback implementation, get-toplevel-name is defined for important toplevel constructs such as Define(_,_,_,_)
  get-toplevel-name = get-anno(?TopLevelName(<id>))

rules // with-toplevel-name
  
  //prefer toplevel name based on file name
  create-toplevel-name = 
     create-toplevel-name-loc 
  <+ create-toplevel-name-no-loc 
  
  create-toplevel-name-loc = 
      modname := <get-anno(?At(<id>, _, _); clean-module-name)>
    ; <concat-strings; newname-webdsl> [modname, "_topdef"]
  
  // in desugaring, new elements do not have position information
  create-toplevel-name-no-loc = <concat-strings; newname> ["topdef"]
    
  clean-module-name = string-as-chars(filter(is-alpha))
    
  // Find toplevel name for element and do s
  with-toplevel-name(s) =
    (		where(name := <get-toplevel-name>)
    <+	where(name := <create-toplevel-name>)
      ; add-anno(|TopLevelName(name))
    )
    ; with-toplevel-name(s|name)
    
  with-toplevel-name(s|name) = {| TopLevelDefineName:
      rules(TopLevelDefineName := name)
    ; s
  |}

rules	// map-toplevel
  
  // Alltd: apply s above top-level definitions, and s-toplevel on all toplevel definitions
  map-toplevel(s, s-toplevel) = alltd(
    {
       ?Section(name, defs){anno*}; defs2 := <map(s-toplevel)> defs; !Section(name, defs2){anno*}
    <+ ?AccessControlDefinition(name, defs){anno*}; defs2 := <map(s-toplevel)> defs; !AccessControlDefinition(name, defs2){anno*}
    <+ s
    }
  )
