module org/webdsl/dsl/to-java-servlet/hql-query

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet
  
rules // query translation

  expression-to-java-servlet :
    HqlQueryLimit(e1, limit) -> expr|[ e2.setMaxResults(e_max).list() ]|
    with {| AddQueryParmeter : e2 := <query-to-create-query <+ debug(!"Failed create query: "); fail> e1 |}
       ; e_max := <limit-exp-to-java-servlet> limit

  expression-to-java-servlet :
    HqlQueryLimitOffset(e1, offset, limit) -> expr|[ e2.setFirstResult(e_first).setMaxResults(e_max).list() ]|
    with {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}
       ; e_first := <limit-exp-to-java-servlet> offset
       ; e_max := <limit-exp-to-java-servlet> limit

  limit-exp-to-java-servlet =  try(?DslExp(<id>)); expression-to-java-servlet //get Exp from DslExp if ~exp was used
    
  expression-to-java-servlet :
    HqlQuery(e1) -> expr|[ e2.list() ]|
    // not an aggregate: result type is a collection
    where (GenericSort(_,_) := <get-type-anno>)
    with  {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}
    
  expression-to-java-servlet :
    HqlQuery(e1@QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(CountStar(),_)]))),_), _, _, _)) -> expr|[ ((Long) e2.uniqueResult()).intValue() ]|
    with  {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}
    
  expression-to-java-servlet :
    HqlQuery(e1@QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Count(_) ,_)]))),_), _, _, _)) -> expr|[ ((Long) e2.uniqueResult()).intValue() ]|
    with  {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}

  expression-to-java-servlet :    
    HqlQuery(e1@QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Max(Path(path)),_)]))), FromClause(ranges)), _, _, _)) -> e2
    where prop := <?[_,<id>] <+ ?[<id>]> path
    with  e2 := <hql-exp-maxmin> (e1, prop,ranges)
  expression-to-java-servlet :    
    HqlQuery(e1@QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Min(Path(path)),_)]))), FromClause(ranges)), _, _, _)) -> e2
    where prop := <?[_,<id>] <+ ?[<id>]> path
    with  e2 := <hql-exp-maxmin> (e1, prop,ranges)
  hql-exp-maxmin :    
    (e1, prop, ranges) -> expr|[ ((x_type) e2.uniqueResult()) ]|
    with  x_type := <get-type-anno; java-type-name> e1
        ; {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}

  //TODO add Long and Double types in WebDSL so nothing gets lost
  expression-to-java-servlet :    
    HqlQuery(e1@QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Sum(Path(path)),_)]))), FromClause(ranges)), _, _, _)) -> expr|[ ((x_type) e2.uniqueResult()).x_convert() ]|
    where prop := <?[_,<id>] <+ ?[<id>]> path
    with  t1 := <get-type-anno> e1
        ; if not(<?SimpleSort("Int") <+ ?SimpleSort("Float")> t1) then <debug> "sum() can only be applied to types Int and Float";fail end
        ; (x_type, x_convert) := <if <?SimpleSort("Int")> t1 then !("Long","intValue") else !("Double","floatValue") end>
        ; {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}
        
  expression-to-java-servlet :
    HqlQuery(e1@QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Avg(_) ,_)]))),_), _, _, _)) -> expr|[ ((Double) e2.uniqueResult()).floatValue() ]|
    with  {| AddQueryParmeter : e2 := <query-to-create-query> e1 |}

rules

  query-to-create-query :
    e -> <repeat(once-AddQueryParameter)> e_hql
    where q := <alltd(replace-parameter-java-servlet); pp-hql-to-string; trim-chars('\n')> e
    ; e_hql := <try(add-cacheable-to-query(|e))> java|[ ~e:(e_HibSession()).createQuery("~q") ]|

  add-cacheable-to-query(|query) :
    e -> java|[ e.setCacheable(true) ]|
    where <has-anno(?CachedEntity())> query

  replace-parameter-java-servlet :
    DslExp(e1) -> IdParam(x2)
    where  t1 := <get-type-anno> e1
    	; not (GenericSort(_,_) := t1)
    	; not (< ?SimpleSort("Date") <+ ?SimpleSort("Time") <+ ?SimpleSort("DateTime")> t1) 
        ; x1  := <newname-webdsl> "param"
        ; x2 := <concat-strings>[":", x1]
        ; e2 := <expression-to-java-servlet> e1
        ; rules(
            AddQueryParameter :+ e -> java|[ e.setParameter("~x1", e2) ]|
          )

  replace-parameter-java-servlet :
    DslExp(e1) -> IdParam(x2)
    where t1 := <get-type-anno> e1
    	; not (GenericSort(_,_) := t1)
    	; < ?SimpleSort("Date") <+ ?SimpleSort("Time") <+ ?SimpleSort("DateTime")> t1
        ; x1  := <newname-webdsl> "param"
        ; x2 := <concat-strings>[":", x1]
        ; e2 := <expression-to-java-servlet> e1
        ; rules(
            AddQueryParameter :+ e -> java|[ e.setParameter("~x1", e2, org.hibernate.type.StandardBasicTypes.TIMESTAMP) ]|
          )

  replace-parameter-java-servlet :
    DslExp(e1) -> IdParam(x2)
    where GenericSort(_,_) := <get-type-anno> e1
        ; x1  := <newname-webdsl> "param"
        ; x2 := <concat-strings>[":", x1]
        ; e2 := <expression-to-java-servlet> e1
        ; rules(
            AddQueryParameter :+ e -> java|[ e.setParameterList("~x1", e2) ]|
          )
