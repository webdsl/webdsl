module org/webdsl/dsl/to-java-servlet/reflection

imports
  libstratego-lib
  libjava-front
  org/webdsl/dsl/to-java-servlet/-

imports
  libwebdsl-front

rules

  call-to-java-servlet :
    call@exp|[ getReflectionEntities() ]| -> java |[ utils.ThreadLocalServlet.get().getReflectionEntities() ]|

  call-to-java-servlet :
    call@exp|[ getReflectionEntityByName(e) ]| -> java |[ utils.ThreadLocalServlet.get().getReflectionEntityByName(e1) ]|
    with e1 := <expression-to-java-servlet> e

rules

  generate-code-java-servlet-once =
    disable-code-generation-if-cache-exists
  ; generate-entity-reflection-helper
  ; fail

  generate-entity-reflection-helper:
    _ -> <emit-java-code> compilation-unit|[
      package utils;

      import org.webdsl.lang.*;
      import java.util.*;

      public class EntityReflectionHelper {
        public static void init(){
          java.util.List<ReflectionEntity> reflectionentities = utils.DispatchServletHelper.reflectionentities;
          ReflectionEntity ent;
          ~bstm*:bstm_reflectioninit*
          org.webdsl.logging.Logger.info("number of entities: " + reflectionentities.size());
        }
      }
    ]|
    with  pkgname    := <TemplatePackage>
        ; pkgname2   := <DomainPackage>
        ; bstm_reflectioninit* := <all-entity-to-init-reflect>

  all-entity-to-init-reflect =
      bagof-AllEntities
    ; {| EntityDef:
        map({
            where(get-entity-def => (name,_))
          ; ?def
          ; rules(EntityDef : name -> def)
        })
      ; all-keys-EntityDef
      ; string-sort
      ; map(EntityDef; entity-to-init-reflect)
    |}
    ; concat

  entity-to-init-reflect : Entity(x,x_super,ebds){anno*} -> <entity-to-init-reflect-aux> (x,java:expr|["~x_super"]|,ebds,anno*)
  entity-to-init-reflect : EntityNoSuper(x,ebds){anno*} -> <entity-to-init-reflect-aux> (x,java:expr|[null]|,ebds,anno*)
  entity-to-init-reflect : SessionEntity(x,ebds){anno*} -> <entity-to-init-reflect-aux> (<capitalize-string> x,java:expr|[null]|,ebds,anno*)

  entity-to-init-reflect-aux :
    (x,e_super,ebds,anno*) -> bstm*|[
      ent = new ReflectionEntity("~x", e_super, e_viewpage);
      reflectionentities.add(ent);
      bstm*
      ReflectionEntity.add(ent);
    ]|
    with  t_entjtype := <java-type-entity> x
        ; props := <filter(is-property-cons)> ebds
        ; if <?java:expr|[null]|> e_super
          then all_props := <conc>(AllEntityPropertiesCopy(), props) //only add built-in entity properties to root entities
          else all_props := props end
        ; bstm* := <filter(property-to-init-reflect(|t_entjtype))> all_props
        ; if <fetch(?HasViewPage())> anno*
          then e_viewpage := java:expr|[ true ]|
          else e_viewpage := java:expr|[ false ]| end

  property-to-init-reflect(|t_entjtype) :
    p -> bstm|[
      ent.getProperties().add(new ReflectionProperty<t_entjtype, t_type>("~x", e_notnull, e_format){ ~*cbd_allowed*  });
    ]|
    with  x := <get-property-name> p
        ; annos := <get-property-annos> p
        ; t_type := <get-property-type; try-strip-generic-sort; java-type> p
        ; if <fetch(?NotNullAnno())> annos
          then e_notnull := java:expr|[ true ]|
          else e_notnull := java:expr|[ false ]| end
        ; if <fetch(?FormatAnno(String(x_format)))> annos
          then e_format := java:expr|[ "~x_format" ]| //java:expr|[ "~x_format" ]|
          else e_format := java:expr|[ null ]| end
        ; if <get-property-kind; (?Ref() <+ ?Comp())> p; not(<is-derived-prop-cons> p)
          then cbd_allowed* := [java:class-body-dec|[ public java.util.List<t_type> getAllowed(t_entjtype arg){ return arg.allowed#x#_(); } ]| ]
          else cbd_allowed* := [] end