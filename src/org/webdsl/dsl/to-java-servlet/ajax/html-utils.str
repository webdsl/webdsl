module org/webdsl/dsl/to-java-servlet/ajax/html-utils

imports
  libstrategolib
  libjava-front

rules // to-html-attrs is _only_ used for built-in template components defined in the generator, such as form, submit, and navigate
      // result of to-html-attrs is a Java statement (bstm metavariable)
      // reuses attribute rendering code of HTML elements in uicomponents/xml-content.str

  to-html-attrs = convert-property-assignment-list; xml-attrs-to-java

  to-html-attrs(|classattr) :
    attrs -> <xml-attrs-to-java> [Attribute("class", String(classattr)) | <convert-property-assignment-list> attrs]
    where <is-string> classattr

  to-html-attrs(|e_classattr) :
    attrs -> <xml-attrs-to-java> [Attribute("class", e_classattr) | <convert-property-assignment-list> attrs]
    where <not(is-string)> e_classattr // assuming it is a java expression in this case

  to-html-attrs-include-collection(|x_attrcolname) = convert-property-assignment-list; xml-attrs-to-java(|[x_attrcolname])

  convert-property-assignment-list =
  	remove-all(exclude-from-property-assignment)
  ; map(try(convert-property-assignment))
  
  // convert propertyassignment to attribute, so that xml-attrs-to-java can be re-used
  convert-property-assignment :
    PropertyAssignment(k, v) -> Attribute(k, v)

  exclude-from-property-assignment = TemplateCallPropertyAjax
  exclude-from-property-assignment = TemplateCallPropertyIgnoreValidation
  exclude-from-property-assignment = TemplateCallPropertyNoLoadingFeedback
  exclude-from-property-assignment = ?PropertyAssignment("templateContext",_)
