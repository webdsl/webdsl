module org/webdsl/dsl/to-java-servlet/ajax/ajax

imports
  libstrategolib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/hibernate-util
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/uicomponents/navigate
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/template-ref-arguments
  org/webdsl/dsl/to-java-servlet/optimization

rules

  warn-for-ajax-operation-without-ajax-enabled-submit =
    !bstm*|[
      if(!utils.ThreadLocalPage.get().isAjaxActionExecuted()){
        utils.Warning.warn("Ajax operation does not work in a regular submit, add [ajax] to the submit link.");
      }
    ]|

  // note: could be invoked during validation phase as well, for ajax validation replacements
  statement-to-java-servlet :
    AjaxStatement(stat) ->
    bstm* |[
      bstm*
      utils.ThreadLocalPage.get().actionHasAjaxPageUpdates = true;
    ]|
    with bstm* := <ajax-to-java-servlet> stat

  ajax-to-java-servlet :
    AjaxAppend(thediv, tc@TemplateCall(template, args,_,_)) ->
    <do-ajax-to-java-servlet>("append", thediv, tc)

  ajax-to-java-servlet :
    AjaxReplace(thediv, tc@TemplateCall(template, args,_,_)) ->
    <do-ajax-to-java-servlet>("replace", thediv, tc)

 //action java implementation
  do-ajax-to-java-servlet :
    (method, div, tc)
     -> bstm*|[
        ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
        java.io.StringWriter x_s = new java.io.StringWriter();
        java.io.PrintWriter x_out = new java.io.PrintWriter(x_s);
        utils.ThreadLocalOut.push(x_out);
        ~bstm*:bstm_thecall*
        utils.ThreadLocalOut.popChecked(x_out);
        //escapeJava is same as escapeJson except for escaping forward slash for Json. JSON spec allows, but does not require, escaping forward slashes. Therefore use Java escaping in order to keep URLs unescaped for easier processing by HTTP handler.
        utils.ThreadLocalOut.peek().print("{ \"action\": \""+"~method"+"\", \"id\": \""+e_thediv+"\", \"value\" : \""+org.apache.commons.lang3.StringEscapeUtils.escapeJava(x_s.toString())+"\"},");
        
     ]|
    with x_out := <newname-webdsl> "out"
       ; x_s   := <newname-webdsl> "s"
       ; e_thediv := <placeholder-id-to-java-exp> div
       ; bstm_thecall* := <call-template-as-ajax-template-helper(|e_thediv)> tc

  call-template-as-ajax-template-helper(|e_phname) :
    TemplateCall(template,args,passign*,TemplateBody(bodyelems)){anno*} ->
    bstm*|[
        Object[] x_args = ~<optimize-empty-array> e_argswithref*;
        try {
          ((utils.PageServlet)utils.DispatchServletHelper.pages.get("~template").getPageClass().newInstance()).serveAsAjaxResponse(x_args, e_templatearg, e_phname);
        }
        catch(Exception iae)
        {
          org.webdsl.logging.Logger.error("Problem in template servlet template lookup for Ajax: "+iae.getMessage()+" template :" + "~template");
        }
    ]|
    with x_args := <newname-webdsl> "args"
       // translate (ref) args
       ; calledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
       ; e_argswithref* := <handle-ref-arg> (calledTemplateArgs, args)
       //
       ; e_templatearg := expr |[ utils.TemplateCall.None ]|

  ajax-to-java-servlet :
    AjaxVisibility(thediv, vis) -> bstm*|[
       ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
       utils.ThreadLocalOut.peek().print("{ \"action\": \"visibility\", \"id\": \""+e_thediv+"\", \"value\": \""+"~visibility"+"\"},");
    ]|
    with visibility := <translate-visibility> vis
       ; e_thediv := <placeholder-id-to-java-exp> thediv

  placeholder-id-to-java-exp:
    x_div -> e_thediv
    with if <is-string> x_div
         then e_thediv := java:expr|[ get#x_div() ]| //placeholder Id {} // only occurs at placeholder declaration // see to-java-servlet/java-template-vars.str
         else e_unfiltereddiv := <expression-to-java-servlet> x_div // placeholder Exp {} , exp might contain illegal chars for div id attribute
            ; e_thediv := expr |[ utils.URLFilter.filter(e_unfiltereddiv) ]|
         end

  translate-visibility :
   Show() -> "show"
  translate-visibility :
   Hide() -> "hide"
  translate-visibility :
   Toggle() -> "toggle"

  ajax-to-java-servlet :
    AjaxRelocate(call@PageCall(_,_)) -> bstm*|[
      ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
      utils.ThreadLocalOut.peek().print("{ \"action\": \"relocate\", \"value\": \""+e_url+"\" },\n");
    ]|
    with  e_url := <page-thiscall-to-url-string-java-servlet> call

  ajax-to-java-servlet :
    AjaxRestyle(thediv, expr) -> bstm*|[
      ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
      utils.ThreadLocalOut.peek().print("{ \"action\": \"restyle\", \"id\": \""+e_thediv+"\", \"value\": \""+e+"\"},");
    ]|
    with e := <expression-to-java-servlet> expr
       ; e_thediv := <placeholder-id-to-java-exp> thediv

  ajax-to-java-servlet :
    AjaxRefresh() -> bstm* |[
      ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
      utils.ThreadLocalOut.peek().print("{ \"action\": \"refresh\" },");
    ]|

  ajax-to-java-servlet :
    AjaxClear(thediv) -> bstm*|[
      ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
      utils.ThreadLocalOut.peek().print("{ \"action\": \"clear\", \"id\": \""+e_thediv+"\"},");
    ]|
    with e_thediv := <placeholder-id-to-java-exp> thediv

  ajax-to-java-servlet :
    AjaxRunScript(e) -> bstm*|[
      ~*<warn-for-ajax-operation-without-ajax-enabled-submit>
      utils.ThreadLocalOut.peek().print("{ \"action\": \"runscript\", \"value\": \""+ e_java.replace("\\", "\\\\").replace("\"","\\\"") +"\" },\n");
    ]|
    with  e_java := <expression-to-java-servlet> e
