module org/webdsl/dsl/to-java-servlet/dispatch-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  generate-code-java-servlet-once =
    bagof-AllInvokeEvery // TODO should be sorted to improve caching
  ; if ?[] then disable-if-not-first-build end // if list is empty (no changes or no invokes at all) and file has been generated before, then don't regenerate
  ; cached-generate(generate-java-servlet-dispatch-servlet | "internal_DispatchServlet")
  ; fail

  generate-java-servlet-dispatch-servlet:
    bagof_all_invokeevery ->
      <emit-java-code-local> compilation-unit|[
      package utils;

      import java.io.*;
      import javax.servlet.*;
      import javax.servlet.http.*;

      @SuppressWarnings({"serial","unused"})
      public class DispatchServlet extends HttpServlet {

          public static void tryLoadGlobalsAndPerformInit(){
            utils.AbstractPageServlet ps = new GlobalsPageServlet();
            utils.ThreadLocalPage.set(ps);
            ps.initRequestVars();
            org.hibernate.Session hibSession = ~e:(e_HibSession());
            try
            {
              hibSession.beginTransaction();
              utils.GlobalVariables.load();
              utils.GlobalInit.load();
              ~e:(e_HibSession()).getTransaction().commit();
            }
            catch(Exception se)
            {
              org.webdsl.logging.Logger.error("*** Exception occurred in application init. WebDSL application will not run correctly. ***", se);
              hibSession.getTransaction().rollback();
            }
          }

          private java.util.Timer timer;
          public void init() {
            CachedResourceFileNameHelper.init( getServletConfig().getServletContext() );
            tryLoadGlobalsAndPerformInit();
            
            webdsl.generated.search.IndexManager.tryDropIndex();

            timer = new java.util.Timer("Timer for scheduled and recurring tasks");
            bstm*
          }

          public void destroy() {
          	org.webdsl.servlet.ServletState.servletDestroyStarted();
            org.webdsl.logging.Logger.warn("Undeploying application");
            org.webdsl.logging.Logger.info("cleanup: canceling future scheduled task");
            timer.cancel();
            org.webdsl.logging.Logger.info("cleanup: done");
            
            if( org.webdsl.servlet.ServletState.inScheduledTask() ){
              String taskname = org.webdsl.servlet.ServletState.scheduledTaskName();
              int cnt = 0;
              long intervalInSeconds = 5;
              
              org.webdsl.logging.Logger.info("cleanup: Waiting for recurring task to finish: '" + taskname + "'");
              try {
                
                while( org.webdsl.servlet.ServletState.inScheduledTask() ){
                  Thread.sleep( intervalInSeconds * 1000 );
                  if( ++cnt % 10 == 0){
                    org.webdsl.logging.Logger.warn("cleanup: Waiting " + cnt*intervalInSeconds + " seconds for task: '" + taskname + "' to finish, application not destroyed yet");
                  }
                }
                org.webdsl.logging.Logger.info("cleanup: recurring task: '" + taskname + "' has ended");
		      } catch (InterruptedException ex) {
		        org.webdsl.logging.Logger.error(ex);
		      }
		    }
				    
            org.webdsl.logging.Logger.info("cleanup: closing faceting index readers");
            webdsl.generated.search.IndexManager.closeFacetIndexReaders();
            org.webdsl.logging.Logger.info("cleanup: closing Hibernate session factory");
            HibernateUtil.getSessionFactory().close();
            org.webdsl.logging.Logger.info("cleanup: done");
            super.destroy();
            org.webdsl.logging.Logger.info("cleanup: stopping JDBC AbandonedConnectionCleanupThread");
            try {
                com.mysql.jdbc.AbandonedConnectionCleanupThread.shutdown();
            } catch (InterruptedException ex) {
                org.webdsl.logging.Logger.error(ex);
            }
            utils.ThreadManager.tryFindAndKillBobobrowseDaemonThread();
            utils.CachedResourceFileNameHelper.cleanupOnServletDestroy();
            org.webdsl.logging.Logger.info("cleanup: done");
            org.webdsl.logging.Logger.warn("Application has been undeployed");
          }

          public void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
            throws java.io.IOException, javax.servlet.ServletException
          {
              utils.DispatchServletHelper d = new utils.DispatchServletHelper(this, true, getServletConfig().getServletContext().getContextPath());
              d.doServe(request, response);
          }

          public void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
            throws java.io.IOException, javax.servlet.ServletException
          {
              utils.DispatchServletHelper d = new utils.DispatchServletHelper(this, false, getServletConfig().getServletContext().getContextPath());
              d.doServe(request, response);
          }

          public void doPut(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)
            throws java.io.IOException, javax.servlet.ServletException
          {
              utils.DispatchServletHelper d = new utils.DispatchServletHelper(this, false, getServletConfig().getServletContext().getContextPath());
              d.doServe(request, response);
          }
      }
    ]|
    with  bstm*      := <map(invoke-every-to-init); concat> bagof_all_invokeevery
