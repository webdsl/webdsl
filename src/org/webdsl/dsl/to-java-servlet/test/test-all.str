module org/webdsl/dsl/to-java-servlet/test/test-all

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front

strategies

  generate-code-java-servlet-once = if-test(generate-test-all); fail

  generate-test-all: _ ->
     <emit-java-code; fail> compilation-unit|[
       package utils;

       import pkgname.*;
       import java.net.ServerSocket;
       import org.codehaus.cargo.container.*;
       import org.codehaus.cargo.container.deployable.*;
       import org.codehaus.cargo.container.tomcat.*;
       import org.codehaus.cargo.container.property.*;
       
       import java.util.concurrent.ExecutorService;
       import java.util.concurrent.Executors;
       import java.util.concurrent.Future;
       import java.util.concurrent.TimeUnit;
       import java.util.concurrent.TimeoutException;
       import java.util.concurrent.atomic.AtomicBoolean;

       public class TestAll
       {
          public TestAll () {

          }
          /*
          public static void clearDB(){
            org.hibernate.Session hibSession = null;
            try{
              hibSession = e_HibSession;
              hibSession.beginTransaction();

              bstm1*

              e_HibSession.flush();
              e_HibSession.getTransaction().commit();
            }
            catch( org.hibernate.exception.ConstraintViolationException ex ){
              org.webdsl.logging.Logger.error("ConstraintViolationException occurred while clearing database");
              e_HibSession.getTransaction().rollback();
            }
            catch(Exception ex)
            {
              org.webdsl.logging.Logger.error("exception occurred while clearing database: " + ex.getMessage(),ex);
              e_HibSession.getTransaction().rollback();
            }
          }
          */
          public static void reloadGlobalVarsInit(org.hibernate.Session hibSession){
              hibSession.beginTransaction();
              utils.GlobalVariables.forceLoad();
              utils.GlobalInit.forceLoad();
              hibSession.flush();
          }

          public void beforeQuit(){
              utils.Test.closeDrivers();
          }

          public boolean runTests(){
            boolean exitWithError = false;

            bstm*

            beforeQuit();
            
            return !exitWithError;
          }

          public static void main(String[] args) {
            boolean testPassed = new TestAll().runTests();
            if(testPassed){
              System.exit(0); //force exit for now as some background threads may hang in some cases (not investigated yet)
            } else {
              System.exit(1); 
            }
          }


          //web container test run for 'webdsl test-web' and 'webdsl run'

          public static final boolean isPost = false;
          public static int SERVLET_PORT = 8080;
          public static int SERVLET_PORT_SSL = 8443;
          public static int RMI_PORT = 0;
          public static int DEBUG_PORT = 8000;
          public static String contextpath;
          public static String warfilename;

          static
          {
            try
            {
              java.util.Properties properties = new java.util.Properties();
              properties.load( utils.DispatchServletHelper.class.getResourceAsStream("/build.properties") );
              warfilename = properties.getProperty("webdsl.warfilename");
              if(warfilename.equals("ROOT"))
              {
                contextpath = "";
              }
              else{
                contextpath = "/" + warfilename;
              }
              String servletPortArg = System.getProperty("servletport");
              if(servletPortArg != null){
                try{
                  SERVLET_PORT = Integer.parseInt(servletPortArg);
                } catch (NumberFormatException ex) {
                  throw new RuntimeException(ex);
                }
              }

            }
            catch(java.io.IOException ioe)
            {
              throw new RuntimeException(ioe);
            }
          }

          public void runInWebAppContainer(boolean findPorts, boolean enableDebugging, long timeout){


            String warfile = "./"+warfilename+".war";
            System.out.println(warfile);
            Deployable war = new WAR(warfile);

            org.codehaus.cargo.container.configuration.LocalConfiguration configuration = new Tomcat9xStandaloneLocalConfiguration("tomcat9x");

            if(findPorts){
              // find free ports
              try {
                ServerSocket ss1 = new ServerSocket(0);
                ServerSocket ss1_ssl = new ServerSocket(0);
                ServerSocket ss2 = new ServerSocket(0);
                ServerSocket ss3 = new ServerSocket(0);
                SERVLET_PORT = ss1.getLocalPort();
                SERVLET_PORT_SSL = ss1_ssl.getLocalPort();
                RMI_PORT = ss2.getLocalPort();
                DEBUG_PORT = ss3.getLocalPort();
                ss1.close();
                ss2.close();
                ss3.close();
              } catch (java.io.IOException ioex) {
                org.webdsl.logging.Logger.error("Cannot find free port for test context.",ioex);
                System.exit(1);
              }
              configuration.setProperty(GeneralPropertySet.RMI_PORT, RMI_PORT + "");
            }
            org.webdsl.logging.Logger.info("************Going to start tomcat on SERVLET_PORT: " + SERVLET_PORT);
            configuration.setProperty(ServletPropertySet.PORT, SERVLET_PORT + "");
            configuration.setProperty(TomcatPropertySet.AJP_PORT, SERVLET_PORT+1 + "");
//When https config is needed, the following properties need to be set. However, other (webdsl) configurations may need changes as well, as we saw action lookup failures with this config alone
/*
configuration.setProperty(ServletPropertySet.PORT,SERVLET_PORT_SSL+"");
configuration.setProperty(TomcatPropertySet.AJP_PORT,SERVLET_PORT_SSL+1+"");
configuration.setProperty("cargo.tomcat.https.port",SERVLET_PORT_SSL+"");
configuration.setProperty("cargo.tomcat.ssl.enabled","true");
configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_STORE_FILE, "../.keystore");
configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_STORE_PASSWORD,"g5o2jD93FQ83Ge52");
configuration.setProperty(TomcatPropertySet.CONNECTOR_KEY_STORE_TYPE, "JKS");
configuration.setProperty("cargo.tomcat.ssl.protocols","TLSv1.2,TLSv1.3");
*/
            
            
            if(enableDebugging)
            {
              //enable remote debugging
              configuration.setProperty("cargo.jvmargs", "-Djava.security.egd=file:/dev/./urandom -Dservletport=" + SERVLET_PORT + " -agentlib:jdwp=transport=dt_socket,address=" + DEBUG_PORT + ",server=y,suspend=n -Xmx2g");
            }
            else
            {
              configuration.setProperty("cargo.jvmargs", "-Djava.security.egd=file:/dev/./urandom -Dservletport=" + SERVLET_PORT);
            }
            configuration.addDeployable(war);
            InstalledLocalContainer container = new Tomcat9xInstalledLocalContainer(configuration);
            String tomcathome = "./tomcat/tomcat/";
            System.out.println(tomcathome);
            container.setHome(tomcathome);
            container.setTimeout( timeout );
            container.setLogger(new org.codehaus.cargo.util.log.SimpleLogger(){
              protected void doLog(org.codehaus.cargo.util.log.LogLevel level, String message, String category)
              {
                //System.out.println("[" + level.getLevel() + "][" + category + "] " + message);
                System.out.println(message);
              }
            });
            
            
            ExecutorService executor = Executors.newSingleThreadExecutor();
            AtomicBoolean testSuccess = new AtomicBoolean(false);
            
            Future<?> future = executor.submit(new Runnable() {
                @Override
                public void run() {
                    try {
                        utils.DispatchServletHelper d = new utils.DispatchServletHelper(null, isPost, contextpath);
                        utils.ThreadLocalServlet.set(d);
                        d.loadSessionManager(utils.HibernateUtil.getCurrentSession(), null);
                        container.start();
                        boolean testResult = runTests();
                        testSuccess.set(testResult); // Store result in AtomicBoolean
                    } catch (Exception ex) {
                        org.webdsl.logging.Logger.error("Exception occurred while running tests in container.", ex);
                    }
                }
            });
            
            int exitCode = 1; // Default to failure
            
            
            try {
              if (timeout > 0) {
                future.get(timeout, TimeUnit.MILLISECONDS); // Wait for completion or timeout
              } else {
                future.get(); // Wait indefinitely if timeout is 0
              }
                exitCode = testSuccess.get() ? 0 : 1;
            } catch (TimeoutException ex) {
                org.webdsl.logging.Logger.error("Test execution timed out after " + timeout + " ms. Stopping container.");
                future.cancel(true);
            } catch (Exception ex) {
                org.webdsl.logging.Logger.error("Unexpected exception occurred.", ex);
            }
            
            
            // Ensure proper cleanup before exiting
            container.stop();
            executor.shutdownNow();
            utils.Test.closeDrivers();
            utils.ThreadLocalServlet.set(null);
            System.exit(exitCode);

          }
       }
     ]|
     with pkgname := <TestPackage>
        ; pkgname2 := <TemplatePackage>
        ; names := <bagof-AllTestNames <+ ![]>
        ; bstm* := <map(gen-call-test-class);concat> names
        /*; bstm1* := <map({\
                           x -> bstm|[e_HibSession.createQuery("delete from "+"~x").executeUpdate(); ]|
                       \})>
                       ["ApplicationContextProperty"|["File"|<bagof-AllEntityNames>]]*/

  gen-call-test-class :
    name -> bstm*|[
      utils.Test x_test = new x_name();
      utils.ThreadLocalTest.set(x_test);
      exitWithError = !x_test.run() || exitWithError;
      utils.ThreadLocalTest.set(null);
    ]|
    with x_name := <get-webdsl-test-class-name> name
       ; x_test := <concat-strings> ["varTest", name]

