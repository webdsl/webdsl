module org/webdsl/dsl/to-java-servlet/java-code

imports
  libstrategolib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/for-filter

rules // statements

   statements-to-java-servlet =
     filter-warn(statement-to-java-servlet | "cannot translate statement"); flatten-list

   statement-to-java-servlet =
     block-to-java-servlet
     <+ assignment-to-java-servlet-all
     <+ vardecl-to-java-servlet
     <+ while-to-java-servlet
     <+ for-to-java-servlet
     <+ if-to-java-servlet
     //<+ email-to-java
     <+ void-call-statement-to-java-servlet
     <+ stat-to-java-servlet
     <+ return-to-java-servlet
     <+ goto-to-java-servlet
     <+ ajax-to-java-servlet
     <+ validate-to-java-servlet(data-validation-to-java-servlet-throw)
     <+ prefetch-for-to-java-servlet
     <+ info(|["cannot translate statement:", <id>]); fail

   // Code generation for prefetch is done at page/template/function arguments or for-loop
   prefetch-for-to-java-servlet :
     PrefetchFor(_, _, _, _) -> []

   block-to-java-servlet :
     //Block(stm*) ->
     webdsl|[ { stat* } ]| -> bstm|[ { bstm* } ]|
     with  bstm* := <statements-to-java-servlet> stat*

   stat-to-java-servlet :
     Stat(e1) -> java|[ e2; ]|
     with  e2 := <expression-to-java-servlet> e1

rules // assignment

  assignment-to-java-servlet-all =
     assignment-to-java-servlet-specific
  <+ assignment-to-java-servlet-ref
  <+ assignment-to-java-servlet

  assignment-to-java-servlet-ref :
    Stat(Assignment(v@Var(x), e1)) -> java|[ x.set(e2); ]|
    where <has-ref-type> v
    with  e2 := <expression-to-java-servlet> e1

  assignment-to-java-servlet :
    Stat(Assignment(Var(x), e1)) -> java|[ x = e2; ]|
    where <is-string> x
        ; not(<get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> x))
        ; e2 := <expression-to-java-servlet> e1

  remove-first-character-in-string = // _ is in front of property names at this point
    explode-string;?[_|<id>];implode-string

  assignment-to-java-servlet :
    Stat(Assignment(Var(x), e1)) -> java|[ x_set(e2); ]|
    where prop := <get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> x) //is inside an entity and is a property of that entity
        ; not(GenericSort(_,_) := <property-type> prop)
    with  e2 := <expression-to-java-servlet> e1
        ; x_set := <concat-strings>["set", <remove-first-character-in-string;capitalize-string> x]

  assignment-to-java-servlet : //special handling of setter of collections, makes sure events fire and proxy isn't replaced
    Stat(Assignment(Var(x), e1)) ->
    bstm |[ this.replaceAllIn#x2(e2); ]|
    where prop := <get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> x) //is inside an entity and is a property of that entity
        ; GenericSort(_,_) := <property-type> prop
    with  e2 := <expression-to-java-servlet> e1
        ; x2 := <remove-first-character-in-string> x

  assignment-to-java-servlet :
    Stat(Assignment(q@FieldAccess(qid, x), e1)){anno*} -> bstm |[ e2.set#x(e3); ]|
    where not(GenericSort(_,_) := <get-type-anno> q)
       <+ GenericSort(_,_) := <get-type-anno> q;<fetch(DirectCollectionReplace)> anno*
    with  e2 := <expression-to-java-servlet> qid
        ; e3 := <expression-to-java-servlet> e1

  assignment-to-java-servlet : //special handling of setter of collections, makes sure events fire and proxy isn't replaced
    Stat(Assignment(q@FieldAccess(qid, x), e1)){anno*} ->
    bstm |[ e2.replaceAllIn#x(e3); ]|
    where GenericSort(_,_) := <get-type-anno> q
        ; not(<fetch(DirectCollectionReplace)> anno*)
    with  e2 := <expression-to-java-servlet> qid
        ; e3 := <expression-to-java-servlet> e1

rules // if

   if-to-java-servlet :
     If(e1, bsit1, bsif1) -> java|[ if(e2) ~bsit2 else ~bsif2 ]|
     with  bsit2 := <statement-to-java-servlet> bsit1
         ; bsif2 := <statement-to-java-servlet> bsif1
         ; e2 := <expression-to-java-servlet> e1

rules // for

   while-to-java-servlet :
     WhileStmt(e1, bstm1) ->
     stm|[
       while(e2) {
         ~bstm2
       }
     ]|
     with e2    := <expression-to-java-servlet> e1
        ; bstm2 := <statement-to-java-servlet> bstm1

   for-to-java-servlet :
     ForCountStmt(x, e1, e2, Block(stat*)) ->
     bstm*|[
     {	
       int x = e3; //x has been renamed already
       int x_bound = e4;
       int x_delta = (x < x_bound? 1 : -1);
       while(x != x_bound) {
         bstm*
         x += x_delta;
       }
     }
     ]|
     with x_bound := <newname-webdsl> "stop"
        ; x_delta := <newname-webdsl> "delta"
        ; e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2
        ; bstm* := <statements-to-java-servlet> stat*

   for-to-java-servlet : // No where clause, with order by clause
     ForStmt(x, srt, e1, fltr, Block(stat*)) ->
     bstm*|[
        java.util.Collection<? extends reft> x_expr = e2; // e2 is executed before bstm_enable*, because e_expr may be a function call and the filter should not be applied to every fetch of type t in such a function, but only on the returned collection
        bstm_enable*
        java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e_expr);
        bstm_disable*
        bstm_early*
        bstm_for*
     ]|
     with  x_list := <newname-webdsl> "lst"
         ; x_expr := <newname-webdsl> "exp"
         ; t      := <java-type> srt
         ; reft := t
         ; e2 := <expression-to-java-servlet> e1
         ; prefetch := <get-prefetch-for(|x)> stat*
         ; (bstm_enable*, bstm_disable*) := <try-get-prefetch-where; try-get-query-condition-filter; (if-optimization-enabled,if-optimization-enabled)> prefetch
         ; e_joins := <get-direct-fetches> prefetch
         ; e_expr := <is-guided-batching-joins < !expr |[ utils.QueryOptimization.prefetchCollection(~e:(e_HibSession()), x_expr, e_joins) ]| + !expr|[x_expr]|>
         ; bstm_early* := <is-guided-batching < (get-early-batch-fetches(|e_HibSession(), x_list, srt) <+ ![]) + ![]> prefetch
         ; bstm_batch* := <get-batch-fetches(|e_HibSession(), x_list, srt) < try(is-at-arguments; ![]) + ![]> prefetch
         ; bstm_for* := <for-translation-common(|x_list, stat*, srt, t, x, fltr, bstm_batch*)>

  for-to-java-servlet :
    fa@ForAllStmt(x, srt, fltr, Block(stat*)) ->
    bstm* |[
      java.util.List<t> x_list = e_criteria.list();
      bstm_early*
      bstm_for*
    ]|
    with  x_list := <newname-webdsl> "list"
        ; t      := <java-type> srt
        ; prefetch := <get-prefetch-for(|x)> stat*
        ; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr, prefetch)
        ; bstm_early* := <is-guided-batching < (get-early-batch-fetches(|e_HibSession(), x_list, srt) <+ ![]) + ![]> prefetch
        ; bstm_batch* := <(is-guided-batching-no-joins < get-batch-fetches(|e_HibSession(), x_list, srt) + get-generic-batch-fetches(|e_HibSession(), x_list, srt)) <+ ![]> prefetch
        ; bstm_for* := <for-translation-common(|x_list, stat*, srt, t, x, fltr, bstm_batch*)>

  for-translation-common(|x_list, stat*, srt, t, x, fltr, bstm_batch*) :
    _ ->
    bstm* |[
      bstm_order*
      bstm_batch*
      ~*<wrap-in-for-loop(|x,t,expr|[ x_list ]|)> bstm*|[
        bstm*
      ]|
    ]|
    with  bstm*   := <statements-to-java-servlet> stat*
        ; bstm_order* := <for-filter-by-code(|x, srt, t, x_list)> fltr

rules // return

  return-to-java-servlet :
    Return(call@PageCall(p,arg*)) -> bstm*
    where InAction
    with  bstm* := <redirect-page-call-to-java-statements> call

  // If return statements are emitted during desugar, the call might not be substituted with a page call.
  return-to-java-servlet :
    Return(ThisCall(p,arg*)) -> <return-to-java-servlet> Return(PageCall(p,arg*))
    where InAction

  return-to-java-servlet :
    ReturnEmpty() -> bstm* |[
     // isRedirected = true;
    ]|
    where InAction

  return-to-java-servlet :
    ReturnEmpty() -> bstm* |[
      return;
    ]|
    where InFunction

  return-to-java-servlet :
    Return(e1) -> java|[ return e2; ]|
    where InFunction
    with  e2 := <expression-to-java-servlet> e1

  goto-to-java-servlet :
    GoTo(call@PageCall(p, args)) -> bstm*
    with  bstm* := <redirect-page-call-to-java-statements> call

  redirect-page-call-to-java-statements :
    call@PageCall(p,arg*) ->
    bstm* |[
      utils.ThreadLocalPage.get().setRedirectUrl( e_url );
    ]|
    with  InAction //should only occur inside actions
    with  e_url := <page-thiscall-to-url-string-java-servlet> call

rules

   qid-to-java-servlet :
     Qualified(qid, x) -> java|[ e.x_get() ]|
     with  x_get := <concat-strings>["get", <capitalize-string> x]
         ; e := <qid-to-java-servlet> qid

   qid-to-java-servlet :
     x -> java|[ x ]|
     where <is-string> x

   vardecl-to-java-servlet :
     VarDeclInit(x, s, e1) -> bstm|[ t x = e2; ]|
     where t := <java-type> s
         ; e2 := <expression-to-java-servlet> e1

   vardecl-to-java-servlet :
     VarDecl(x, s) -> bstm|[ t x = e; ]|
     where t := <java-type> s
         ; e := <java-type-default-value> s

rules // expressions

   expression-to-java-servlet :
     Cast(e1, s) -> res
     where not(<?GenericSort(_,_)> s)
     with  e2 := <expression-to-java-servlet> e1
         ; t := <java-type> s
         ; x := <java-type-name> s
         ; if( <not(builtin-java-type); defined-java-type> s )
           then res := expr |[ x._static_cast_(e2) ]|
           else res := expr |[ ((x) (org.webdsl.tools.Utils.cast(e2, t.class))) ]|
           end
           
   expression-to-java-servlet :
     Cast(e1, s) -> expr |[ ((x) e2) ]|
     where <?GenericSort(_,_)> s // no need for hibernate fix in case of collection
     with  e2 := <expression-to-java-servlet> e1
         ; x := <java-type-name> s

   expression-to-java-servlet :
     InColl(e1, e2) -> expr|[ ( !org.webdsl.tools.Utils.equal(e4,null) && e4.contains(e3)) ]|
     with  e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2

   expression-to-java-servlet :
     Add(x, y) -> expr|[ ~xt + ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Sub(x, y) -> expr|[ ~xt - ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Mul(x, y) -> expr|[ ~xt * ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Div(x, y) -> expr|[ ~xt / ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Mod(x, y) -> expr|[ ~xt % ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Eq(x, y) -> expr|[ org.webdsl.tools.Utils.equal(e_x,e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     NotEq(x, y) -> expr|[ !org.webdsl.tools.Utils.equal(e_x,e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     LargerThan(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x > e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     LargerThanOrEqual(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x >= e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     SmallerThan(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x < e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     SmallerThanOrEqual(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x <= e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Not(x) -> expr|[ !(~x2) ]|
     with  x2 := <expression-to-java-servlet> x

   expression-to-java-servlet :
     And(x, y) -> expr|[ ~xt && ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Or(x, y) -> expr|[ ~xt || ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

rules

  expression-to-java-servlet :
    IsA(x, s@SimpleSort(x_name)) -> expr |[ org.webdsl.tools.Utils.instanceOf(e, "~x_name") ]|
    where <not(is-native-class)> x
    with  e := <expression-to-java-servlet> x

  expression-to-java-servlet :
    IsA(x, s@SimpleSort(x_name)) -> expr |[ e instanceof x_class ]|
    where <is-native-class> x
    with  e := <expression-to-java-servlet> x
        ; x_class := <native-class-name-from-type; pp-qualified> s

rules //vars

   expression-to-java-servlet =
      var-to-java-servlet

   var-to-java-servlet :
     Var(x) -> expr|[ x ]|
     where not(has-ref-type)

   var-to-java-servlet :
     v@Var(x) -> expr|[ (x_type) x.get() ]|
     where has-ref-type
     with  x_type := <get-type-anno;java-type-name> v

   expression-to-java-servlet =
     field-access-to-java-servlet
     <+ generic-field-access-to-java-servlet

   generic-field-access-to-java-servlet :
     FieldAccess(e1, x) -> expr|[ e2.x_get() ]|
     with  x_get := <concat-strings>["get", <capitalize-string> x]
         ; e2 := <expression-to-java-servlet> e1
   // todo: only setupFor if derived property

   expression-to-java-servlet =
     call-to-java-servlet
     <+ generic-call-to-java-servlet

   // Entity function call, entity call inside entity is already desugared to always include 'this.'
   generic-call-to-java-servlet :
     Call(e1, x1, e2*) -> expr|[ e3.x2#_(e4*) ]|
     with  if <get-anno(?NewFunctionNameAnno(newx))> x1 then x2 := newx else x2 := x1 end
     with  e3 := <expression-to-java-servlet> e1
         ; e4* := <map(expression-to-java-servlet)> e2*

   // fluent interface set#Property functions used in object creation map directly to setter in generated Java code        
   call-to-java-servlet :
     Call(e1, x1, e2*) -> expr|[ e3.set#x2(e4*) ]|
     where x2 := <string-starts-with(|<property-setter-prefix-internal>); string-replace(|<property-setter-prefix-internal>, "")> x1
     with  e3 := <expression-to-java-servlet> e1
         ; e4* := <map(expression-to-java-servlet)> e2*

  // Static function call
  generic-call-to-java-servlet:
    tc@ThisCall(x1, e1*) -> result
    where (get-anno(?StaticFunctionCallAnno(x_class, x_funcname)))
    with  e2* := <map(expression-to-java-servlet)> e1*
        ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
        ; result := expr|[ x_Class.x_funcname#_(e2*) ]|

  // Static entity method call
  call-to-java-servlet =
     special-static-method-call-to-java-servlet
  <+ static-method-call-to-java-servlet

  static-method-call-to-java-servlet:
    tc@Call(v,x1,e1*) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with  if <get-anno(?NewFunctionNameAnno(newx))> x1 then x2 := newx else x2 := x1 end
    with  e2* := <map(expression-to-java-servlet)> e1*
          ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
          ; x_funname := <concat-strings> ["$static$",x2,"_"]
          ; result := expr|[ x_Class.x_funname(e2*) ]|

rules
  // Global function call
  generic-call-to-java-servlet :
    tc@ThisCall(x1, e1*) -> result
    where (get-anno(?GlobalCallAnno(globalFunctionSig)))
    with  if <get-anno(?NewFunctionNameAnno(newx))> x1 then x2 := newx else x2 := x1 end
    with  if [] := globalFunctionSig
          then e2* := <map(pass-on-ref-arg-exp <+ expression-to-java-servlet)> e1*
          else functionArgTypes/*Function(_,functionArgs,_,_)*/ := globalFunctionSig
             ; e2* :=<zip(call-arg-ref-resolve-helper)> (functionArgTypes,e1*)
          end
        ; x_Class := <concat-strings> [<pp-java5-to-string> <FunctionPackage>, ".", x2]
        ; result := expr|[ x_Class#_.x2#_(e2*) ]|

  string-list-to-java-servlet :
    stringlist -> stringarray
    with stringarray := <foldr(!expr |[ new String[] {} ]|, {?(str, expr |[ new String[] {e_array*} ]|); !expr |[ new String[] {e_array*,"~str"} ]|})> stringlist

  string-list-to-java-servlet-or-null = string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ (String[])null ]| \) // The cast on null is required when the expression is used inside a method call, to ensure the call does not become ambiguous

rules
  call-arg-ref-resolve-helper:
    (srtfarg,arg) -> x
    where <is-ref-type> srtfarg
    with  x := <pass-on-ref-arg-exp> arg
  call-arg-ref-resolve-helper:
    (srtfarg,arg) -> x
    where not(<is-ref-type> srtfarg)
    with  x := <expression-to-java-servlet> arg

  //pass-on-ref-arg-exp:
  //used for access control global function internally, but could add ref args to functions at some point
  //currently a global function with ref arg is always passed a ref arg, since the generated functions's farg is based on the arg exp type
  //if ref args are enabled for functions also non has-ref-type args need to be supported here
  pass-on-ref-arg-exp :
    Var(x) -> e|[ x ]|
    where has-ref-type
