module org/webdsl/dsl/to-java-servlet/session-variables

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules // TODO cache disabled for now,
      // investigate what happens when validation failure starts new hibernate session
      //
      // session var use
      // cached inside templates (detected with ThisTemplateName dynamic rule being set)
      // other contexts will use an environment lookup each time

  //expression-to-java-servlet :
  //  s@SessionVar(x) -> expr|[ getCachedSession#x() ]|
  //  where ThisTemplateName; not(InAction)

  expression-to-java-servlet :
    s@SessionVar(x) -> expr|[ (pkgtname_domain.x_ent) utils.ThreadLocalPage.getEnv().getSessionVariable("~x") ]|
    //where not(ThisTemplateName) <+ InAction
    with  x_ent := <capitalize-string> x
        ; pkgtname_domain := <DomainPackage>
/*
rules // local cache for session lookup in template class

  generate-code-java-servlet-template = generate-java-servlet-session-vars-template; fail

  generate-java-servlet-session-vars-template  :
    def@Define(_,_,_,_,body) -> <generate-java-servlet-template-partial> cbds
    with  sents := <get-anno(?SessionEntities(<id>))> def
    where cbds  := <filter(generate-java-servlet-session-vars-template-helper(|body)); not(?[]); concat> sents

  generate-java-servlet-session-vars-template-helper(|body) :
    x_ident ->
        class-body-dec*
        |[
           private t_ent x_ident#cache = null;

           protected t_ent getCachedSession#x_ident()
           {
             if(x_ident#cache == null){
               x_ident#cache = (x_ent) env.getSessionVariable("~x_ident");
             }
             return x_ident#cache;
           }
        ]|
    where <oncetd(?SessionVar(x_ident))> body
    with  t_ent := <capitalize-string; java-type-entity> x_ident
        ; x_ent := <java-type-to-java-name> t_ent
*/
rules

  generate-code-java-servlet-template = page-class-generation-test; generate-java-servlet-session-vars-page; fail

  //merge reference properties of session entities at page initialization
  generate-java-servlet-session-vars-page  :
    def@Define(mod*,_,_,_,_) ->
    <generate-java-servlet-partial>
    class-body-dec* |[
      ~*cbds*
    ]|
    where <fetch(Page)> mod* <+ <fetch(AjaxTemplate)> mod*
    with  sents := <get-anno(?SessionEntities(<id>))> def
        ; cbds*  := <map(generate-java-servlet-session-vars-page-helper-one);concat> sents

  generate-java-servlet-session-vars-page-helper-one:
    x_ident ->
    class-body-dec* |[
           //when cancel occurs, session vars need to be reinitialized if they were just created, to remove all pointers to evicted hibernate objects
         //  boolean x_ident#JustCreated = false;

           @Partial
           protected void initialize()
           {
             pkgtname_domain.SessionManager x_s = (pkgtname_domain.SessionManager) utils.ThreadLocalServlet.get().getSessionManager();
             if(x_s.get#x_ident() == null){

               t_ent ent = x_ent._static_createEmpty_();
               ent.x_constructor(); //load defaults if exist

               x_s.set#x_ident#NoEventsOrValidation(ent);

               ~e:(e_HibSession()).save(x_s.get#x_ident());
             }
             envGlobalAndSession.putSessionVariable("~x_ident",x_s.get#x_ident());
           }
    ]|
    with  t_ent := <capitalize-string; java-type-entity> x_ident
        ; x_constructor := <concat-strings>[<capitalize-string> x_ident, "_"]
        ; x_ent := <java-type-to-java-name> t_ent
        ; x_s := <concat-strings> ["sesm$",x_ident]
        ; pkgtname_domain := <DomainPackage>

  call-to-java-servlet :
    ThisCall("getSessionManager", []) ->
    expr|[ (pkgtname_domain.SessionManager)utils.ThreadLocalServlet.get().getSessionManager() ]|
    with  pkgtname_domain := <DomainPackage>

    //    ; bstm* := <filter(generate-java-servlet-session-vars-page-helper-update(|x_ident))> prop*
  //      ; bstm1* := <filter(generate-java-servlet-session-vars-page-helper-store(|x_ident))> prop*
/*
  generate-java-servlet-session-vars-page-helper-update(|x_ident):
    Property(x, k, s, annos) -> java|[
      if (x_ident.get#x#ident() != null) {
        //x_ident.set#x((x_class) ~e:(e_HibSession()).load(x_class.class,x_ident.get#x().getId()));
        x_ident.set#x((x_class) ~e:(e_HibSession()).load(x_class.class,x_ident.get#x#ident()));
      }
    ]|
    where <defined-java-type> s
        ; SimpleSort(t) := s
        ; x_class := t
        ; x_type := "java.util.UUID"

  generate-java-servlet-session-vars-page-helper-store(|x_ident):
    Property(x, k, s, annos) -> java|[
      if (x_ident.get#x() != null) {
        //x_ident.set#x((x_class) ~e:(e_HibSession()).load(x_class.class,x_ident.get#x().getId()));
        x_ident.set#x#ident(x_ident.get#x().getId());
        x_ident.set#x(null);
      }
    ]|
    where <defined-java-type> s
        ; SimpleSort(t) := s
        ; x_class := t
        */
