module org/webdsl/dsl/to-java-servlet/core-to-java-servlet

imports
  libwebdsl-front

imports
  org/webdsl/dsl/to-java-servlet/-
  org/webdsl/dsl/to-java-servlet/types/-
  org/webdsl/dsl/to-java-servlet/uicomponents/-
  org/webdsl/dsl/to-java-servlet/ajax/-
  org/webdsl/dsl/to-java-servlet/email/-
  org/webdsl/dsl/to-java-servlet/data-validation/-
  org/webdsl/dsl/to-java-servlet/search/-
  org/webdsl/dsl/to-java-servlet/test/-
  org/webdsl/dsl/to-java-servlet/debug/-
  org/webdsl/dsl/to-java-servlet/native/-
  org/webdsl/dsl/to-java-servlet/action/-
  org/webdsl/dsl/to-java-servlet/routing/-
  libback-end-transformations

imports		// local generation
  libjava-transformations
  libwrite-files

strategies

  set-DomainPackage(|pkg) = rules( DomainPackage := pkg )

  core-to-java-servlet(|qid) =
      prepare-core-to-java-servlet(|qid)
      // generate-code-java-servlet-once should not use the ast, back-end-transformations/analysis for ast analysis
    ; log-time(not(<generate-code-java-servlet-once> None()) |"generate-code-java-servlet-once")
    ; log-time(map(generate-code-java-servlet) |"generate-code-java-servlet")
    ; transform-java-code

  transform-java-code =
    where(  pkgname1 := <TemplatePackage>
          ; pkgname2 := <DomainPackage>
          ; pkgname3 := <ActionPackage>
          ; pkgname4 := <TestPackage>)
  ; <flatten-list>
      [  <log-time(bagof-JavaClassesToEmit; get-java-artifacts-java-servlet | "get-java-artifacts")>
       , <log-time(get-web-xml                    |"get-web-xml")>
       , JavaFile([<GeneratedOutputDir>], compilation-unit|[package pkgname2 ; public class Force_Domain_Package_Creation {} ]|)
       , JavaFile([<GeneratedOutputDir>], compilation-unit|[package pkgname3 ; public class Force_Action_Package_Creation {} ]|)
       , JavaFile([<GeneratedOutputDir>], compilation-unit|[package pkgname4 ; public class Force_Test_Package_Creation {} ]|)
      ]

  get-web-xml =
    WebXMLToEmit

  prepare-core-to-java-servlet(|qid) =
    where(
        rules(
          Package         := <qid-to-package-name> qid
          TemplatePackage := <qid-to-package-name> Qualified(qid, "templates")
          ActionPackage   := <qid-to-package-name> Qualified(qid, "actions")
          TestPackage     := <qid-to-package-name> Qualified(qid, "test")
          FunctionPackage := <qid-to-package-name> Qualified(qid, "functions")
        )
      ; set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain"))
    )
    ; annotate-pagecalls
    ; map(try(register-template-name))
    ; is-ac-enabled
    ; is-access-control-specified-for-logsql

  is-access-control-specified-for-logsql =
    try(oncetd(\e@SpecialAccessControlRule("logsql",check) -> e where rules( LogSqlAccessControlCheck := check ) \))

  // Front-end DR to see whether AC is enabled no longer available here.
  // This check should not be used in cached generation rules, only for classes that are always regenerated.
  // If required in cached generated class, then add it as annotation to its webdsl ast node so the cache can see the dependency.
  is-ac-enabled =
    try(oncetd(?SessionEntity("securityContext",_); rules( AccessControlEnabled := True() )))

  generate-code-java-servlet = try-scope-webdsl-newname( generate-code-java-servlet-define )

  try-scope-webdsl-newname(s) = if needs-global-unique-names then s else {| NewNameUsed: s |} end
  needs-global-unique-names = ?InitAction(_)

  generate-code-java-servlet-define =
    ?NativeClass(_,_,_,_)  // no codegen for individual elements of this type. by matching node stop traversal inside
 <+ ?TypeDef(_,_)
 <+ ?InvokeEvery(_,_)
 <+ ?FullTextAnalyzer(_,_,_)
 <+ ?GlobalVarDeclInit(_,_,_)
 <+ ?Note(_)
 <+ ?Imports(_)
 <+ ?Enum(_,_)
 <+ ?SpecialAccessControlRule(_,_)
 <+ ?Description(_)
 <+ is-string // expand seems to leave the last element in the AST
 <+ ?define@Define(mods, name, args, targs, elems);
      if where(WebDSLCompileBuiltIns) <+ not(has-anno(Precompiled)) then
        {| ThisEmail, JavaThisPage, ThisTemplateName,ThisTemplateClassName, Variables, JavaThisPagePrefetches, ThisAjaxTemplateName: //Variables: to hold arguments/variables of parent templates/pages
          with (
              if ThisTemplateName   then debug(!"\nERROR: inline local template found in back-end, should have been desugared:\n");<exit> 1 end
            ; if <fetch(Page)>  mods then
                where(prefetches := <try(?Block(<id>)); filter(?PrefetchFor(_, _, _, _))> elems)
              ; rules ( JavaThisPage := <if-page-add-override-in-name> (mods, name) )
              ; rules ( JavaThisPagePrefetches := prefetches )
              end
            ; if <fetch(Email)> mods then rules ( ThisEmail := name ) end
            ; if <fetch(AjaxTemplate)> mods then rules ( ThisAjaxTemplateName := <if-page-add-override-in-name> (mods, name) ) end
            ; rules (
              ThisTemplateName := name
              ThisTemplateClassName := <get-template-class-name> define
            )
            ; <cached-generate(
                  annotate-with-unique-element-ids(| <suffix-from-name> name )
                ; log-time(not(generate-code-java-servlet-template)|"generate code define")
                ; <map(try(generate-code-java-servlet-page-arg))> args
                ; <map(try(generate-code-java-servlet-template-arg))> args
                ; <try(merge-template-init-actions);alltd(generate-code-java-servlet-template-element /*<+ debug(|"genelem failed");fail*/)> elems
                | <ThisTemplateClassName>
              )> define
            // ; nameSuf := <checksum>name
            // ; rules( NamingSuffix := nameSuf) 
            // ; cached-generate(
              //     annotate-with-unique-element-ids(| <checksum>name )
              //   ; log-time(not(GenerateCodeJavaServlet)|"generate code define")
              //   ; all(generate-code-java-servlet)
              //   | <ThisTemplateClassName>
              // )
          )
       |}
     end
 <+ ?InitAction(_) ; // global init action
         {| InAction, Variables:
           rules ( InAction := True() )
         ; generate-code-java-servlet-global-init
         |}
 <+ ?Test(_,_); generate-code-java-servlet-test
 <+ ?Routing(_)
   ; (generate-code-java-servlet-routing <+ debug(|"generate-code-java-servlet-routing failed");fail)  // success stops traversal
 <+ (?RequestScopeVarDeclInit(_,_,_) <+ ?RequestScopeVarDecl(_,_)
     <+ ?(<?RequestScopeVarDeclInit(_,_,_)>,_,_)  // codegen issue?
     <+ ?(<?RequestScopeVarDecl(_,_)>,_,_)  // codegen issue?
    )
   ; (generate-code-java-servlet-request-vars <+ debug(|"generate-code-java-servlet-request-vars failed");fail)
 <+ ?AttributeCollection(_,_,_);
    (if where(WebDSLCompileBuiltIns <+ not(has-anno(Precompiled)))
     then (generate-code-java-servlet-attribute-col <+ debug(|"generate-code-java-servlet-request-vars failed");fail) end)
 <+ where(not(JavaInEntity)); ?Function(_,_,_,_);
      if where(WebDSLCompileBuiltIns) <+ not(has-anno(Precompiled)) then
         generate-java-servlet-global-function
      end
 <+ where(get-entity-def => (ent_name, _)) ;
       if where(WebDSLCompileBuiltIns) <+ not(has-anno(Precompiled)) then
         {| JavaInEntity:
           rules ( JavaInEntity := <id> )
         ; cached-generate(
               log-time(not(generate-code-java-servlet-entity)|"generate code entity")
             | ent_name
           )
         |}
       end
   /*<+ ?LocalRedefine(_,_,_,_,_); //avoid page code generation for Arg constructors in LocalRedefine
       {| InLocalRedefine:
           rules ( InLocalRedefine := True() )
         ; log-time(not(GenerateCodeJavaServlet)|"generate code local redefine")
         //; all(generate-code-java-servlet)
         |}*/
   <+     // log-time(not(GenerateCodeJavaServlet)|"generate code other")
   debug(|"no code generated for AST element: ")

  // match to skip traversal into node
  generate-code-java-servlet-template-element = 
    ?LocalRedefine(_,_,_,_,_) // avoid page code generation for Arg constructors in LocalRedefine
 <+ ?PrefetchFor(_,_,_,_)  
 <+ ?Text(_)
 <+ ?DataBindAction(_)
 <+ ?ValidateAction(_)
 <+ ?RenderAction(_)
 <+ ?AllPhasesAction(_)
 <+ ?AccessControlImportRules(_,_)
 <+ ?JSElement(_,_)
/*
  these elements have content that may generate code
 <+ ?TemplateCall(_,_,_,_)
 <+ ?IfTempl(_,_,_)
 <+ ?Placeholder(_,_,_)
 <+ ?XMLElement(_,_,_,_)
 <+ ?XMLEmptyElement(_,_)
 <+ ?For(_,_,_,_,_,_)
 <+ ?ForAll(_,_,_,_,_)
 <+ ?XMLEmptyElementUnclosed(_,_)
 <+ ?SubmitLinkElem(_,_,_)
 <+ ?SubmitElem(_,_,_)
*/

  generate-code-java-servlet-template-element =
    (?Action(_, _, _, _) <+ ?InitAction(_) )
  ; {| InAction, Variables:
      rules( InAction := True() )
    ; log-time(not(generate-code-template-action <+ generate-code-template-initaction)|"generate code action")
    |}

  // merge init actions, when there is access control weaving this merge has been done already
  merge-template-init-actions :
    elem* -> new-elem*
    where not( is-access-control-enabled )
        ; init* := <filter( ?InitAction(_) ); not(?[] <+ ?[InitAction(_)])> elem*
    with  combinedbody := <map( ?InitAction(Block(<id>)) ); concat> init*
        ; new-elem* := [ InitAction(Block(combinedbody)) | <remove-all(?InitAction(_))> elem* ]

// some helping annotations to create uniqueness among the static elements

signature
  constructors
    TemplateCallNumber : String -> Annotation
    FormNumber : String -> Annotation
    InputNumber : String -> Annotation
    ActionNumber : String -> Annotation //action calls/actionLink
    CFNumber : String -> Annotation
    TemplateClassName : String -> Annotation
    RefArgClassNameFirstPart : String -> Annotation
    RefArgClassNameSecondPart : String -> Annotation
    RefArgClassName : String -> Annotation
   /* ActionClassName : String -> Annotation*/

rules

  get-templatecallnumber :
    _{anno*} -> compid
    where TemplateCallNumber(compid) := <collect(?TemplateCallNumber(_));Hd> anno*

  get-formnumber :
    _{anno*} -> compid
    where FormNumber(compid) := <collect(?FormNumber(_));Hd> anno*

  get-inputnumber :
    _{anno*} -> compid
    where InputNumber(compid) := <collect(?InputNumber(_));Hd> anno*

  get-actionnumber :
    _{anno*} -> compid
    where ActionNumber(compid) := <collect(?ActionNumber(_));Hd> anno*

  get-controlflownumber-from-anno :
    anno* -> compid
    where CFNumber(compid) := <collect(?CFNumber(_));Hd> anno*

  get-refargclassname-first :
    _{anno*} -> compid
    where RefArgClassNameFirstPart(compid) := <collect(?RefArgClassNameFirstPart(_));Hd> anno*
  get-refargclassname-second :
    _{anno*} -> compid
    where RefArgClassNameSecondPart(compid) := <collect(?RefArgClassNameSecondPart(_));Hd> anno*

  get-template-class-name :
    _{anno*} -> compid
    where TemplateClassName(compid) := <collect(?TemplateClassName(_));Hd> anno*
 /*
  get-action-class-name :
    _{anno*} -> compid
    where ActionClassName(compid) := <collect(?ActionClassName(_));Hd> anno*
   */

strategies

  annotate-pagecalls =
    alltd(annotate-pagecall)

rules

  annotate-pagecall:
    Define(a,name,b,c,elems){anno*} -> Define(a,name,b,c,elems1){anno*}
    with {| ThisTemplateName:
           rules(ThisTemplateName := name)
         ; elems1 := <alltd(annotate-pagecall)> elems
         |}

  annotate-pagecall :
    PageCall(pagename,arg*){anno*} -> PageCall(pagename,arg1*){anno*}
    where not("url" := pagename) //TODO url variant of navigate should have different cons
    with  get-anno(?PageArgsAnno(farg*))
        ; farg1* := <add-farg-numbers> farg*
        ; arg1* := <zip(add-ref-arg-class-names(|pagename)<+?(_,<id>))> (farg1*,arg*)

  add-ref-arg-class-names(|pagename) :
    (farg{anno*},arg@FieldAccess(_,_){anno1*}) -> result // not for Var since that would be a template var, which is not available through a page or ajax link
    where <?Arg(_,RefSort(_))> farg
        ; not(<has-ref-type> arg)
    with  <fetch(?ArgNumber(argnum))> anno*
        ; first := <gen-page-ref-arg-class-name-first-part> (pagename,argnum)
        ; second := <gen-page-ref-arg-class-name-second-part>
        ; newid := <concat-strings> [first,second]
        ; result := arg{RefArgClassNameFirstPart(first),RefArgClassNameSecondPart(second),RefArgClassName(newid),anno1*}

  /**
   *  first part, used for all calls to this particular argument of the page
   */
  gen-page-ref-arg-class-name-first-part : (pagename,argnum) -> <concat-strings> ["RefArg_",pagename,"_",<int-to-string> argnum,"_"]

  /**
   *  second part, added in URL, which selects a particular call site (templatename + (pagecall) number in template) to determine the RefArg class to use
   *  ThisTemplateName is unique, so there is no newname overlap with other templates
   *  since these names are used in a global lookup hashmap, otherwise caches can become invalid
   */
  gen-page-ref-arg-class-name-second-part  = <concat-strings;newname-webdsl> [<ThisTemplateName>,"pc"]

  /**
   *  template calls
   */
  annotate-pagecall = annotate-templatecall

  annotate-templatecall :
    TemplateCall(tname,arg*,a,b){anno*} -> TemplateCall(tname,arg1*,<alltd(annotate-templatecall)> a,b){anno*}
    where get-anno(?CalledTemplateArgs(farg*))
    with  farg1* := <add-farg-numbers> farg*
        ; varslength := <length> arg*
        ; if varslength := <length> farg*
          then selectedTemplateArgs := farg1*
          else selectedTemplateArgs := <reverse;take(|varslength);reverse> farg1*
          end
        ; arg1* := <zip(add-ref-arg-class-names(|tname)<+?(_,<id>))> (selectedTemplateArgs,arg*)

strategies

  annotate-with-unique-element-ids(|namesuffix) = 
    topdown(try(java-servlet-element-id(|namesuffix)))

rules
  
  java-servlet-element-id(|suffix) :
    tc@TemplateCall(name, args,passign*, _){anno*} -> tc{TemplateCallNumber(newid),anno*}
    where <get-anno(?CallToDefinedAnno() <+ ?CallToRequiredAnno())> tc
       <+ <?"elements" <+ ?QualifiedElementsCall(_)> name
    with   newid := <newname-webdsl-suffix(|suffix)> "tcall"
    
  java-servlet-element-id(|suffix) :
    MemberTemplateCallIndex(x, tc{anno*}, i){anno1*} ->  MemberTemplateCallIndex(x, tc{TemplateCallNumber(newid),anno*}, i){anno1*}
    with   newid := <newname-webdsl-suffix(|suffix)> "tcall"

  java-servlet-element-id(|suffix) :
    tc@TemplateCall("form", attrs,passign*, elems){anno*} -> tc{FormNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "form"

  java-servlet-element-id(|suffix) :
    tc@TemplateCall("dynamicform", attrs,passign*, elems){anno*} -> tc{FormNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "dynamicform"

  java-servlet-element-id(|suffix) :
    tc@PropertySubmit(_,_){anno*} -> tc{ActionNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "action"
  java-servlet-element-id(|suffix) :
    tc@PropertySubmitMultiple(_,_){anno*} -> tc{ActionNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "action"

  // java-servlet-element-id-template-call :
  //   tc -> tc{InputNumber(newid),anno*}
  //   with  _{anno*} := tc
  //       ; newid := <newname-webdsl-suffix(|suffix)> "input"
          
  java-servlet-element-id(|suffix) :
    tc@IfTempl(e, elems, elems2){anno*} -> tc{CFNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "if"

  java-servlet-element-id(|suffix) :
    tc@ForAll(x, srt, fltr, elems, sep){anno*} -> tc{CFNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "for"
  java-servlet-element-id(|suffix) :
    tc@For(x, srt, e1, fltr, elems, sep){anno*} -> tc{CFNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "for"

  template-class-name-parents: (mod*, allnames) -> class
    with  name := <reverse; separate-by(|"_"); concat-strings> allnames
        ; class := <template-name-to-classname> (mod*, name)

  register-template-name :
    tc@Define(mod*,x,farg*, targs, elem*){anno*} -> Define(mod*,x,farg*, targs, elem1*){TemplateClassName(className),anno*}
    with  parentNames := <bigbagof-CurrentHierarchicalName>
        ; className := <template-class-name-parents> (mod*, [x | parentNames])
        ; {| CurrentHierarchicalName :
              rules( CurrentHierarchicalName :+= x )
            ; elem1* := <alltd(register-template-name)> elem*
          |}

