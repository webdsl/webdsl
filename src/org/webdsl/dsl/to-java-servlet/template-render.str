module org/webdsl/dsl/to-java-servlet/template-render

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  generate-code-java-servlet-template = log-time(render-java-servlet-template|"render-java-servlet-template"); fail
  
  render-java-servlet-template =
    ?def@def |[ define mod* x(farg*)  req*  { elem* } ]|
    ; with(
          {| CurrentTemplateRender:
            rules(CurrentTemplateRender := def)
          ; bstm1* := <elements-to-java-servlet> elem*
          |}
      )
    ; with(
        <generate-java-servlet-template-partial> 
        java |[ 
            @Partial
            protected void handlePhase(int phase){
              ~*<java-servlet-template-phase-inits>
              
              bstm1*
            }
        ]|
      )
      
  java-servlet-template-phase-inits =
    ! bstm* |[
      String ident = "";
      String forelementid = "0";
      int fallbackcounter = 0;      
      boolean inForLoop=false;
      int forLoopCounter = 0;
      java.io.PrintWriter out = utils.ThreadLocalOut.peek();
    ]|
 
//coming from elements to xhtml
strategies // lists of elements

  elements-to-java-servlet = //filter because other non-visible stuff is in there like vardecl
    filter(element-to-java-servlet <+ undefined-template-call)
    ; concat-with-sublists //accept both bstm and bstm*
  
  elements-to-java-servlet :   
    TemplateBody(elems) -> <elements-to-java-servlet> elems
    
  undefined-template-call :
    t@TemplateCall(f, args,passign*, body) -> []
    where log(|Warning(), ["no definition for template ", t])
        ; try(CurrentTemplateRender)
        ; fatal-err(|"error occurred in following template")

