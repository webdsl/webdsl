module org/webdsl/dsl/to-java-servlet/uicomponents/navigate

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/page-utils
  org/webdsl/dsl/to-java-servlet/template-render
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/template-ref-arguments
  org/webdsl/dsl/to-java-servlet/ajax/html-utils

rules // links

  element-to-java-servlet = (?TemplateCall("navigate",[],_,_) <+ ?TemplateCall("navigate",[_],_,_) <+ ?TemplateCall("navigatebutton",[_,_],_,_)); navigate-to-java-servlet

  // link to a url, maybe constant, or obtained from an entity field

  navigate-to-java-servlet : //void navigate, useful for ajax
    tc@TemplateCall("navigate", [],passign*, elems) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[
    if(RENDER_PHASE == phase){
      out.print("<a href=\"javascript:void(0)\"");
      bstm_attr
      out.print(">");
    }
    bstm*
    if(RENDER_PHASE == phase){
      out.print("</a>");
    }
    ]|
    with  bstm* := <elements-to-java-servlet> elems
        ; bstm_attr := <to-html-attrs-include-collection(|"navigate")> passign*

  navigate-to-java-servlet :
    tc@TemplateCall("navigate", [PageCall("url",[e])],passign*, elems) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[
    if(RENDER_PHASE == phase){
      out.print("<a href=\"");
      bstm_output
      out.print("\"");
      bstm_attr
      out.print(">");
    }
    bstm*
    if(RENDER_PHASE == phase){
      out.print("</a>");
    }
    ]|
    with  bstm_output := <to-page-string-java-servlet> e
        ; bstm* := <elements-to-java-servlet> elems
        ; bstm_attr := <to-html-attrs-include-collection(|"navigate")> passign*

  navigate-to-java-servlet :
    tc@TemplateCall("navigate",[call@PageCall(p,args)],passign*,elems) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[
      if(RENDER_PHASE == phase){
        out.print("<a href=\"");
        out.print(utils.HTMLFilter.filter(e_resulturl));
        out.print("\"");
        bstm_attr
        out.print(">");
      }
      bstm*
      if(RENDER_PHASE == phase){
        out.print("</a>");
      }
    ]|
    where InternalSort("Page") := <get-type-anno> call
    with  e_resulturl := <page-thiscall-to-url-string-java-servlet> call
        ; bstm* := <elements-to-java-servlet> elems
        ; bstm_attr := <to-html-attrs-include-collection(|"navigate")> passign*

  navigate-to-java-servlet :
    tc@TemplateCall("navigatebutton",[call@PageCall(p,args), e],passign*,TemplateBody([])) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[
      if(RENDER_PHASE == phase){
        out.print("<input type=\"button\" onclick=\"window.location = '"+utils.HTMLFilter.filter(e_resulturl)+"'\"");
        out.print("value=\"");
        bstm_output
        out.print("\"");
        bstm_attr
        out.print(">");
      }
    ]|
    where InternalSort("Page") := <get-type-anno> call
    with  e_resulturl := <page-thiscall-to-url-string-java-servlet> call
        ; bstm_output := <to-page-string-java-servlet> e
        ; bstm_attr := <to-html-attrs-include-collection(|"navigatebutton")> passign*

rules

  page-thiscall-to-url-string-java-servlet :
    pc@PageCall(p,args) -> e_url
    where <not(?"url")> p
    with  get-anno(?PageArgsAnno(farg*))
        ; farg1* := <add-farg-numbers> farg*
        ; params := <zip(bind-param-java-servlet)> (farg1*, args)
        ; e_url := <page-call-to-url-java-servlet> (p, params, farg1*)

  page-thiscall-to-url-string-java-servlet :
    pc@PageCall("url",[exp]) -> e_url
    with e_url := <expression-to-java-servlet> exp

  bind-param-java-servlet =
     bind-param-java-servlet-entity-id-anno
  <+ bind-param-java-servlet-entity-type
  <+ bind-param-java-servlet-date-time
  <+ bind-param-java-servlet-ref-arg
  <+ bind-param-java-servlet-native
  <+ bind-param-java-servlet-default

  bind-param-java-servlet-entity-id-anno :
    (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.filter(e1.getNaturalId()) ]|)
    where <get-type-anno;has-entity-anno> e
        ; not(SimpleSort("Entity") := srt)
    with  SimpleSort(x_class) := srt
        ; e1 := <expression-to-java-servlet> e

  bind-param-java-servlet-entity-type :
    (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.filter(e1.get_WebDslEntityType() + ":" + e1.getId()) ]|)
    where SimpleSort("Entity") := srt
    with  e1 := <expression-to-java-servlet> e

  bind-param-java-servlet-date-time :
    (Arg(x, SimpleSort(<?"Date"<+?"DateTime"<+?"Time">)), e) -> (x, e|[ utils.URLFilter.filter(e1.getTime()) ]|)
    with  e1 := <expression-to-java-servlet> e

  bind-param-java-servlet-ref-arg :
    (Arg(x, RefSort(srt)), e) -> (x,res)
    with  res := <create-assigns-for-ref-arg-helper-page-ref-arg>

  bind-param-java-servlet-default :
    (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.filter(e1) ]|)
    with  e1 := <expression-to-java-servlet> e

  bind-param-java-servlet-native :
      (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.paramMapToURLEncoding(e1.toParamMap()) ]|)
      where (<is-native-class> e)
      with e1 := <expression-to-java-servlet> e

  page-call-to-url-java-servlet :
    (pagename, [], []) -> java:expr |[ utils.Navigate.constructUrl("~pagename") ]|
    where not("root" := pagename)

  page-call-to-url-java-servlet :
    ("root", [], []) -> java:expr |[ utils.Navigate.constructUrl("") ]|

  page-call-to-url-java-servlet :
    (pagename, params, farg*) -> e |[ utils.Navigate.constructUrl("~pagename", utils.CollectionType.addAll(new java.util.ArrayList<String>(i_length),e*), e1*) ]|
    where not([] := params)
    with  e* := <map(Snd)> params
        ; e1* := <map(param-tuple-type-java-string)> farg*
        ; i_length := <length; int-to-string> params

  param-tuple-type-java-string :
    Arg(x, srt) -> java:expr|[ "~<pp-type> srt" ]|
