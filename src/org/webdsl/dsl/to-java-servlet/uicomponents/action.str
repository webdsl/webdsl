module org/webdsl/dsl/to-java-servlet/uicomponents/action

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/template-render
  org/webdsl/dsl/to-java-servlet/template-action-inputs
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet
  org/webdsl/dsl/to-java-servlet/ajax/html-utils

rules

  java-servlet-element-id(|suffix) :
    tc@SubmitElem(_,_,_){anno*} -> tc{ActionNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "action"

  java-servlet-element-id(|suffix) :
    tc@SubmitLinkElem(_,_,_){anno*} -> tc{ActionNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "action"

rules

  element-to-java-servlet = (?SubmitElem(_,_,_) <+ ?SubmitLinkElem(_,_,_)); element-databind-action-render(|<databind-phase-submitelem>, <action-phase-submitelem>, <render-phase-submitelem>)

  /**
   * previously used <input type="submit"> but that does not allow non-text elements to be nested, because these become an attribute value
   * now using <button> which supports having icons and other template elements nested
   */
  render-phase-submitelem :
    tc@SubmitElem(call@ActionCall(name, args),passign*,elem*) ->
    bstm* |[
      if(isAjaxSubmitRequired(e_ajaxmodifier)){
        out.print("<button submitid=\""+e_ident+"\" onclick='javascript:serverInvoke(\""+threadLocalPageCached.getAbsoluteLocation()+"/" + threadLocalPageCached.getActionTarget() + threadLocalPageCached.getExtraQueryArguments("?")  +"\",\""+ e_ident +"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this, "+"~x_showloadingfeedback"+",\""+threadLocalPageCached.placeholderId+"\"); return false;'");
        bstm_attr
        ~bstm*:bstm_testsubmitselect*
        out.print(">");
        bstm*
        out.print("</button>");
      }
      else{
        out.print("<button name=\""+e_ident+"\"");
        bstm_attr
        ~bstm*:bstm_testsubmitselect*
        out.print(">");
        bstm*
        out.print("</button>");
      }
    ]|
    with  bstm* := <elements-to-java-servlet> elem*
        ; bstm_attr := <remove-all(?PropertyAssignment("name",_)); to-html-attrs-include-collection(|"submit")> passign*
        ; e_ajaxmodifier := <fetch-ajax-property-as-java-boolean> passign*
        ; e_ident := <action-id-java-expression(|args, passign*)> tc
        ; bstm_testsubmitselect* := <test-submit-selection-helper>
        ; if <fetch(?TemplateCallPropertyNoLoadingFeedback())> passign*
          then x_showloadingfeedback := "false"
          else x_showloadingfeedback := "true" end

  test-submit-selection-helper = <if-test(!bstm*|[ out.print(" webdsl-submit-select=\"1\"");]|)> []

  submit-name-override :
    (e_ident1, passign*) -> e_ident2
    with  if <fetch(?PropertyAssignment("name",thename))> passign*
          then  e_name := <expression-to-java-servlet> thename
              ; e_ident2 := e_name
          else  e_ident2 := e_ident1 end

  action-id-encoding :
//    (actionident,args) -> e|[ ident + "~actionident" + getUniqueId() + e ]|
    (actionident,args) -> <for-loop-counter-wrap-code-expr> e|[ "~actionident" + getUniqueId() /*+ e*/ ]|
    //with  e := <actual-action-args-to-state-enc> args   //no longer add action args, this caused issues with inline actions + template vars, the args are changed during data binding and the action isn't found anymore

  id-encoding :
    inputident -> java:expr |[ ident+"~inputident"+getUniqueId() ]|

  action-args-to-java-exp-list(|args,fargcalled) =
    <handle-ref-arg> (fargcalled,args)

  action-id-java-expression(|args, passign*) :
    tc -> e_ident
    with  actionident := <get-actionnumber> tc
        ; e_origident := <action-id-encoding> (actionident, args)
        ; e_ident := <submit-name-override> (e_origident, passign*)

  /**
   * this doesn't allow downloads, use special downloadlink (see types/file.str)
   *
   * consists of a not displayed <button> with the action and a visible <a> link, so that browsers treat it like regular submit when pressing 'enter' in the form
   */
  render-phase-submitelem :
    tc@SubmitLinkElem(call@ActionCall(name, args), passign*, elem*) ->
    bstm* |[
      //This button will act as submit button on enter-key. Should have dimensions for safari/IE
      out.print("<button style=\"position: absolute; left: -9999px; width: 1px; height: 1px;\" ");
      if(isAjaxSubmitRequired(e_ajaxmodifier)){
          out.print("onclick='javascript:serverInvoke(\""+
            threadLocalPageCached.getAbsoluteLocation()+"/" + threadLocalPageCached.getActionTarget() + threadLocalPageCached.getExtraQueryArguments("?") +   //TODO getActionTarget is currently used, but the default redirect will not reproduce the page arguments in this case
            "\",\""+ e_ident +"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this.nextSibling, "+"~x_showloadingfeedback"+",\""+threadLocalPageCached.placeholderId+"\"); return false;'></button>");
          out.print("<a submitid=\""+e_ident+"\" href=\"javascript:void(0)\" onclick=\"javascript:loadImageElem=this;$(this.previousSibling).click()\"");
          bstm_attr
          ~bstm*:bstm_testsubmitselect*
          out.print(">");
          bstm*
          out.print("</a>");
      }
      else{
          out.print("onclick='javascript:serverInvoke(\""+utils.HTMLFilter.filter(threadLocalPageCached.getPageUrlWithParams())+
            "?__action__link__=1" + threadLocalPageCached.getExtraQueryArguments("&") + "\",\""+ e_ident +"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this.nextSibling, "+"~x_showloadingfeedback"+",\""+threadLocalPageCached.placeholderId+"\"); return false;'></button>");
          out.print("<a submitid=\""+e_ident+"\" href=\"javascript:void(0)\" onclick=\"javascript:loadImageElem=this;$(this.previousSibling).click()\"");
          bstm_attr
          ~bstm*:bstm_testsubmitselect*
          out.print(">");
          bstm*
          out.print("</a>");
      }
    ]|
    with  bstm* := <elements-to-java-servlet> elem*
        ; bstm_attr := <remove-all(?PropertyAssignment("name",_)); to-html-attrs-include-collection(|"submitlink")> passign*
        ; e_ajaxmodifier := <fetch-ajax-property-as-java-boolean> passign*
        ; e_ident := <action-id-java-expression(|args, passign*)> tc
        ; bstm_testsubmitselect* := <test-submit-selection-helper>
        ; if <fetch(?TemplateCallPropertyNoLoadingFeedback())> passign*
          then x_showloadingfeedback := "false"
          else x_showloadingfeedback := "true" end

  fetch-ajax-property-as-java-boolean :
    passign* -> e_ajaxmodifier
    with if <fetch(TemplateCallPropertyAjax)> passign*
         then e_ajaxmodifier := java:expr |[ true ]|
         else e_ajaxmodifier := java:expr |[ false ]|
         end

  action-phase-submitelem :
    tc@SubmitElem(call, passign*, elem*) -> <handle-actions-to-java-servlet-submit(|call, passign*, elem*)>

  action-phase-submitelem :
    tc@SubmitLinkElem(call, passign*, elem*) -> <handle-actions-to-java-servlet-submit(|call, passign*, elem*)>

  handle-actions-to-java-servlet-submit(|call, passign*, elem*):
    tc -> result
    with  <?ActionCall(x_action, args)> call
        ; <get-anno(?ActionFargAnno(fargcalled))> call
        ; e* := <action-args-to-java-exp-list(|args,fargcalled)>
        ; e_ident := <action-id-java-expression(|args, passign*)> tc
        ; e_ajaxmodifier := <fetch-ajax-property-as-java-boolean> passign*
        ; if <fetch(TemplateCallPropertyIgnoreValidation)> passign*
          then bstm_disableval* := java:bstm*|[ temp.disableValidation(); ]|
          else bstm_disableval* := [] end
        ; result :=
            bstm*|[
              ident = e_ident;
              if(threadLocalPageCached.getParammap().get(ident) != null)
              {
                if(isAjaxSubmitRequired(e_ajaxmodifier)){
                  threadLocalPageCached.enableAjaxActionExecuted();
                }
                ~<generate-submit-action-run-invoke(|x_action, e*)>
              }
            ]|

  //in first traversal, for input data binding, already register which action is executed, in order to know about ignore-validation
  //we need handle-actions traversal as well to get the right arguments for the action, which may depend on input data binding
  databind-phase-submitelem :
    tc@SubmitElem(call, passign*, elem*) -> <handle-actions-input-to-java-servlet-submit(|call, passign*)>

  databind-phase-submitelem :
    tc@SubmitLinkElem(call, passign*, elem*) -> <handle-actions-input-to-java-servlet-submit(|call, passign*)>

  handle-actions-input-to-java-servlet-submit(|call, passign*):
    tc -> result
    with  <?ActionCall(x_action, args)> call
        ; e_ident := <action-id-java-expression(|args, passign*)> tc
        ; if <fetch(TemplateCallPropertyIgnoreValidation)> passign*
          then bstm_disableval* := java:bstm*|[ temp.disableValidation(); ]|
          else bstm_disableval* := [] end
        ; result :=
            bstm*|[
              ident = e_ident;
              if(threadLocalPageCached.getParammap().get(ident)!=null )
              {
                  ~<generate-submit-action-databind-phase(|x_action)>
              }
            ]|
