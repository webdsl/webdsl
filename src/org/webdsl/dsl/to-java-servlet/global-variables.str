module org/webdsl/dsl/to-java-servlet/global-variables

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules //global var use

  expression-to-java-servlet :
    gv@GlobalVar(x) -> expr|[ (x_class) utils.ThreadLocalPage.getEnv().getGlobalVariable("~x") ]|
    where x_class := <get-type-anno; java-type-name> gv

rules

  generate-code-java-servlet-once =
    disable-code-generation-if-cache-exists
  ; generate-global-variables-init-class
  ; fail
       
  generate-global-variables-init-class: 
    _ -> <emit-java-code> compilation-unit|[
      package utils;

      @SuppressWarnings({"unused","unchecked"})
      public class GlobalVariables {
      
        private static org.hibernate.Session hibSession;
        
        private static org.webdsl.lang.Environment env; 
        
        private static java.io.PrintWriter out = null;
          
        ~*cbds*
        ~*cbds1*
    
        static boolean applicationContextPropertyExists(String name, java.util.List<ApplicationContextProperty> res){
          for(ApplicationContextProperty a : res){
            if(a.getName().equals(name))	
              return true;
          }
          return false;
        } 
        
        public static boolean globalvarsChecked = false;
        
        public static void forceLoad(){
          globalvarsChecked = false;
          load();
        }
        
        public static void load(){
          if(!globalvarsChecked){
              out = new java.io.PrintWriter(System.out);
              utils.ThreadLocalOut.push(out);

              bstm_initobjects*

              //assumes session already started a transaction
              org.hibernate.Session hibSession = ~e:(e_HibSession());

              utils.AbstractPageServlet ps = utils.ThreadLocalPage.get();
              env = ps.envGlobalAndSession;

              org.hibernate.Query q = ~e:(e_HibSession()).createQuery("from ApplicationContextProperty");
              java.util.List<ApplicationContextProperty> res = q.list();

              bstm3*
              bstm1*
              bstm2*

              org.hibernate.Query q2 = ~e:(e_HibSession()).createQuery("from ApplicationContextProperty");
              java.util.List<ApplicationContextProperty> results = q2.list();
              for(ApplicationContextProperty a : results)
              {
                bstm4*
              }

              hibSession = null;
              utils.ThreadLocalOut.popChecked(out);
              out = null;
              globalvarsChecked = true;
          }
        }

        ~*[initvars]
      }
    ]|
    //where not([] := <bagof-AllGlobalVars>) // fails if there are no global vars, wont generate anything then
    with  cbds* := <map({\ 
                           GlobalVarDeclInit(x, srt, e) -> 
                           class-body-dec*|[ 
                             //private static t x = null;
                             private static java.util.UUID x#id = null;
                              
                             public static x_class get#x(org.hibernate.Session hibSession)
                             {
                                 t x = (x_class) hibSession.load(x_class.class, x#id);
                                 return x;
                             }
                              
                           ]| 
                           with  t := <java-type> srt
                               ; SimpleSort(typename) := srt
                               ; x_class := <java-type-name> srt
                               //; x_type := "java.util.UUID"
                               //; x_conversionmethod := "fromString"                                   
                       \});concat> 
                       <bagof-AllGlobalVars <+ ![]>
        ; vardeclinits := <bagof-AllGlobalVars <+ ![]>
        // persist right away to get an id
        ; bstm3* := <map(vardeclinit-to-persist-statement-java-servlet <+ pp-aterm(!"vardeclinit-to-persist-statement-java-servlet: ");fail);concat-with-sublists> vardeclinits
        //update with assignments
        ; bstm1* := <map(vardeclinit-to-method-call-java-servlet <+ pp-aterm(!"vardeclinit-to-method-call-java-servlet: ");fail)> vardeclinits
        //persist updates
        ; bstm2* := <map(vardeclinit-to-method-persist-call-java-servlet <+ pp-aterm(!"vardeclinit-to-method-persist-call-java-servlet: ");fail)> vardeclinits
        ; bstm4* := <map(vardeclinit-to-id-load <+ pp-aterm(!"vardeclinit-to-id-load: ");fail)> vardeclinits
        ; cbds1* := <map(vardeclinit-to-method-java-servlet <+ pp-aterm(!"vardeclinit-to-method-java-servlet: ");fail); concat-with-sublists> vardeclinits
        ; bstm_initobjects* := <map(vardeclinit-to-init-object-java)> vardeclinits
        ; initvars := <generate-global-var-initializer-method>
 
  vardeclinit-to-init-object-java :
    vdi@GlobalVarDeclInit(x_ident,srt@SimpleSort(x_class), e) -> 
    bstm|[ x_ident = x_t._static_createEmpty_(); ]|
    with  x_t := <java-type-name> srt

  vardeclinit-to-persist-statement-java-servlet:
    vdi@GlobalVarDeclInit(x_ident,SimpleSort(x_class),exps) -> resultwrapped
    with  result := 
          bstm* |[ 
            //hibSession.save(x_ident); no longer necessary here because of generated UUID for keys
            env.putGlobalVariable("~x_ident",x_ident); //necessary for set/list creations in globals which use globals
          ]| 
        ; resultwrapped := 
          bstm |[
            if(!applicationContextPropertyExists("~x_ident",res)){
              ~*result
            }
          ]|                 

  vardeclinit-to-id-load:
    vdi@GlobalVarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(a.getName().equals("~x_ident"))
      {
        x_ident#id = a.getDatabaseId();
      }  
    ]|

  vardeclinit-to-method-call-java-servlet:
    vdi@GlobalVarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(!applicationContextPropertyExists("~x_ident",res))  
        globalDeclaration#x_ident(); 
    ]|

  vardeclinit-to-method-persist-call-java-servlet:
    vdi@GlobalVarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[ 
      if(!applicationContextPropertyExists("~x_ident",res))
        globalDeclaration#x_ident#Persist(); 
    ]|

  vardeclinit-to-method-java-servlet:
    vdi@GlobalVarDeclInit(x_ident,srt@SimpleSort(x_class), e) ->
      class-body-dec* |[
        private static t x_ident = null;

        private static void globalDeclaration#x_ident() {
          try {
            x_ident = e_vardeclinit;
          }
          catch(Exception iea) {
            throw new RuntimeException("Catched in globalDeclaration: ",iea);
          }
        }

        private static void globalDeclaration#x_ident#Persist() {
          ~e:(e_HibSession()).save(x_ident);
          ApplicationContextProperty x_acpident = new ApplicationContextProperty();
          x_acpident.setName("~x_ident");
          x_acpident.setDatabaseId(x_ident.getId());
          ~e:(e_HibSession()).save(x_acpident);
          utils.GlobalVariables.x_ident#id = x_acpident.getDatabaseId();
          
          //set version property to 1, which indicates a persisted entity
          x_ident.setVersion(1);
          ~e:(e_HibSession()).flush();

          x_ident = null;
        }
  ]|
  with  x_acpident := <newname-webdsl> "id"
      ; t := <defined-java-type> srt
      ; x_t := <java-type-name> srt
      ; e_vardeclinit := <expression-to-java-servlet> e
        
rules
  
  generate-global-var-initializer-method = 
    bstm* := <map(generate-global-var-initializer); concat> <bagof-AllGlobalVars>
    ; !|[
        public static boolean initGlobalVars(org.webdsl.lang.Environment env, org.hibernate.Session hibSession) {
          bstm*
          return true;
        }
      ]|

  generate-global-var-initializer :
    GlobalVarDeclInit(x, srt, e) -> bstm*|[ 
      env.putGlobalVariable("~x", utils.GlobalVariables.get#x(~e:(e_HibSession()))); 
      if(env.getGlobalVariable("~x") == null) {
        ~e:(e_HibSession()).getTransaction().commit();
        return false;
      }
    ]| 
