module org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  libstratego-lib
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/template-render
  org/webdsl/dsl/to-java-servlet/template-ref-arguments
  org/webdsl/dsl/to-java-servlet/uicomponents/attributes
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/hibernate-util
  org/webdsl/dsl/to-java-servlet/optimization

// control flow page elements   : for, if, templatecall

rules // iteration

  for-loop-counter-wrap-code:
    bstm* -> result
    with  if <?[]> bstm*
          then result :=  []
          else result :=  bstm*|[
                            ident = "";
                            if(inForLoop) {
                              ident += forelementcounter;
                            }
                            bstm*
                          ]| end

  //wraps expression that starts with ident
  for-loop-counter-wrap-code-expr:
    e1 -> e |[((inForLoop?forelementcounter:"") + e1 ) ]|


  wrap-in-for-loop(|x,t,e) :
    bstm -> res
    with  x_i := <newname-webdsl> "i"
        ; res := <wrap-in-for-loop(|x_i,x,t,e)> bstm

  wrap-in-for-loop(|x_i,x,t,e) :
    bstm ->
    bstm* |[
      Object[] x_array = e.toArray(); // need to iterate set too without iterator, this copied array also makes sure a remove on the collection doesn't cause skipped elements
      for(int x_i = 0; x_i < x_array.length; x_i++)
      {
        t x = (x_argtype) x_array[x_i];
        bstm*
      }
    ]|
    with  x_array := <newname-webdsl> "array"
        ; x_argtype := <pp-java5-to-string> t
        ; if <is-list> bstm
          then bstm* := bstm
          else bstm* := [bstm] end

  element-to-java-servlet =
    control-flow-for(elements-to-java-servlet|)

  control-flow-for(s|) :
     ForCount(x, e1, e2, elems, sep) -> result
     with  x_bound := <newname-webdsl> "stop"
         ; e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2
         ; bstm* := <s;concat-with-sublists> elems
         ; x_separatorindex := <newname-webdsl> "separatorindex"
         ; x_delta := <newname-webdsl> "delta"
         ; if <?[]> bstm*
           then result :=  []
           else result :=  bstm*|[
                           {
                             inForLoop = true;
                             forLoopCounter++;
                             int x = e3; //x has been renamed already
                             int x_bound = e4;
                             int x_separatorindex = 0;
                             int x_delta = (x < x_bound? 1 : -1);
                             while(x != x_bound) {
                               forelementcounter = Integer.toString(++fallbackcounter);
                               ~*<control-flow-for-separator(s|sep, x_separatorindex)> bstm*|[
                                 threadLocalPageCached.enterTemplateContext(forelementcounter);
                                 bstm*
                                 ~*<!bstm*|[ threadLocalPageCached.leaveTemplateContext(); ]|
                                    ;if-debug(!bstm*|[ threadLocalPageCached.leaveTemplateContextChecked(forelementcounter); ]|)>
                               ]|
                               x += x_delta;
                             }
                             forLoopCounter--;
                             if(forLoopCounter == 0){
                               inForLoop = false;
                               forelementcounter = "0";
                               fallbackcounter = 0;
                             }
                           }
                           ]| end

  control-flow-for(s|) :
    For(x, srt, e1, fltr, elems, sep){anno*} -> result
    where <not(?TemplateVarArgSortInner(_))> srt
    with  bstm* := <s;concat-with-sublists> elems
        ; e2 := <expression-to-java-servlet> e1
        ; t := <java-type> srt
        ; reft := t
        ; x_list := <newname-webdsl> "list"
        ; x_expr := <newname-webdsl> "expr"
        ; GenericSort(x_setorlist,[_]) := <get-type-anno> e1
        ; prefetch := <get-prefetch-for(|x)> elems
        ; e_joins := <get-direct-fetches> prefetch
        ; (bstm_enable*, bstm_disable*) := <try-get-prefetch-where; try-get-query-condition-filter; (if-optimization-enabled,if-optimization-enabled)> prefetch
        ; e_expr := <is-guided-batching-joins < !expr |[ utils.QueryOptimization.prefetchCollection(~e:(e_HibSession()), x_expr, e_joins) ]| + !expr|[x_expr]|>
        ; (bstm_early*, bstm_batch*) := <get-for-loop-prefetch(|e_HibSession(), x_list, srt) <+ !([], [])> prefetch
        ; if <?[]> bstm*
          then result :=  []
          else bstm_initcode* := 
          	     bstm* |[
                   java.util.Collection<? extends reft> x_expr = e2; // e2 is executed before bstm_enable*, because e_expr may be a function call and the filter should not be applied to every fetch of type t in such a function, but only on the returned collection
                   bstm_enable*
                   java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e_expr);
                   bstm_disable*
                   bstm_early*
                 ]|
             ; result := <control-flow-for-common(s | x_list, x, srt, t, fltr, sep, bstm_batch*, anno*, bstm_initcode*)> bstm* 
          end

  // template var arg
  control-flow-for(s|) :
    For(x, TemplateVarArgSortInner(_), e1, fltr, elems, sep){anno*} -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; e2 := <expression-to-java-servlet> e1
        ; srt := TemplateVarArgSort([])
        ; t := <java-type> srt
        ; t_inner := type|[ Object[] ]|
        ; reft := t
        ; x_list := <newname-webdsl> "list"
        ; if <?[]> bstm*
          then result :=  []
          else bstm_initcode* := 
          	     bstm* |[
          	       t x_list = e2;
          	     ]|
          	 ; result := <control-flow-for-common(s | x_list, x, srt, t_inner, fltr, sep, [], anno*, bstm_initcode*)> bstm* 
          end

  get-for-loop-prefetch(|e_LocalHibSession, x_list, srt) :
    prefetch{anno*} -> (bstm_early*, bstm_batch*)
    where
      if <fetch-elem(?PrefetchForName(x_name))> anno* then
        bstm_early* := bstm* |[ x_name(x_list, true); ]|
        ; bstm_batch* := bstm* |[ x_name(x_list, false); ]|
      else
        bstm_early* := <is-guided-batching < (get-early-batch-fetches(|e_LocalHibSession, x_list, srt) <+ ![]) + ![]> prefetch
        ; bstm_batch* := <get-batch-fetches(|e_LocalHibSession, x_list, srt) < try(is-at-arguments; ![]) + ![]> prefetch
      end

  get-for-all-loop-prefetch(|e_LocalHibSession, x_list, srt) :
    prefetch{anno*} -> (bstm_early*, bstm_batch*)
    where
      if <fetch-elem(?PrefetchForName(x_name))> anno* then
        bstm_early* := bstm* |[ x_name(x_list, true); ]|
        ; bstm_batch* := bstm* |[ x_name(x_list, false); ]|
      else
        bstm_early* := <is-guided-batching < (get-early-batch-fetches(|e_LocalHibSession, x_list, srt) <+ ![]) + ![]> prefetch
        ; bstm_batch* := <(is-guided-batching-no-joins < get-batch-fetches(|e_LocalHibSession, x_list, srt) + get-generic-batch-fetches(|e_LocalHibSession, x_list, srt)) <+ ![]> prefetch
      end

  control-flow-for(s|) :
    fa@ForAll(x, srt, fltr, elems, sep){anno*} -> result
    with  bstm*   := <s;concat-with-sublists> elems
        ; t       := <java-type> srt
        ; x_list := <newname-webdsl> "list"
        ; prefetch := <get-prefetch-for(|x)> elems
        ; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr, prefetch)
        ; (bstm_early*, bstm_batch*) := <get-for-all-loop-prefetch(|e_HibSession(), x_list, srt) <+ !([], [])> prefetch
        ; if <?[]> bstm*
          then result :=  []
          else bstm_initcode* := 
          	     bstm* |[
                   java.util.List<t> x_list = e_criteria.list();
                   bstm_early*
                 ]|
             ; result := <control-flow-for-common(s | x_list, x, srt, t, fltr, sep, bstm_batch*, anno*, bstm_initcode*)> bstm*
          end

  control-flow-for-common(s | x_list, x, srt, t, fltr, sep, bstm_batch*, anno*, bstm_initcode*) :
    bstm* ->
    bstm* |[
      inForLoop = true;
      forLoopCounter++;
      int x_separatorindex = 0;
      bstm_cachecontrolflow*
      ~*<control-flow-for-separator(s|sep, x_separatorindex)
         ;wrap-in-for-loop(|x,t,expr|[ x_forcol ]|)>
        bstm* |[
          fallbackcounter += 1;
          if(org.webdsl.WebDSLEntity.class.isInstance(x)) {
             org.webdsl.WebDSLEntity x_ent = ((org.webdsl.WebDSLEntity) ((Object) x));
             forelementcounter = (x_ent.getVersion() == 0
               ? Integer.toString(fallbackcounter)
               : utils.UUIDUserType.persistUUIDString(x_ent.getId()));
          }
          else
            forelementcounter = Integer.toString(fallbackcounter);
          threadLocalPageCached.enterTemplateContext(forelementcounter);
          bstm*
          ~*<!bstm*|[ threadLocalPageCached.leaveTemplateContext(); ]|
             ;if-debug(!bstm*|[ threadLocalPageCached.leaveTemplateContextChecked(forelementcounter); ]|)>
        ]|
      forLoopCounter--;
      if(forLoopCounter == 0){
        inForLoop = false;
        forelementcounter = "0";
        fallbackcounter = 0;
      }
    ]|
    with  bstm_order* := <for-filter-by-code(|x, srt, t, x_list)> fltr
        ; x_separatorindex := <newname-webdsl> "separatorindex"
        ; x_ent := <newname-webdsl> "temp"
        ; x_forcol := <newname-webdsl> "forcol"
        ; bstm_initcf* := [ bstm_initcode*, bstm_order*, bstm_batch* ]
        ; bstm_cachecontrolflow* := <cache-control-flow(|expr|[ x_list ]|, x_forcol, java:type|[ java.util.List<t> ]|, anno*, bstm_initcf*)>

  control-flow-for-separator(s|sep, x_separatorindex) :
    bstm* -> bstm*
    where None() := sep

  control-flow-for-separator(s|sep, x_separatorindex) :
    bstm* -> result
    where ForSeparator(elems) := sep
    with  bstm2* := <s;concat-with-sublists> elems
        ; if <?[]> bstm*
          then result :=  []
          else result :=  bstm* |[
                              if(x_separatorindex > 0) {
                                bstm2* // place separator if there was an element before this one
                              }
                              bstm*
                              x_separatorindex++;
                          ]| end

rules // control flow caching

  cache-control-flow(|e1, x_var, t, anno*, bstm_initcf*) =
  	with( x_type := <java-type-to-java-name> t 
  	    ; x_ident := <get-controlflownumber-from-anno> anno*)
  ; !bstm* |[ 
      t x_var = null;
      if( RENDER_PHASE == phase || (x_var = (x_type) getTemplatecalls().get("~x_ident" + forelementcounter)) == null ){
        bstm_initcf*
        x_var = e1;
	    if( RENDER_PHASE != phase ){  
	      getTemplatecalls().put("~x_ident" + forelementcounter, x_var);
        }
      }
    ]|

rules // if

  element-to-java-servlet =
    control-flow-if(elements-to-java-servlet|)

  control-flow-if(s|) :
    IfTempl(e, elems, elems2){anno*} -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; bstm2* := <s;concat-with-sublists> elems2
        ; e1 := <expression-to-java-servlet> e
        ; x_if := <newname-webdsl> "if"
        ; if <?([],[])> (bstm*,bstm2*)
          then result :=  []
          else bstm_cachecontrolflow* := <cache-control-flow(|e1, x_if, java:type|[ Boolean ]|, anno*, [])>
          	 ; if <?[]> bstm2*
               then result :=
                 bstm* |[
                   bstm_cachecontrolflow*
                   if( x_if ){
                     bstm*
                   }
                 ]|
               else result :=
                 bstm* |[
                   bstm_cachecontrolflow*
                   if( x_if ){
                     bstm*
                   }
                   else{
                     bstm2*
                   }
                 ]|
               end
          end

rules //templatecall

  element-to-java-servlet = control-flow-tcall

  control-flow-tcall :
    tc@TemplateCall(x_name, args, passign*, _) -> bstm*
    where <get-anno(?CallToDefinedAnno())> tc
    with  bstm* := <control-flow-tcall-defined-template> tc

  control-flow-tcall-defined-template :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> result
    with  // translate (ref) args
          calledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
        ; e_argswithref* := <handle-ref-arg> (calledTemplateArgs, args)
          // call common templatecall translation
        ; java_tname := expr|["~x_name"]|
        ; java_args := <optimize-empty-array> e_argswithref*
        ; result := <control-flow-tcall-helper(|[],java_tname,java_args,[],java_tname)> tc //last argument, parentname, is current template in this case

  /**
   *  Used for call to defined template and call to required template.
   */
  control-flow-tcall-helper(|bstm_cachedlookup*, java_tname,java_args,java_attrsmap,parentname) :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> bstm* |[  bstm_result* ]|
    with  //
          tname := <<fetch-elem(?PropertyAssignment("templateContext",<id>))> passign* <+ <get-templatecallnumber> tc> // either the static tcallname, e.g. tcall12, or attribute templateContext (e.g. elements[templateContext=tc] used for label implementation)
        ; e_withcallsmap := <control-flow-emit-with-calls-map> (passign*,expr|[ new org.webdsl.lang.Environment(env) ]|)
        ; attrsmap := <if <?[]> java_attrsmap then <control-flow-emit-attrs-calls-map> passign* else !java_attrsmap end>
        ; java_args_addedlocalargs := <add-extra-arg-for-local-redefinition> (java_args, java_tname)
        // create template call
        ; bstm_result* := <generate-template-call> (
            tc,
            bstm_cachedlookup*,
            java_tname,
            tname,
            java_args_addedlocalargs,
            e_withcallsmap,
            attrsmap,
            parentname
            )

  /**
   *  make implicit template arguments explicit, add the closure of a locally redefined template (retrieved from Environment class)
   *  add extra arg for local redefinitions, if any
   */
  add-extra-arg-for-local-redefinition :
    (e, e_name) -> java:expr |[ env.addExtraLocalTemplateArgumentsToArguments(e,e_name) ]|

  /**
   *  'elements' call
   *
   *  'with/requires' templatecall for element in with { } arguments (derived from ArgDef constructor),
   *  stored in TemplateCall with only part of the needed arguments, the closure at the call
   *
   *  e_env is the expression that creates the Environment being extended
   *
   *  the result of this rule is an expression that wraps java-exp-for-env with chained calls to putWithcall
   */
  control-flow-emit-with-calls-map :
    (passign*,e_env) -> exp
    with filtered := <filter(control-flow-emit-with-calls-filter)> passign*
       ; exp := <foldl(control-flow-emit-with-calls-fold-helper)> (filtered,e_env)

  control-flow-emit-with-calls-filter:
    t@TemplateCall(_,_,passigns,_) -> t
    where <fetch(?ResolvedRequireKey(origname))> passigns

  control-flow-emit-with-calls-fold-helper :
    (TemplateCall(templname,vars,passigns,_){anno*},e_env) -> result
    where not(<?"elementsempty"> templname)
    where <fetch(?ResolvedRequireKey(origname))> passigns
    with templateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
    with //could be that not all args are specified, only implicit args are available at this point
         varslength := <length> vars
       ; selectedTemplateArgs := <reverse;take(|varslength);reverse> templateArgs
       ; e_args := <handle-ref-arg; optimize-empty-array> (selectedTemplateArgs, vars)
       ; if <fetch(?NoEnclosingDefine() <+ ?InlineSingleElementCall())> anno*
         then result := java:expr|[ e_env.putWithcall("~origname", new utils.TemplateCall("~templname", utils.TemplateCall.SkipElementsMarker, e_args, utils.TemplateCall.EmptyAttrs)) ]|
         else result := java:expr|[ e_env.putWithcall("~origname", new utils.TemplateCall("~templname", getElementsContext(), e_args, attrs)) ]|
         end

  control-flow-emit-with-calls-fold-helper :
    (TemplateCall(templname,vars,passigns,_){anno*},e_env) -> result
    where <?"elementsempty"> templname
    where <fetch(?ResolvedRequireKey(origname))> passigns
    with  result := java:expr|[ e_env.putWithcall("~origname", utils.TemplateCall.EmptyElementsCall) ]|

  /**
   * tc : the TemplateCall term
   * bstm_cachedlookup* : an optional java statement that caches the template class lookup
   * e_name : unique template name for lookup in hashmaps - Java expression with type String
   * tname : template call number used in templateContext - Stratego string or WebDSL expression with type TemplateContext to change the templateContext for this call entirely
   * e : regular template arguments, including closure of local template redefinition if applicable - Java Object[]
   * e_withcallsmap : expression that adds 'with' arguments and 'elements' template argument to withcallsmap in newenv - Java exp
   * bstm_attrs* : attributes, arguments between [] - Java bstm*
   */
  generate-template-call :
    (tc{anno*}, bstm_cachedlookup*, e_name, x_tcallid, e, e_withcallsmap, bstm_attrs*, e_parentname) ->
    bstm* |[
      try{
        ~bstm*:bstm_cachedlookup*
        ~bstm*:bstm_attrs1*
        handleTemplateCall(phase, inForLoop, forelementcounter, e_tcallid, e_name, e, e_withcallsmap, e_parentname, e_attrs);
      }
      catch(RuntimeException ex){
        printTemplateCallException(ex, e_tcerrormessage);
      }
    ]|
    with  if <is-string> x_tcallid
          then e_tcallid := java:expr|["~x_tcallid"]|
          else e_tcallid := <expression-to-java-servlet> x_tcallid end
    with  e_tcerrormessage := <template-call-to-java-string> tc
    with  if <?bstm*|[ java.util.Map<String,String> attrsmapout = utils.TemplateCall.EmptyAttrs; ]|> bstm_attrs*
          then bstm_attrs1* := []
             ; e_attrs := java:expr|[ utils.TemplateCall.EmptyAttrs ]|
          else bstm_attrs1* := bstm_attrs*
             ; e_attrs := java:expr|[ attrsmapout ]|
          end

  template-call-to-java-string:
    tc@TemplateCall(name,args, _, _) -> java:expr|[ "~x_result" ]|
    with  x_name := <where(is-string) <+ ?QualifiedElementsCall(<<concat-strings> [<id>".elements"]>)> name  // regular call or 'templatename.elements'
        ; arg_dump := <alltd(get-original-name);map(pp-webdsl-to-string);separate-by(|", ");concat-strings;explode-string;escape-chars;implode-string> args
        ; <get-anno(?PositionAnno(<string-replace(|"../",""); ?position>)) <+ position := ""> tc
        ; x_result := <concat-strings> [x_name,"(",arg_dump,")",<if ?"" then id else <concat-strings>[" at ",position] end> position]

/**
 *  Call to template passed as part of required templates
 *  Since the passed TemplateCall object only has the first part of the arguments, it is concatted with the
 *  actual arguments of the required template definition
 *
 *  'elements' call
 */
rules

  element-to-java-servlet = control-flow-tcall-required-template

  // 'requires'
  control-flow-tcall-required-template :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> result
    where <get-anno(?CallToRequiredAnno())> tc
    with  originalname := <get-original-name> x_name
        ; // translate (ref) args
          calledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
        ; e_argswithref* := <handle-ref-arg> (calledTemplateArgs, args)
        // call common templatecall translation
        ; java_tname := expr|[ env.getWithcall("~originalname").name ]|
        ; java_args:=  expr|[ org.webdsl.tools.Utils.concatArrays(~<optimize-empty-array> e_argswithref*, env.getWithcall("~originalname").args) ]|
        ; java_elementsarglookupname := java:expr|[ "~originalname" ]|
        ; result := <control-flow-tcall-helper(|[],java_tname,java_args,[],java_elementsarglookupname)> tc

  // 'elements'
  control-flow-tcall-required-template :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> result
    where e := <create-elements-call-name> x_name
    with  // call common templatecall translation
          x_elementscall := "elems"
        ; bstm_cachedlookup* := bstm*|[ utils.TemplateCall x_elementscall = env.getElementscall(e); ]|
        ; java_tname := expr|[ x_elementscall.name ]|
        ; java_args :=  expr|[ x_elementscall.args ]|
        ; java_attrbstm* :=  bstm*|[ java.util.Map<String,String> attrsmapout = x_elementscall.attrs; ]|
        ; result := <control-flow-tcall-helper(|bstm_cachedlookup*, java_tname, java_args, java_attrbstm*, java:expr|[ x_elementscall.parentName]|)> tc

  create-elements-call-name :
    x_name -> e
    where  <?"elements"> x_name
         ; e := java:expr|[ "elements#"+getElementsContext() ]|
       <+ <?QualifiedElementsCall(context)> x_name
         ; e := java:expr|[ "elements#"+"~context" ]|
