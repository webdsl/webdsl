module org/webdsl/dsl/to-java-servlet/types/timeinterval

imports
  libstrategolib
  libjava-front
  libwebdsl-front

rules // java type

  builtin-java-type :
    SimpleSort("TimeInterval") -> type|[ Long ]|

rules // Int literal

   expression-to-java-servlet :
     TimeInterval(ti*) -> val
     with val := <map(ti-to-ms); foldr(!expr|[ 0 ]|, \ (e1, e2) -> expr|[ e1 + e2 ]| \)> ti*

   ti-to-ms :
     Milliseconds(e) -> <expression-to-java-servlet> e

   ti-to-ms :
     Seconds(e1) -> expr|[ 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Minutes(e1) -> expr|[ 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Hours(e1) -> expr|[ 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Days(e1) -> expr|[ 24 * 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Weeks(e1) -> expr|[ 7 * 24 * 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

rules

   invoke-every-to-init :
    ie@InvokeEvery(e, ti) -> bstm*|[
      java.util.TimerTask x1 = new java.util.TimerTask() {
          public void run() {
            if(utils.GlobalVariables.globalvarsChecked && utils.GlobalInit.initChecked){
              org.hibernate.Session hibSession = null;
              try {
                org.webdsl.servlet.ServletState.scheduledTaskStarted( "~ppinvoke" );
                utils.AbstractPageServlet ps = new GlobalsPageServlet();
                utils.ThreadLocalPage.set(ps);
                ps.initRequestVars();
                hibSession = ~e:(e_HibSession());
                hibSession.beginTransaction();
                if(utils.GlobalVariables.initGlobalVars(ps.envGlobalAndSession, ~e:(e_HibSession()))) {
                  // ps.setHibSession(hibSession);
                  java.io.PrintWriter out = new java.io.PrintWriter(System.out);
                  utils.ThreadLocalOut.push(out);
                  e1;
                  ~e:(e_HibSession()).getTransaction().commit();
                  utils.ThreadLocalOut.popChecked(out);
                  ps.invalidatePageCacheIfNeeded();
                }
              } catch (Exception ex) {
                org.webdsl.logging.Logger.error("exception occurred while executing timed function: "+"~ppinvoke");
                org.webdsl.logging.Logger.error("exception message: "+ex.getMessage(), ex);
                ~e:(e_HibSession()).getTransaction().rollback();
              }
              finally {
                org.webdsl.servlet.ServletState.scheduledTaskEnded();
                utils.ThreadLocalPage.set(null);
              }
            }
          }
      };
      timer.schedule(x1, 0, e2);
    ]|
    with x1 := <newname-webdsl> "timer"
       ; e1 := <expression-to-java-servlet> e
       ; e2 := <expression-to-java-servlet> ti
       ; ppinvoke := <pp-webdsl-to-string; escape> ie
