module org/webdsl/dsl/to-java-servlet/types/image

imports
  libstrategolib
  libjava-front
  libwebdsl-front

rules // types

  builtin-java-type :
    SimpleSort("Image") -> type|[ utils.File ]|

  //used in entity generation
  //hibernate has a built-in mapping for java.sql.Blob
  type-specific-annotations :
    Property(x_prop, k, s, annos) -> <file-specific-annotations>
    where <?SimpleSort("Image")> s

rules

  java-servlet-element-id(|suffix) :
    tc@OutputImage(_,_,_){anno*} -> tc{ActionNumber(newid),anno*}
    where  newid := <newname-webdsl-suffix(|suffix)> "action"

rules

  element-to-java-servlet = ?OutputImage(_,_,_); element-databind-action-render(|<databind-phase-outputimage>, <action-phase-outputimage>, <render-phase-outputimage>)

  //for displaying images, modified action call is used, the src of the image needs to be a call to the page with the arguments that invoke a download action

  render-phase-outputimage :
    tc@OutputImage(ActionCall(name, args),passign*,elem*) ->
    bstm* |[
        out.print("<img alt=\"");
        bstm*
        out.print("\" src='"+threadLocalPageCached.getAbsoluteLocation()+"/"
                  + threadLocalPageCached.getActionTarget()
                  + "?"
                  + e_ident +"=1&"
                  + "~<action-call-with-get-param-name>"+"=1&"
                  + threadLocalPageCached.getFormIdent()+"=1&"
                  + threadLocalPageCached.getUrlQueryParams()
                  + "'");
        bstm_attr
        out.print("/>");
    ]|
    with  tcident := <get-actionnumber> tc
        ; bstm* := <elements-to-java-servlet> elem*
        ; e5 := <actual-action-args-to-state-enc> args
        ; bstm_attr := <to-html-attrs-include-collection(|"outputimage")> passign*
        ; e_ident := <for-loop-counter-wrap-code-expr> java:expr|["~tcident"+e5]|

  action-phase-outputimage :
    tc@OutputImage(call@ActionCall(x_action, args),passign*,elem*) ->
    <for-loop-counter-wrap-code>
    bstm*|[
        ident += "~tcident"+e5;
        if(threadLocalPageCached.getParammap().get(ident)!=null)
        {
            ~<generate-submit-action-run-invoke(| x_action, e*)>
        }
    ]|
    with  tcident := <get-actionnumber> tc
        ; <get-anno(?ActionFargAnno(fargcalled))> call
        ; e* := <action-args-to-java-exp-list(|args,fargcalled)>
        ; e5 := <actual-action-args-to-state-enc> args

  //in first traversal, for input data binding, already register which action is executed, in order to know about ignore-validation
  //we need handle-actions traversal as well to get the right arguments for the action, which may depend on input data binding
  databind-phase-outputimage :
    tc@OutputImage(call@ActionCall(x_action, args),passign*,elem*) ->
    bstm*|[
        ident += "~tcident"+e5;
        if(threadLocalPageCached.getParammap().get(ident)!=null)
        {
            ~<generate-submit-action-databind-phase(| x_action)>
        }
    ]|
    with  tcident := <get-actionnumber> tc
        ; e5 := <actual-action-args-to-state-enc> args

rules //image download

// moved e.download() and e.fileName() to file.str
//   call-to-java-servlet :
//     exp|[ e.download() ]| -> java|[ utils.ThreadLocalPage.get().setDownload(e2) ]|
//     where SimpleSort("Image") := <get-type-anno> e
//     with  e2 := <expression-to-java-servlet> e
// 
//   call-to-java-servlet :
//     exp  |[ e.fileName() ]| -> java |[ e2.getFileName() ]|
//     where SimpleSort("Image") := <get-type-anno> e
//     with  e2 := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp  |[ e.resize(e_width, e_height) ]| -> java |[ utils.ImageSizeUtils.resizeImage(~e:(e_HibSession()), e2, e3, e4) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
       ;  e3 := <expression-to-java-servlet> e_width
       ;  e4 := <expression-to-java-servlet> e_height

  call-to-java-servlet :
    exp  |[ e.crop(e_x, e_y, e_width, e_height) ]| -> java |[ utils.ImageSizeUtils.cropImage(~e:(e_HibSession()), e2, e3, e4, e5, e6) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
       ;  e3 := <expression-to-java-servlet> e_x
       ;  e4 := <expression-to-java-servlet> e_y
       ;  e5 := <expression-to-java-servlet> e_width
       ;  e6 := <expression-to-java-servlet> e_height

  call-to-java-servlet :
    exp  |[ e.getWidth() ]| -> java |[ utils.ImageSizeUtils.getWidth(~e:(e_HibSession()), e2) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp  |[ e.getHeight() ]| -> java |[ utils.ImageSizeUtils.getHeight(~e:(e_HibSession()), e2) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp  |[ e.clone() ]| -> java |[ e2.makeClone() ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
