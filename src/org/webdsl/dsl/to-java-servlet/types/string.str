module org/webdsl/dsl/to-java-servlet/types/string

imports
  libstrategolib
  libjava-front
  libwebdsl-front

rules

  builtin-java-type :
    SimpleSort("String") -> type|[ String ]|

rules

  expression-to-java-servlet :
    String(x) -> expr|[ "~x'" ]|
    with  x' := <string-replace(|"\\~","~")> x

  expression-to-java-servlet = ?StringInterp(<string-interp-to-java-servlet>)

  string-interp-to-java-servlet =
    map( is-string; string-replace(|"\\~","~"); { ?x; !expr|[ "~x" ]| }
      <+ ?InterpExp(<!ExceptionIsEmptyString(<prepare-string-interp-expression-for-function-lifting>)>)
      <+ InterpTilde; !expr|[ "~" ]|
    )
  ; foldl(\(x,y) -> Plus(y,x)\ | expr|[ "" ]|)

rules
  // the var analysis for string interpolation expression exception handling is done on the WebDSL code and inserted in the generated Java fragment
  // the actual helper function gets generated when the Java classes are created in java-transformations/merge.str

  prepare-string-interp-expression-for-function-lifting =
    alltd({\ v@Var(x){anno*} -> ExceptionIsEmptyStringFunArg(x, v, t){anno*} where get-type-anno; not(?ClassSort(_)); java-type-name; ?t \})  // copy anno*, contains type anno which guides correct code generation in expression-to-java-servlet
  ; expression-to-java-servlet

  expression-to-java-servlet :
    ExceptionIsEmptyStringFunArg(x, v, t) -> ExceptionIsEmptyStringFunArg(x, <expression-to-java-servlet> v, t)

rules //native java operations

 call-to-java-servlet :
   exp |[ e.concat(e1) ]| -> java |[ utils.StringType.concatWithSeparator(e_list,e_sep)  ]|
   where <anno-list-string-type-compatible> e
   with  e_list   := <expression-to-java-servlet> e
       ; e_sep    := <expression-to-java-servlet> e1

 call-to-java-servlet :
   exp |[ e.concat() ]| -> java |[ utils.StringType.concat(e_list)  ]|
   where <anno-list-string-type-compatible> e
   with  e_list   := <expression-to-java-servlet> e

 call-to-java-servlet :
   exp  |[ log(e1) ]| ->   java |[ org.webdsl.logging.Logger.info(e2) ]|
   where <anno-string-type-compatible> e1
   with  e2 := <expression-to-java-servlet> e1

 call-to-java-servlet :
   exp  |[ log(e1) ]| ->   java |[ org.webdsl.logging.Logger.info(e2) ]|
   where not(<anno-string-type-compatible> e1)
   with  e2 := <expression-to-java-servlet> e1

 call-to-java-servlet :
   exp  |[ e1.toString() ]| -> java |[ String.valueOf(e2) ]|
   with  e2 := <expression-to-java-servlet> e1

