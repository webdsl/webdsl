module org/webdsl/dsl/to-java-servlet/java-page-arguments

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/java-page
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/request-param-conversion

rules // page arguments

  page-arg-generation-test =
    where(
      (JavaThisPage<+ThisTemplateName)
    ; not(InAction)
    //; not(InLocalRedefine) //avoid page code generation for Arg constructors in LocalRedefine
    )
    ; page-class-generation-test

  get-prefetch-for-page-argument = 
    ?x; JavaThisPagePrefetches; get-prefetch-for(|x); ?PrefetchFor(_, _, _, PrefetchChildren(_))

  generate-code-java-servlet-page-arg =
    page-arg-generation-test
  ; argument-to-java-servlet-property
  ; fail

  /**
   *  GenericSort -List and Set- page arguments
   */
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| ->
     <generate-java-servlet-partial> java|[
         @Partial
         protected void conversion(){
           if(parammap.get("~<get-original-name> x")!=null)
           {
             try{
                String[] ids = parammap.get("~<get-original-name> x").split(",");
                x_ids = e;
                for(String anid : ids){
                  x_ids.add(java.util.UUID.fromString(anid));
                }
             }
             catch(NumberFormatException nfe){org.webdsl.logging.Logger.error(nfe.getMessage());}
           }
         }

         @Partial
         void loadArguments() {
           bstm*
         }

         private t_idstype x_ids;

         private java.util.x1<t_class> x;
      ]|
      where <?GenericSort(x1,[x2])> srt
      with  <?SimpleSort(_)> x2
          ; t_class := <java-type> x2
          ; x_id := <concat-strings>[x, "_id"]
          ; t := SimpleSort("UUID")
          ; t_idstype := <builtin-java-type> GenericSort(x1,[t])
          ; e := <java-type-default-value> GenericSort(x1, [t])
          ; bstm* := <argument-to-java-servlet-initialization> arg
          ; x_ids := <concat-strings>[x,"_ids"]

  /**
   *  defined entities and Entity type page arguments
   */
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         }
       }
       @Partial
       void loadArguments() {
         bstm*
       }

       private t x_id;
       private t_class x;
    ]|
    where <has-entity-anno> srt
    with  <?SimpleSort(_)> srt
        ; t_class := <java-type> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; t := <java-type> SimpleSort("String")
        ; bstm* := <argument-to-java-servlet-initialization> arg
        ; bstm1* := <java-servlet-conversion-to-object> (t,x,x_id)

  /**
   *  Ref arg
   */
  argument-to-java-servlet-property :
    arg@Arg(x,srt@RefSort(_)){anno*} ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         }
       }
       @Partial
       void loadArguments() {
         bstm*
       }

       private t_string x_id;
       private t_refarg x;
    ]|
    with  x_id := <concat-strings>[x, "_id"]
        ; t_refarg := ClassOrInterfaceType(TypeName(Id("utils.RefArg")),None())
        ; t_string := ClassOrInterfaceType(TypeName(Id("String")),None())
        ; <fetch(?ArgNumber(argnum)) <+ <debug(!"ERROR: ArgNumber annotation missing on ref arg, required for back-end translation")> arg;fail> anno*
        ; bstm* := <argument-to-java-servlet-initialization-ref-arg(|argnum)> arg
        ; bstm1* := <java-servlet-conversion-to-object> (t_string,x,x_id)

  /**
   *  Built-in type page arguments
   */
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         }
       }
       @Partial
       void loadArguments() {
         bstm*
         //bstm2*
       }

       private t_Class x;
    ]|
    where t_Class := <builtin-java-type> srt
        ; not(GenericSort(_,_) := srt)
    with  <?SimpleSort(_)> srt
        ; bstm* := <argument-to-java-servlet-initialization> arg
        //; bstm2* := <string-argument-to-java-servlet-initialization <+ ![]> arg // fix for passing strings decode (eg. %20 -> ' ')
        ; bstm1* := <java-servlet-conversion-to-object> (t_Class,x,x)

  /**
   *  Native class type page arguments
   */
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         }
       }
       @Partial
       void loadArguments() {
         //bstm*
         //bstm2*
       }

       private t_Class x;
    ]|
    where t_Class := <native-class-java-type> srt
    with  <?SimpleSort(_)> srt
        ; bstm1* := <java-servlet-conversion-to-object-native> (t_Class,x,x)

rules //initialization

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_id != null) {
        x = (x_class) ~e:(e_HibSession()).load(x_class.class, java.util.UUID.fromString(x_id));
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; not(<get-entity-id-name-with-super> srt)
        ; not(is-at-arguments; <get-prefetch-for-page-argument> x)
    with  x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_id != null) {
        java.util.List<t> results = utils.QueryOptimization.addJoinsIfOptimizationEnabled(e_criteria, e_joins)
        .add( org.hibernate.criterion.Restrictions.idEq(java.util.UUID.fromString(x_id)) )
        .list();
        if(results.size() != 0){
          x = results.get(0);
        }
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; not(<get-entity-id-name-with-super> srt)
        ; is-at-arguments
        ; prefetch := <get-prefetch-for-page-argument> x
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; e_criteria := expr|[ ~e:(e_HibSession()).createCriteria(x_class.class) ]|
        ; e_joins := <get-direct-fetches> prefetch

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      x = utils.PageParamLoad.loadEntityFromParam(~e:(e_HibSession()),"~x_domain",x_id);
    ]|
    where SimpleSort("Entity") := srt
    with  x_id := <concat-strings>[x, "_id"]
        ; x_domain := <pp-java5-to-string> <DomainPackage>

  //ref arg
  argument-to-java-servlet-initialization-ref-arg(|argnum) :
    arg@Arg(x,srt@RefSort(_)) ->
    bstm*|[
      if (x_id != null) {
        String[] x_ar = x_id.split("!");
        String x_uuid = x_ar[0];
        String x_classname = x_ar[1];
        //String x_classnamesecondpart = x_ar[1];
        try{
          utils.RefArg x_rap = (utils.RefArg) utils.ThreadLocalPage.get().getRefArgClasses().get(x_classname).newInstance();
          //utils.RefArg x_rap = (utils.RefArg) utils.ThreadLocalPage.get().getRefArgClasses().get("~x_classnamefirstpart"+x_classnamesecondpart).newInstance();
          x_rap.load(x_uuid);
          x = x_rap;
        }
        catch(IllegalAccessException ie)
        {
          org.webdsl.logging.Logger.error("EXCEPTION",ie);
          throw new RuntimeException("IllegalAccessException during ref page arg load");
        }
        catch(InstantiationException ie)
        {
          org.webdsl.logging.Logger.error("EXCEPTION",ie);
          throw new RuntimeException("InstantiationException during ref page arg load");
        }
        catch(NullPointerException ie)
        {
          org.webdsl.logging.Logger.error("EXCEPTION",ie);
          throw new RuntimeException("NullPointerException during ref page arg load");
        }
      }
    ]|
    with  x_id := <concat-strings>[x, "_id"]
        //; x_classnamefirstpart := <gen-page-ref-arg-class-name-first-part> (<ThisTemplateName>,argnum)
        ; x_ar := <newname-webdsl> "array"
        ; x_rap := <newname-webdsl> "rap"
        ; x_uuid := <newname-webdsl> "uuid"
        //; x_classnamesecondpart := <newname-webdsl> "callnum"
        ; x_classname := <newname-webdsl> "refargclass"

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_id != null) {
        //filtering must be done earlier, page arg could be hidden input in post as well //utils.URLFilter.unfilter(x_id.toString());
        java.util.List<t> results = ~e:(e_HibSession()).createCriteria( x_class.class )
        .add( org.hibernate.criterion.Restrictions.naturalId().set("~x_natidprop", x_id))
        .list();
        if(results.size() == 0){
          // org.webdsl.logging.Logger.error("No entity with this identity found: "+x_id);
          throw new utils.EntityNotFoundException(x_id);
        }
        else if(results.size() > 1){
          org.webdsl.logging.Logger.error("Multiple entities with this identity found: "+x_id) ;
          throw new RuntimeException("Multiple entities with this identity found: "+x_id);
          //x = results.get(0);
        }
        else {
          x = results.get(0);
        }
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; x_natidprop := <concat-strings>["_",<get-entity-id-name-with-super> srt]
        ; not(is-at-arguments; <get-prefetch-for-page-argument> x)
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_id != null) {
        //filtering must be done earlier, page arg could be hidden input in post as well //utils.URLFilter.unfilter(x_id.toString());
        java.util.List<t> results = utils.QueryOptimization.addJoinsIfOptimizationEnabled(e_criteria, e_joins)
        .add( org.hibernate.criterion.Restrictions.naturalId().set("~x_natidprop", x_id))
        .list();
        if(results.size() == 0){
          // org.webdsl.logging.Logger.error("No entity with this identity found: "+x_id);
          throw new utils.EntityNotFoundException(x_id);
        }
        else if(results.size() > 1){
          org.webdsl.logging.Logger.error("Multiple entities with this identity found: "+x_id) ;
          throw new RuntimeException("Multiple entities with this identity found: "+x_id);
          //x = results.get(0);
        }
        else {
          x = results.get(0);
        }
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; is-at-arguments
        ; prefetch := <get-prefetch-for-page-argument> x
        ; x_natidprop := <concat-strings>["_",<get-entity-id-name-with-super> srt]
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; e_criteria := expr|[ ~e:(e_HibSession()).createCriteria(x_class.class) ]|
        ; e_joins := <get-direct-fetches> prefetch

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_ids == null) {
         //x_ids = new x3();
      }
      else {
        if (x == null) {
          x = e;
          for(java.util.UUID anid: x_ids) {
            x.add((x_class) ~e:(e_HibSession()).load(x_class.class, anid));
          }
        }
      }
    ]|
    where <?GenericSort(x1,[x2])> srt
        ; <defined-java-type> x2
    with  <?SimpleSort(x_Class)> x2
        ; e :=    <java-type-default-value> srt
        ; x_ids := <concat-strings>[x, "_ids"]
        ; x_class := <java-type-name> x2

  argument-to-java-servlet-initialization : //@TODO List arguments with builtin types, eg. list of strings
    arg@farg|[ x : srt ]| ->
    bstm*|[]|
    where <?GenericSort(x1,[x2])> srt; <builtin-java-type> x2

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
          if (x == null) {
            x = e_init;
          }
    ]|
    where <builtin-java-type> srt
    with  <?SimpleSort(x_Class)> srt
        ; e_init := <java-type-default-value> srt
       // ; rules( Parameter :+= x )

  string-argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      //filtering must be done earlier, page arg could be hidden input in post as well //utils.URLFilter.unfilter(x);
    ]|
    where <builtin-java-type> srt
        ; <?SimpleSort("String")> srt


  /**
   *  @TODO part below needs refactoring, only the value is different in each case
   */

  //hiddens for form
  generate-code-java-servlet-page-arg =
    page-arg-generation-test
  ; form-hidden-page-params-java-servlet
  ; fail

  form-hidden-page-params-java-servlet :
    Arg(x_ident, s) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void hiddenParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams
         .append("<input type=\"hidden\" name=\"")
         .append("~<get-original-name> x_ident")
         .append("\" value=\"")
         .append(utils.HTMLFilter.filter(x_ident.toString()))
         .append("\" />");
      }
    ]|
    where <builtin-java-type> s
        ; not( GenericSort(_,_) := s)
        ; not(<?RefSort(_)> s)

  form-hidden-page-params-java-servlet :
    Arg(x, s) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void hiddenParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams
         .append("<input type=\"hidden\" name=\"")
         .append("~<get-original-name> x")
         .append("\" value=\"")
         .append(utils.HTMLFilter.filter(x.getNaturalId().toString()))
         .append("\" />");
      }
    ]|
    where <defined-java-type> s
        ; not(<?RefSort(_)> s)

  form-hidden-page-params-java-servlet :
    Arg(x, srt) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void hiddenParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams.append("<input type=\"hidden\" name=\"")
         .append("~<get-original-name> x")
         .append("\" value=\"")
         .append(utils.HTMLFilter.filter(org.webdsl.tools.Utils.encodeIdList(x)))
         .append("\" />");
      }
    ]|
    where GenericSort(_,[s]) := srt
        ; <defined-java-type> s

  form-hidden-page-params-java-servlet :
    Arg(x, srt) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void hiddenParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams.append("<input type=\"hidden\" name=\"")
         .append("~<get-original-name> x")
         .append("\" value=\"")
         .append(utils.HTMLFilter.filter(x.getUrlString()))
         .append("\" />");
      }
    ]|
    where RefSort(_) := srt

  generate-code-java-servlet-page-arg =
    page-arg-generation-test
  ; form-post-page-params-java-servlet
  ; fail

  form-post-page-params-java-servlet :
    Arg(x_ident, s) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void urlQueryParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams.append("~<get-original-name> x_ident").append("=").append(utils.HTMLFilter.filter(utils.URLFilter.filter(x_ident.toString()))).append("&");
      }
      @Partial
      public void hiddenPostParamsJson(java.lang.StringBuilder combinedparams)
      {
        //see http://stackoverflow.com/questions/97578/how-do-i-escape-a-string-inside-javascript-inside-an-onclick-handler
        combinedparams.append("{\"name\":\"")
         .append("~<get-original-name> x_ident")
         .append("\", \"value\":\"")
         .append(utils.HTMLFilter.filterEcmaWithinHTML(x_ident.toString() ))
         .append("\"},");
      }
    ]|
    where <builtin-java-type> s
        ; not( GenericSort(_,_) := s)
        ; not(<?RefSort(_)> s)

  form-post-page-params-java-servlet :
    Arg(x, s) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void urlQueryParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams.append("~<get-original-name> x").append("=").append(utils.URLFilter.paramMapToQueryParams(x.toParamMap())).append("&");
      }
      @Partial
      public void hiddenPostParamsJson(java.lang.StringBuilder combinedparams)
      {
        //parameter values are already html filtered, keys are expected to not contain html symbols
        combinedparams.append("{\"name\":\"")
         .append("~<get-original-name> x")
         .append("\", \"value\":\"")
         .append(utils.URLFilter.paramMapToPostParamsEncoding(x.toParamMap()))
         .append("\"},");
      }
    ]|
    where (<native-class-java-type> s)

  form-post-page-params-java-servlet :
    Arg(x, s) -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void urlQueryParams(java.lang.StringBuilder combinedparams)
      {
         combinedparams.append("~<get-original-name> x")
          .append("=")
          .append(utils.HTMLFilter.filter(x.getNaturalId().toString()))
          .append("&");
      }
      @Partial
      public void hiddenPostParamsJson(java.lang.StringBuilder combinedparams)
      {
        //ids dont need to be escaped for html
        combinedparams.append("{\"name\":\"")
         .append("~<get-original-name> x")
         .append("\", \"value\":\"")
         .append(org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript(x.getNaturalId().toString()))
         .append("\"},");
      }
    ]|
    where <defined-java-type> s
        ; not(<?RefSort(_)> s)

  form-post-page-params-java-servlet  :
    arg@farg|[ x_ident : srt ]| -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void urlQueryParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams.append("~<get-original-name> x_ident")
         .append("=")
         .append(utils.HTMLFilter.filter(org.webdsl.tools.Utils.encodeIdList(x_ident)))
         .append("&");
      }
      @Partial
      public void hiddenPostParamsJson(java.lang.StringBuilder combinedparams)
      {
        //ids dont need to be escaped for html
        combinedparams.append("{\"name\":\"")
         .append("~<get-original-name> x_ident")
         .append("\", \"value\":\"")
         .append(org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript(org.webdsl.tools.Utils.encodeIdList(x_ident)))
         .append("\"},");
      }
    ]|
    where <?GenericSort(_,[s])> srt
        ; <defined-java-type> s

  form-post-page-params-java-servlet :
    arg@farg|[ x_ident : srt ]| -> <generate-java-servlet-partial>
    java |[
      @Partial
      public void urlQueryParams(java.lang.StringBuilder combinedparams)
      {
        combinedparams.append("~<get-original-name> x_ident")
         .append("=")
         .append(utils.HTMLFilter.filter(x_ident.getUrlString()))
         .append("&");
      }
      @Partial
      public void hiddenPostParamsJson(java.lang.StringBuilder combinedparams)
      {
        //ids dont need to be escaped for html
        combinedparams.append("{\"name\":\"")
         .append("~<get-original-name> x_ident")
         .append("\", \"value\":\"" ).append( org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript(x_ident.getUrlString()))
         .append("\"},");
      }
    ]|
    where <?RefSort(_)> srt