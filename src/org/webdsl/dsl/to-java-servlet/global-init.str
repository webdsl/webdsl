module org/webdsl/dsl/to-java-servlet/global-init

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

rules

  generate-code-java-servlet-once =
    disable-code-generation-if-cache-exists
  ; generate-global-init-main-java-servlet-code
  ; fail

  generate-global-init-main-java-servlet-code : 
    _ -> <emit-java-code> compilation-unit|[
      package utils;

      @Partial
      @SuppressWarnings({"unused","unchecked"})
      public class GlobalInit {
        private static org.hibernate.Session hibSession;
        
        static boolean applicationContextPropertyExists(String name, java.util.List<ApplicationContextProperty> res){
          for(ApplicationContextProperty a : res){
            if(a.getName().equals(name))	
              return true;
          }
          return false;
        }

        static java.io.PrintWriter out;
        

        @Partial protected static void initialize(){}   
        
        private static org.webdsl.lang.Environment env; 
              
        @Partial public static void initActions(){}
        
        public static boolean initChecked = false;

        public static void forceLoad(){
          initChecked = false;
          load();
        }
        
        public static void load(){
          if(!initChecked){
              //assumes session already started a transaction
              hibSession = ~e:(e_HibSession());
              java.io.PrintWriter out = new java.io.PrintWriter(System.out);
              utils.ThreadLocalOut.push(out);

              utils.AbstractPageServlet ps = utils.ThreadLocalPage.get();
              env = ps.envGlobalAndSession;

              org.hibernate.Query q = ~e:(e_HibSession()).createQuery("from ApplicationContextProperty where name = '__global__init__'");
              java.util.List<ApplicationContextProperty> res = q.list();

              if(res.isEmpty())
              {
                initialize();
                initActions();

                ApplicationContextProperty flag = new ApplicationContextProperty();
                flag.setName("__global__init__");
                ~e:(e_HibSession()).save(flag);
              }
              ~e:(e_HibSession()).flush();
              utils.ThreadLocalOut.popChecked(out);

              out = null;
              hibSession = null;
              initChecked = true;
          }
        }
      }
    ]|
    with  <map(load-init-global-variables-cbds-helper)> <bagof-AllGlobalVars> 
    
  load-init-global-variables-cbds-helper :   
    GlobalVarDeclInit(x, srt, e) -> 
    <emit-java-code>
    compilation-unit|[
      package utils;
      @Partial
      public class GlobalInit {
        private static t x = null;
        @Partial protected static void initialize(){    
          x = utils.GlobalVariables.get#x(~e:(e_HibSession()));
          env.putGlobalVariable("~x", x);
        }
      }
    ]| 
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt

  generate-code-java-servlet-global-init =
    where(not(InFunction <+ JavaInEntity <+ JavaThisPage <+ ThisTemplateName)) 
  ; disable-code-generation-if-cache-exists
  ; generate-global-init-java-servlet-code

  generate-global-init-java-servlet-code :
    InitAction(Block(stat*)) ->
    <emit-java-code> compilation-unit|[
      package utils;
  
      @Partial
      public class GlobalInit {
        @Partial public static void initActions() {
          x_func();
        }
        
        public static void x_func() {
          bstm*
        }
      }
    ]|
    with  
    {| InAction :
         rules(InAction := <id>)
       ; x_func := <newname-webdsl> "_initAction_"
       ; bstm* := <statements-to-java-servlet> stat*
    |}