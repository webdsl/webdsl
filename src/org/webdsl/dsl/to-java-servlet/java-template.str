module org/webdsl/dsl/to-java-servlet/java-template

imports
  libstrategolib
  libwebdsl-front

imports
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  generate-java-servlet-template-partial =
    ? cbds
    //; where(not(ThisEmail)) also used for common parts in email
    ; with(
        pkgname    := <TemplatePackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code-local>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules

  generate-code-java-servlet-template =
    where(not(ThisEmail)); generate-java-servlet-template; fail

  generate-java-servlet-template :
    def@def |[ define mod* x(farg*) req* { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;

        import static utils.AbstractPageServlet.DATABIND_PHASE;
        import static utils.AbstractPageServlet.VALIDATE_PHASE;
        import static utils.AbstractPageServlet.ACTION_PHASE;
        import static utils.AbstractPageServlet.RENDER_PHASE;

        @Partial
        @SuppressWarnings("all")
        public class x_Page extends utils.TemplateServlet
        {
          ~*<replace-with-empty-list-if-empty(|bstm_prefetch*)> class-body-dec*|[
            public void prefetchFor(int i, java.util.Collection<? extends org.webdsl.WebDSLEntity> elems) {
              bstm_prefetch*
            }
          ]|

          ~*cbds_prefetch*

          ~*cbds_load-template-map-and-ref-arg-classes*
          public static org.webdsl.lang.Environment loadTemplateMap(String keyOverwrite, org.webdsl.lang.Environment staticEnv){
            staticEnv.putTemplate(keyOverwrite==null?"~x":keyOverwrite, x_Page.class);
            utils.AbstractPageServlet.loadLiftedTemplateMap(x_Page.class);
            return staticEnv;
          }

          ~*<replace-with-empty-list-if-empty(|bstm_arguments*,bstm_prefetchargs*)> class-body-dec*|[
            protected void storeArguments(Object[] args) {
              bstm_arguments*
              bstm_prefetchargs*
            }
          ]|

          public String getUniqueName() {
            return "~x";
          }

          public String getTemplateSignature(){
            return "~x_TemplateSig";
          }

          ~*<replace-with-empty-list-if-empty(|bstm_so*)> class-body-dec*|[
            protected void tryWriteSpanOpen(java.io.PrintWriter outtemp){
              bstm_so*
            }
          ]|

          ~*<replace-with-empty-list-if-empty(|bstm_sc*)> class-body-dec*|[
            protected void tryWriteSpanClose(java.io.PrintWriter outtemp){
              bstm_sc*
            }
          ]|

          ~*<replace-with-empty-list-if-empty(|bstm_localtplredefs*)> class-body-dec*|[
            protected void putLocalDefinesInEnv(){
              bstm_localtplredefs*
            }
          ]|

          ~*cbds_is-ajax-template*

          public String getElementsContext(){
            if(calledName==null){
            ~*<if <fetch(?TemplateDefineNameBeforeLifting(namebeforelift))> mod*
               then !bstm* |[ return "~namebeforelift"; ]|
               else !bstm* |[ return "~x"; ]|
               end>
             }
             else{
               return calledName;
             }
          }
        }
      ]|
    with pkgname    := <TemplatePackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_TemplateName := <get-original-name> x
       ; x_origDefinedName := <(fetch(?TemplateDefineNameBeforeLifting(name));!name) <+ !x_TemplateName> mod*
       ; x_TemplateSig := <concat-strings> [<JavaThisPage;!"page " <+ ThisAjaxTemplateName;!"ajaxtemplate " <+!"template ">,x_TemplateName,"(",<map(\Arg(nm,srt)->Arg(<get-original-name> nm,srt)\);pp-args> farg*,")"]
       ; if <fetch(?TemplateModSpan())> mod*; not(JavaThisPage) then //only add span to templates with 'span' modifier
            x_actualname := <newname-webdsl> "name"
          ; x_uniquename := <newname-webdsl> "uniqname"
          ; x_ltasname := <newname-webdsl> "ltas"
          ; bstm_so* := bstm* |[
              if(threadLocalPageCached.templateSpans()){
                String x_actualname = "~x_origDefinedName";
                String x_uniquename = "~x";
                utils.LocalTemplateArguments x_ltasname = env.getExtraLocalTemplateArguments(x_uniquename);
                if(x_ltasname != null){
                  x_uniquename = x_ltasname.spanNameUnique;
                }
                outtemp.write("<span id=\""+ x_uniquename + "\" class=\"scopediv "); //@TODO this could generate duplicate ids in resulting html
                if(x_uniquename.equals(x_actualname)){
                   outtemp.write(x_uniquename);
                }
                else{
                   outtemp.write(x_uniquename +" "+ x_actualname);
                }
                outtemp.write("\">");
              }
            ]|
          ; bstm_sc* := bstm* |[
              if(threadLocalPageCached.templateSpans()){
                outtemp.write("</span>");
              }
            ]|
          else
            bstm_so* := []
          ; bstm_sc* := []
          end
       ; (bstm_localtplredefs*, bstm_localtplredefclasses*, bstm_refarginlocaldef*) := <local-defined-templates-to-hashmap> elem*
       ; cbds_prefetch* := <collect(prefetch-for-to-function); flatten-list> elem*
       ; bstm_arguments* := <formal-arguments-to-store-statements> farg*
       ; bstm_prefetchargs* := <filter(formal-arguments-to-query-optimizations(|elem*)); flatten-list; if-optimization-enabled> farg*
       ; bstm_prefetch* := <add-indices; filter(prefetch-function-for-formal-argument(|elem*)); flatten-list; if-optimization-enabled> farg*
       ; if <fetch(AjaxTemplate)> mod*
         then cbds_is-ajax-template* := class-body-dec*|[
                protected boolean isAjaxTemplate(){
                  return true;
                }
              ]|
         else cbds_is-ajax-template* := [] end
       ; cbds_load-template-map-and-ref-arg-classes* := <load-template-map-and-ref-arg-classes> (bstm_refarginlocaldef*, def, bstm_localtplredefclasses*)

  replace-with-empty-list-if-empty(|list) = if where(<?[]> list) then ![] else id end
  replace-with-empty-list-if-empty(|list1,list2) = if where(<?[]> list1; <?[]> list2) then ![] else id end
  replace-with-empty-list-if-empty(|list1,list2,list3) = if where(<?[]> list1; <?[]> list2; <?[]> list3) then ![] else id end

  load-template-map-and-ref-arg-classes :
   (bstm_refarginlocaldef*, def, bstm_localtplredefclasses*) -> result
    with liftedtemplates := <extract-lifted-templates-from-template-def> def
      ; if [] := liftedtemplates
        then bstm_lifted* := []
           ; bstm_liftedrefarg* := []
        else bstm_lifted* := [ExprStm( <lifted-template-load-template-map-helper> (liftedtemplates, java:expr|[ staticEnv ]|) )]
           ; bstm_liftedrefarg* :=
               <map({\
                 TemplateCall(z,_,_,_) -> bstm |[ utils.AbstractPageServlet.loadRefArgClasses(z_value.class); ]| // the lifted template might have lifted elements itself, recursively call loadRefArgClasses
                 with  z_value := <TopLevelTemplateClassName> z
               \})> liftedtemplates
        end
      ; pagecallrefargclass* := <collect(?PageCall(_,<filter({?arg{anno*};<filter(?RefArgClassName(<id>));not([])> anno*})>);not([]));concat;concat> def // with arguments
      ; ajaxcallrefargclass* := <collect(?TemplateCall(_,<filter({?arg{anno*};<filter(?RefArgClassName(<id>));not([])> anno*})>,_,_);not([]));concat;concat> def // with arguments
      ; bstm_refargclasses* := <map({\
                           z -> bstm |[ refargclasses.put("~z", z_value); ]|
                           with  z_value := <concat-strings> [z,".class"]
                       \})>
                       [pagecallrefargclass*,ajaxcallrefargclass*]
      ; loadLiftedTemplateMap* :=
          <replace-with-empty-list-if-empty(|bstm_lifted*, bstm_localtplredefclasses*)> class-body-dec*|[
            public static void loadLiftedTemplateMap(org.webdsl.lang.Environment staticEnv){
              //template or email class itself is already added
              bstm_lifted*
              bstm_localtplredefclasses*
            }
          ]|
      ; loadRefArgClasses* :=
          <replace-with-empty-list-if-empty(|bstm_refargclasses*, bstm_liftedrefarg*, bstm_refarginlocaldef*)> class-body-dec*|[
            public static void loadRefArgClasses(java.util.Map<String, Class<?>> refargclasses){
              bstm_refargclasses*
              bstm_liftedrefarg*
              // in the ref arg class lookup map, a unique name is always used as key,
              // hence it does not need to go in the Environment class (that keeps a stack of local template overrides)
              // they are already loaded with the initial template load in java-base-page.str/PageServlet.java
              bstm_refarginlocaldef*
            }
          ]|
      ; result := [loadLiftedTemplateMap*,loadRefArgClasses*]

  extract-lifted-templates-from-template-def =
    collect-all( // collect-all because rendertemplate(TemplateCall) might be nested in templatecall arguments
                extract-lifted-templates-from-template-entityderive
             <+ extract-lifted-templates-from-template-def-elements
             <+ extract-lifted-templates-from-template-elements-exp
             )
  ; concat
  ; remove-all(?TemplateCall("elementsempty",_,_,_)) // elementsempty indicates no elements, no lookup entry is needed for this template

  extract-lifted-templates-from-template-def-elements =
    ?TemplateCall(_,_,<filter(?TemplateCall(_,_,_,_))>,_);not([]) // template arguments, elements and with/requires

  extract-lifted-templates-from-template-entityderive =
    where(?TemplateCall(_,_,<fetch(?EntityDeriveTemplateCall())>,_)) // entityderive template is being called, which is generated for each call and should be registered for lookup in the calling template
  ; ![<id> | <extract-lifted-templates-from-template-def-elements <+ ![]>] // these calls can also have lifted elements

  extract-lifted-templates-from-template-elements-exp :
    TemplateCallExpression(x, _, _, _) -> [TemplateCall(x, "", "", "")]

  lifted-template-load-template-map-helper:
    (liftedtemplates,e_env) -> <foldl(lifted-template-load-template-map-helper-fold)> (liftedtemplates,e_env)

  lifted-template-load-template-map-helper-fold:
    (TemplateCall(z,_,_,_),e_env) -> expr |[ utils.AbstractPageServlet.loadTemplateMap(pkgtname.z_value.class, null, e_env) ]| // the lifted template might have lifted elements itself, recursively call loadTemplateMap
    with  z_value := <TopLevelTemplateClassName> z
        ; pkgtname := <TemplatePackage>

  prefetch-for-to-function =
    ?For(x, srt, _, _, b, _)
    ; <prefetch-for-to-function-common(get-for-loop-prefetch|x, srt)> b

  prefetch-for-to-function =
    ?ForAll(x, srt, _, b, _)
    ; <prefetch-for-to-function-common(get-for-all-loop-prefetch|x, srt)> b

rules

  prefetch-for-to-function-common(s|x, srt):
    b -> [class-body-dec |[
         public void x_fname(java.util.List<t> list, boolean early) {
           if(early) {
             bstm_early*
           } else {
             bstm_batch*
           }
         }
       ]| | inner]
    where pf@PrefetchFor(Var(x), _, _, _){anno*} := <get-prefetch-for(|x)> b
    ; <fetch-elem(?PrefetchForName(x_fname))> anno*
    with tmpanno* := <remove-all(?PrefetchForName(_))> anno*
    ; (bstm_early*, bstm_batch*) := <s(|expr |[ hibSession ]|, "list", srt)> pf{tmpanno*}
    ; t := <java-type> srt
    ; inner := <collect(prefetch-for-to-function)> b

  local-defined-templates-to-hashmap :
    elem* -> (tplmap,tplclasses,refargclasses)
    with  localtemplates := <collect(local-defined-templates-to-hashmap-helper)> elem*
        ; tplmap := <mapconcat(add-template-binding)> localtemplates
        ; tplclasses := <map(add-template-classes)> localtemplates
        ; refargclasses := <map(add-template-ref-arg-classes)> localtemplates

  //local template redef
  local-defined-templates-to-hashmap-helper :
    def@LocalRedefine(mod*,x,farg*,y,extraArg*) -> (xWithOverloadRenaming,clsname, argwithref*, spanname1, spanname2)
    with  xWithOverloadRenaming := <generate-template-name-fargs> (x,farg*,mod*)
        ; ( <get-anno(?ExtraLocalDefineArgs(extraFormalArg*))> def <+ extraFormalArg* := [] )
        ; ( <?LocalRedefineArgs(eArg*)> extraArg* <+ eArg* := [] )
        ; ( <get-anno(?SpanNames(spanname1,spanname2))> def <+ spanname1 := ""; spanname2 := "")
        ; clsname := <generate-template-name-fargs; template-name-to-classname-helper> (y,[farg*,extraFormalArg*],mod*)
        ; argwithref* := <handle-ref-arg> (extraFormalArg*,eArg*)

  add-template-binding:
    (x,xclass,e_argswithref*, spanname1, spanname2) ->
      bstm* |[
        utils.AbstractPageServlet.loadTemplateMap(x_value.class, x_key, env);
        Object[] x_array = ~<optimize-empty-array> e_argswithref*;
        env.putExtraLocalTemplateArguments(x_key, new utils.LocalTemplateArguments(x_array,"~spanname1","~spanname2"));
      ]|
    with  x_key := <concat-strings> ["\"",x,"\""]
        ; x_value := xclass
        ; x_array := <newname-webdsl> "arg" //doesn't need to be globally unique, no issue for caching when using newname here

  add-template-classes:
    (x,x_class,e_argswithref*, spanname1, spanname2) ->
      bstm |[
        utils.AbstractPageServlet.loadTemplateMap(x_class.class);
      ]|

  add-template-ref-arg-classes:
    (x,x_class,e_argswithref*, spanname1, spanname2) ->
      bstm |[
        utils.AbstractPageServlet.loadRefArgClasses(x_class.class);
      ]|

rules

  formal-arguments-to-store-statements :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                            where x_index := <subti;int-to-string> (index,1)
                                                ; if <?Arg(_,RefSort(_))> arg
                                                  then x_arg := "utils.RefArg"
                                                  else x_arg := <argument-java-servlet-type> arg end
                                          \})> farg* //variables are generated in java-template-vars

  formal-arguments-to-query-optimizations(|b) :
    Arg(x, srt){anno*} -> bstm_optimization*
    where <has-entity-anno> srt
        ; is-at-arguments
        ; not(SimpleSort("Entity") := srt)
        ; prefetch := <get-prefetch-for(|x); alltd(remove-reusable-conditions-from-prefetch-condition)> b
    with bstm_optimization* := <get-batch-fetches-single(|x, srt) <+ ![]> prefetch

  remove-reusable-conditions-from-prefetch-condition :
    PrefetchCondition(cond1){anno*} -> PrefetchCondition(cond2){anno*}
    with cond2 := <alltd(remove-reusable-condition); innermost(remove-true-cond)> cond1

  remove-reusable-condition :
    cond -> True()
    where <has-anno(|IsReusableCondition())> cond

  remove-true-cond : And(True(), cond) -> cond
  remove-true-cond : And(cond, True()) -> cond
  remove-true-cond : Or(_, True()) -> True()
  remove-true-cond : Or(True(), _) -> True()

  formal-arguments-to-query-optimizations(|b) :
    Arg(x, srt){anno*} -> bstm* |[ bstm_joins* bstm_filterhints* ]|
    where <has-entity-anno> srt
        ; is-guided-batching
        ; not(SimpleSort("Entity") := srt)
        ; prefetch := <get-prefetch-for(|x)> b
    with bstm_joins* := <get-batch-fetches-single-simple(|x, srt) <+ ![]> prefetch
        ; bstm_filterhints* := <get-batch-fetches-filter-hints(|x, srt) <+ ![]> prefetch

  prefetch-function-for-formal-argument(|b) :
    (index, Arg(x, srt){anno*}) -> bstm* |[
      if(x_i == ~i:stri) {
        java.util.ArrayList<t> x_elems = new java.util.ArrayList<t>();
        for(org.webdsl.WebDSLEntity ent : elems) {
          if(ent.instanceOf("~x_class")) {
            x_elems.add((x_ename)ent);
          }
        }
        bstm_prefetch*
      }
    ]|
    where <has-entity-anno> srt
    ; t := <java-type> srt
    ; x_i := "i"
    ; stri := <int-to-string> index
    ; esrt@SimpleSort(x_class) := <try-strip-generic-sort> srt
    ; x_ename := <java-type-name> esrt
    ; x_elems := <newname-webdsl> "elems"
    ; prefetch := <get-prefetch-for(|x)> b
    ; bstm_prefetch* := <use-conditions-without-vars; get-batch-fetches(|e_HibSession(), x_elems, srt)> prefetch
