<project name="webdsl-build-eclipse" default="eclipse-build">

  <property name="path.build.id" value="${currentdir}/.servletapp/.last-build-id" />
  <property name="path.build.completed" value="${currentdir}/.servletapp/.last-build-id-completed" />
  <property name="path.builder.started" value="${currentdir}/.servletapp/.webdsl-project-builder-started" />
  <property name="path.saved.but.not.built" value="${currentdir}/.saved-but-not-built" />

  <condition property="stratego-jar-cp" value="${eclipse.strategoxt.strategojar}">
    <isset property="eclipse.running"/>
  </condition>

  <taskdef name="taskgenerateuuid" classname="org.webdsl.ant.TaskGenerateUuid" />

  <target name="generate-uuid" description="Generates a UUID">
    <taskgenerateuuid/>
    <!--echo>generated uuid: ${build-id}</echo-->
  </target>

  <target name="get-build-id">
    <if>
      <not><isset property="build-id" /></not>
    <then>
      <antcallback target="generate-uuid" return="build-id"/>
    </then>
    </if>
    <echo>generated build-id: ${build-id}</echo>
  </target>

  <target name="eclipse-build" depends="check-clean-project, get-build-id">
    <available file="${path.build.completed}" property="previous-build-was-completed"/>
    <available file="${path.saved.but.not.built}" property="is-saved-but-not-built"/>
    <loadfile srcFile="${path.build.id}" property="previous-build-id-for-quick-build" quiet="true" />
    <if>
      <and>
        <not><isset property="is-saved-but-not-built"/></not>
        <isset property="previous-build-was-completed"/>
        <isset property="previous-build-id-for-quick-build"/>
      </and>
      <then>
        <echo message="Skipping WebDSL compiler because no .app file was changed."/>
        <property name="skip-webdsl-compile-because-no-app-file-changed" value="true"/>
        <!-- in this case we are not recompiling the application and should use the previous build-id -->
      </then>
      <else>
        <!-- always try to create these dirs, they could have been removed by clean -->
        <mkdir dir="${currentdir}/.servletapp/"/>
        <mkdir dir="${webcontentdir}"/>

        <!--<echo>CURRENT BUILD ${previous-build-was-completed}</echo>-->
        <delete file="${path.build.completed}" failonerror="false" />

        <!-- write build-id, so the java-based webdsl builder (that starts the server) can pick it up -->
        <echo file="${path.build.id}">${build-id}</echo>
      </else>
    </if>

    <if>
      <isset property="previous-build-was-completed"/>
      <then>
        <antcall target="build-without-java-compile-without-template-copy"/>
      </then>
      <else>
        <!-- the wst.common.components needs to be updated when the root app option is changed -->
        <antcall target="update-dot-settings-dir"/>
        <antcall target="build-without-java-compile"/>
      </else>
    </if>

    <copy file=".servletapp/web.xml" preservelastmodified="true" todir="${webcontentdir}/WEB-INF"/>

    <!--
    <copy preservelastmodified="true" todir="${webcontentdir}/WEB-INF/lib">
      <fileset dir="${webcontentdir}/WEB-INF/lib">
        <exclude name="javaee.jar" />
      </fileset>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}">
      <fileset dir="${webcontentdir}/html"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/images">
      <fileset dir="${webcontentdir}/images"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/stylesheets">
      <fileset dir="${webcontentdir}/stylesheets"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/javascript">
      <fileset dir="${webcontentdir}/javascript"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}">
      <fileset dir="${webcontentdir}">
        <include name="webdsl-reindex"/>
        <include name="build.reindex.xml"/>
        <include name="build.properties"/>
        <include name="html/index.jsp"/>
        <include name="html/favicon.ico"/>
        <include name="build.properties"/>
      </fileset>
    </copy>
    -->
    <ant dir="${currentdir}/.servletapp" antfile="${currentdir}/.servletapp/build.xml" target="configure"/>
    <copy overwrite="true" todir="${webcontentdir}/WEB-INF/classes">
      <fileset dir=".servletapp/src-template">
        <include name="hibernate.properties"/>
        <include name="email.properties"/>
        <include name="log4j-test.xml"/>
      </fileset>
      <fileset dir=".">
        <include name="**/nativejava/*"/>
        <exclude name=".servletapp/**"/>
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

    <antcall target="fix-classpath"/>
    <!-- generate xml files if clean build -->
    <!--
    <if>
      <equals arg1="${previous-build-was-completed}" arg2="$${previous-build-was-completed}" />
      <then>
        <antcall target="generate-ant-build-files"/>
      </then>
    </if>
    -->

    <!-- refresh before running the Eclipse Java compiler, otherwise not all java files will be compiled (occasionally) -->
    <antcall target="refresh"/>
    <antcall target="run-eclipse-build"/>
    <!--<antcall target="poll-deployed-app-for-new-build-id"/>  now handled in webdsl builder, which runs after this -->

    <!-- show that build has finished -->
    <if>
      <not><isset property="skip-webdsl-compile-because-no-app-file-changed"/></not>
      <then>
        <echo file="${path.build.completed}">${build-id}</echo>
      </then>
    </if>
    <delete file="${path.saved.but.not.built}" failonerror="false" />
    <antcall target="mark-build-version"/>
    <antcall target="mark-application-ini-timestamp"/>
    <!-- remove the webdsl builder lock file ${path.builder.started}, that way the builder can execute once again -->
    <delete file="${path.builder.started}" failonerror="false" />

  	<!-- moved refresh to builder to try to avoid locking issue http://yellowgrass.org/issue/WebDSL/762
    <antcall target="schedule-refresh"/>
    -->
  </target>


  <target name="check-clean-project">
    <antcall target="check-if-editor-updated"/>
    <antcall target="check-for-changes-in-application-ini"/>
    <antcall target="clean-if-required"/>
  </target>


  <target name="mark-project-clean-necessary">
    <mkdir dir="${currentdir}/.servletapp/"/>
    <echo file="${currentdir}/.servletapp/.clean-project-required"></echo>
  </target>

  <target name="clean-if-required" depends="check-remove-command-file" if="check-remove-command-file-present">
  <antcall target="clean-eclipse-project" />
  </target>

  <target name="check-remove-command-file">
    <!-- force clean by creating a .clean-project-required file in .servletapp -->
    <available file="${currentdir}/.servletapp/.clean-project-required" property="check-remove-command-file-present"/>
    <if>
      <isset property="check-remove-command-file-present" />
      <then>
        <delete file="${currentdir}/.servletapp/.clean-project-required" />
      </then>
    </if>
  </target>


  <target name="clean-eclipse-project">
    <!-- <antcall target="remove-server-module"/> -->
    <delete dir="${currentdir}/.webdsl-parsecache" />
    <delete dir="${currentdir}/.cache" />
    <delete dir="${currentdir}/.servletapp" />
    <delete dir="${currentdir}/.webdsl-fragment-cache" />
    <delete file="${currentdir}/.dependencies.webdsl" />
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${webcontentdir}" includes="**/*"/>
    </delete>
    <echo file=".saved-but-not-built"/>
    <eclipse.convertPath fileSystemPath="${currentdir}" property="resourcePath" />
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
  </target>


  <property name="path.application.ini.timestamp" value="${currentdir}/.servletapp/.application-ini-timestamp"/>

  <target name="mark-application-ini-timestamp" depends="get-application-ini-timestamp">
    <dirname property="tmpdir" file="${path.application.ini.timestamp}" />
    <mkdir dir="${tmpdir}" />
    <echo file="${path.application.ini.timestamp}">${current.application.ini.timestamp}</echo>
  </target>

  <taskdef name="taskapplicationinitimestamp" classname="org.webdsl.ant.TaskApplicationIniTimestamp"/>

  <target name="get-application-ini-timestamp">
    <taskapplicationinitimestamp/>
  </target>

  <target name="check-for-changes-in-application-ini" depends="get-application-ini-timestamp">
    <!-- if application.ini was changed directly, also trigger clean -->
    <available file="${path.application.ini.timestamp}" property="previous.timestamp.available" />
    <if>
      <isset property="previous.timestamp.available"/>
      <then>
        <loadfile srcFile="${path.application.ini.timestamp}" property="previous.application.ini.timestamp" quiet="true" />
        <echo>previous: ${previous.application.ini.timestamp}</echo>
        <echo>current: ${current.application.ini.timestamp}</echo>
        <if>
          <not><equals arg1="${current.application.ini.timestamp}" arg2="${previous.application.ini.timestamp}" /></not>
          <then>
            <echo>Detected changes in application.ini, performing clean build.</echo>
            <antcall target="mark-project-clean-necessary"/>
          </then>
        </if>
      </then>
    </if>
  </target>


  <property name="path.build.version" value="${currentdir}/.servletapp/.last-build-version" />

  <target name="mark-build-version">
    <dirname property="dir.build.version" file="${path.build.version}" />
    <mkdir dir="${dir.build.version}" />
    <echo file="${path.build.version}">${webdsl.plugin.version}</echo>
  </target>

  <target name="check-if-editor-updated">
    <available file="${path.build.version}" property="build.is.completed" />
    <loadfile srcFile="${path.build.version}" property="build.last.version" quiet="true" />
    <if>
      <not>
        <and>
          <isset property="build.is.completed" />
          <equals arg1="${build.last.version}" arg2="${webdsl.plugin.version}" />
        </and>
      </not>
      <then>
        <echo>Editor updated to version ${webdsl.plugin.version}. Performing a clean build...</echo>
        <antcall target="mark-project-clean-necessary"/>
      </then>
    </if>
  </target>


  <target name="refresh">
    <eclipse.convertPath fileSystemPath="${currentdir}" property="resourcePath"/>
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
  </target>


  <taskdef name="schedulerefresh" classname="webdsl.ScheduleRefreshTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>


  <target name="schedule-refresh">
    <basename property="projectname" file="${currentdir}"/>
    <schedulerefresh projectname="${projectname}" />
  </target>


  <target name="run-eclipse-build" unless="disable-forced-eclipse-build">
    <!-- invoke incremental build of java code in eclipse
    <basename property="projectname" file="${currentdir}"/>
    <eclipse.incrementalBuild project="${projectname}" kind="incremental" builder="org.eclipse.jdt.core.javabuilder"/>
    -->

    <mkdir dir="${webcontentdir}/WEB-INF/classes/"/>

    <path id="libraries">
      <fileset dir="${webcontentdir}/WEB-INF/lib/" includes="*.jar"/>
    </path>

    <!-- invoke eclipse java compiler -->
    <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
      <isset property="eclipse.running"/>
    </condition>
    <property name="ant.build.javac.target" value="1.7"/>
    <property name="ant.build.javac.source" value="1.7"/>
    <javac destdir="${webcontentdir}/WEB-INF/classes/"
      failonerror="true"
      classpathref="libraries"
      debug="on"
      fork="true"
      nowarn="true"
      memoryinitialsize="256m"
      memorymaximumsize="1024m">
      <!-- fork= and memory sizes fix problem with javac throwing outofmemory heap space exception caused by ant 64mb default limit -->
      <!--     verbose="yes">
<compilerarg value="-Xlint"/> -->
      <src path=".servletapp/src-generated" />
      <src path="nativejava" />
      <src path=".servletapp/src-template" />
    </javac>
  </target>

  <taskdef name="taskfixclasspath" classname="org.webdsl.ant.TaskFixClasspath"/>

  <target name="fix-classpath">
    <taskfixclasspath/>
    <echo>generated .classpath</echo>
  </target>


  <taskdef name="updatedotsettingsdir" classname="webdsl.UpdateDotSettingsDirTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>

  <target name="update-dot-settings-dir" depends="load-config">
    <basename property="projectname" file="${currentdir}"/>
    <updatedotsettingsdir projectname="${projectname}" rootapp="${rootapp}" />
  </target>


  <taskdef name="removeservermodule" classname="webdsl.RemoveServerModuleTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>

  <target name="remove-server-module">
    <basename property="projectname" file="${currentdir}"/>
    <removeservermodule projectname="${projectname}" />
  </target>


</project>


<!--
  <target name="poll-deployed-app-for-new-build-id" depends="load-config">
    <script language="javascript"><![CDATA[
      importClass(java.net.URL);
      importClass(java.io.BufferedReader);
      importClass(java.io.InputStreamReader);
      importClass(java.lang.Thread);

      echo = project.createTask("echo");
      var projectname = project.getProperty("appname");
      var buildid = project.getProperty("build-id");

      var url = new URL("http://localhost:8080/"+projectname+"/?show_build_id=true");
      echo.setMessage("URL: "+url);
      echo.perform();
      var searchfor = "build-id:"+buildid;
      echo.setMessage("searching for: "+searchfor);
      echo.perform();

      var found = false;
      var tries = 10;
      while(tries > 0 && !found){
        tries = tries - 1;
        try {
          var instream = new InputStreamReader(url.openStream());
          var inreader = new BufferedReader(instream);
          var inputLine = inreader.readLine();
          while (inputLine != null) {
            if(inputLine.contains(searchfor)){ found=true; }
            inputLine = inreader.readLine();
          }
          inreader.close();
        } catch (e) {
          //echo.setMessage(e);
          //echo.perform();
        }

        try {
          Thread.sleep (1000);
        } catch (e) {
          //echo.setMessage(e);
          //echo.perform();
        }
      }
      if(found){
        echo.setMessage("Application deployed.");
      }
      else{
        echo.setMessage("Application not deployed yet.");
      }
      echo.perform();
      if(found){
      project.setProperty("found-newly-deployed-app","true");
      }
    ]]></script>
    <if>
      <isset property="found-newly-deployed-app" />
    <then>
      <antcall target="open-app-in-browser" />
    </then>
    <else>
      <echo>(Re)start the Tomcat server in the 'Servers' view.</echo>
    </else>
    </if>
  </target>
-->

<!--
  <target name="open-app-in-browser">
    <script language="javascript"><![CDATA[
      importClass(org.eclipse.ui.browser.IWorkbenchBrowserSupport);
      importClass(org.eclipse.wst.server.ui.internal.ServerUIPlugin);
      importClass(org.eclipse.ui.browser.IWebBrowser);
      importClass(java.net.URL);
      var projectname = project.getProperty("appname");
      try {
        var browserSupport = ServerUIPlugin().getWorkbench().getBrowserSupport();
        var browser = browserSupport.createBrowser(IWorkbenchBrowserSupport.LOCATION_BAR | IWorkbenchBrowserSupport.NAVIGATION_BAR, null, null, null);
        browser.openURL(new URL("http://localhost:8080/"+projectname));
      } catch (e) {
        echo = project.createTask("echo");
        echo.setMessage(e);
        echo.perform();
      }
    ]]></script>
  </target>
-->

<!--
  <taskdef name="startserver" classname="webdsl.StartServerTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>

  <target name="start-server">
    <basename property="projectname" file="${currentdir}"/>
    <startserver projectname="${projectname}" />
  </target>


  <taskdef name="polldeployedapp" classname="webdsl.PollDeployedAppTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>

  <target name="poll-deployed-app">
    <basename property="projectname" file="${currentdir}"/>
    <polldeployedapp projectname="${projectname}" />
  </target>
-->
