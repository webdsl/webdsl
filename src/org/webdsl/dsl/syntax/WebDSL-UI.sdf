module WebDSL-UI

imports
  WebDSL-Action
  WebDSL-Lexical

exports

  sorts TemplateDefinition Modifier Exp

  context-free syntax

    TemplateDefinition -> Definition

    "define" Modifier*
       Id OptFormalArgs
       TemplateArgs
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}

    "requires" {TemplateArg "," }*            -> TemplateArgs{cons("TemplateArgs"), prefer}
    Id "(" {Sort ","}* ")"                  -> TemplateArg {cons("TemplateArg")}

      -> TemplateArgs{cons("None")}

    "define" Modifier* Id "(" {FormalArg ","}* ")" "=" Id OptLocalRedefineArgs -> TemplateDefinition {cons("LocalRedefine")}
    -> OptLocalRedefineArgs {cons("None")}
    "(" "*" "," {LocalRedefineArg ","}+ ")" -> OptLocalRedefineArgs {cons("LocalRedefineArgs")}
    Id -> LocalRedefineArg{cons("Var")}

    %% new page syntax
    Modifier*
    "page"
    PageId
    OptFormalArgs
    TemplateArgs
    "{" TemplateElement* "}"  -> TemplateDefinition {cons("DefinePage")}

    %% new template syntax
    Modifier*
    "template"
    Id
    OptFormalArgs
    TemplateArgs
    "{" TemplateElement* "}"  -> TemplateDefinition {cons("DefineTemplate")}

    Modifier*
    "email"
    Id
    OptFormalArgs
    TemplateArgs
    "{" TemplateElement* "}"  -> TemplateDefinition {ast("Define([Email()], <2>, <3>, <4>, <5>)")}

    "(" {FormalArg ","}* ")" -> OptFormalArgs {ast("<1>")}
                             -> OptFormalArgs {ast("[]")}

    %%"define" Modifier*
    %%   Id UNDEFINED*
    %%   "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}

    "page"                                  -> Modifier {cons("Page")}
    "email"                                 -> Modifier {cons("Email")}
    "ajax"                                  -> Modifier {cons("AjaxTemplate")}
    "template"                              -> Modifier {cons("Template")}
    "feed"                                  -> Modifier {cons("Feed")}
    "local"                                 -> Modifier {cons("Local")}
    "no-span"                                                -> Modifier {cons("NoSpan")}
    "span"                                                  -> Modifier {cons("TemplateModSpan")}
    "inline"                                                -> Modifier {cons("TemplateModInline")}
    "secure"                                   -> Modifier {cons("TempateModSecure")}
    "not-secure"                              -> Modifier {cons("TemplateModNotSecure")}
    "override"                                -> Modifier {cons("TemplateModOverride")}
    "deprecated"                              -> Modifier {cons("TemplateDeprecated")}
    "expire-cache"                            -> Modifier {cons("ExpireCache")}
    "read-only"                               -> Modifier {cons("ReadOnlyPage")}
    "service"                                 -> Modifier {cons("WebService")}

    InitAction                              -> TemplateElement
    Action                                  -> TemplateElement

    "var" Id ":" Sort                       -> VarDecl {cons("TemplateVarDecl")}
    "var" Id ":" Sort ":=" Exp              -> VarDecl {cons("TemplateVarDeclInit")}
    "var" Id ":=" Exp                       -> VarDecl {cons("TemplateVarDeclInitInferred")}
    VarDecl                                 -> TemplateElement
    %% still allow ";" behind page var for backwards comp.
    "var" Id ":" Sort ";" 	       -> VarDecl {cons("TemplateVarDecl"), deprecated ("remove ';'")}
    "var" Id ":" Sort ":=" Exp ";" -> VarDecl {cons("TemplateVarDeclInit"), deprecated ("remove ';'")}
    "var" Id ":=" Exp ";"          -> VarDecl {cons("TemplateVarDeclInitInferred"), deprecated ("remove ';'")}
    "request" VarDecl                       -> TemplateElement {cons("RequestScopeTemplate")}
    "local" VarDecl                         -> TemplateElement {cons("LocalScopeTemplate")}

    TemplateDefinition                      -> TemplateElement
    TemplateCall                            -> TemplateElement {avoid}


    "where" Exp                                    -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" {OrderExp ","}+                   -> Filter {cons("FilterNoWhereNoLimit")}
    "where" Exp "order" "by" {OrderExp ","}+       -> Filter {cons("FilterNoLimit")}
    "where" Exp Limit                              -> Filter {cons("FilterNoOrderBy")}
    "order" "by" {OrderExp ","}+ Limit             -> Filter {cons("FilterNoWhere")}
    Limit                                          -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" {OrderExp ","}+ Limit -> Filter {cons("Filter")}
    Exp                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                -> OrderExp {cons("OrderAscending")}
    Exp "desc"               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp -> Limit {cons("Limit")}
    "limit" Exp              -> Limit {cons("LimitNoOffset")}
    "offset" Exp             -> Limit {cons("LimitNoLimit")}


    "for" "(" Id ":" Sort "in" Exp OptFilter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("For")}

    Filter -> OptFilter
    -> OptFilter {cons("None")}

    ":" Sort -> OptSort {ast("<1>")}
    -> OptSort {cons("None")}

    "for" "(" Id "in" Exp OptFilter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForInferred")}

    "for" "(" Id ":" Sort OptFilter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForAll")}

    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")"
      "{" TemplateElement* "}" ForSeparator        -> TemplateElement {cons("ForCount")}

    "separated-by" "{" TemplateElement* "}" -> ForSeparator{cons("ForSeparator")}
    -> ForSeparator{cons("None")}


    "if" "(" Exp ")" "{" TemplateElement* "}" ElseIfTempl* ElseTempl? -> TemplateElement {cons("IfElseIfTempl"),prefer}
    "else" "if" "(" Exp ")" "{" TemplateElement* "}"                  -> ElseIfTempl {cons("ElseIfTempl"),prefer}
    "else" "{" TemplateElement* "}"                                   -> ElseTempl  {cons("ElseTempl"),prefer}


    "case" "(" {Exp ","}+ ")" "{" TemplateCaseAlt* "}"  -> TemplateElement {cons("TemplateCase")}
    {Exp ","}+ "{" TemplateElement* "}"                 -> TemplateCaseAlt {cons("TemplateCaseAlt")}
    "default" "{" TemplateElement* "}"                  -> TemplateCaseAlt {cons("TemplateCaseAltDefault"), prefer}

    "typecase" "(" TypeCaseExp OptTypeCaseAlias ")" "{" TemplateTypeCaseAlt* "}" -> TemplateElement {cons("TemplateTypeCase")}
    Sort "{" TemplateElement* "}"                               -> TemplateTypeCaseAlt {cons("TemplateTypeCaseAlt")}
    "default" "{" TemplateElement* "}"                          -> TemplateTypeCaseAlt {cons("TemplateTypeCaseDefault"), prefer}

  %%
    TemplateCallId OptTCallArgs OptTCallPropAssigns TemplateBody -> TemplateCall {cons("TemplateCall")}

    "(" {TemplateArgExp ","}* ")" -> OptTCallArgs {ast("<1>")}
                                  -> OptTCallArgs {ast("[]")}

    Exp -> TemplateArgExp

    "[" {PropertyAssignment ","}* "]" -> OptTCallPropAssigns {ast("<1>")}
                                      -> OptTCallPropAssigns {ast("[]")}

    "{" TemplateElement* "}" -> TemplateBody {cons("TemplateBody")}
                             -> TemplateBody {ast("TemplateBody([])")}

    "with" "{" ArgDefine* "}" -> TemplateBody {cons("TemplateWith")}

    TemplateCallId "(" {FormalArg ","}* ")" "{" TemplateElement* "}" -> ArgDefine {cons("ArgDefine")}

    "with" "{" TemplateElement* "}" -> TemplateCall {reject}

  %%

    %% deprecated
    "navigate" "(" PageCall ")" UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
    "navigate" "(" PageCall ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}

    "navigate" PageCall UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
    "navigate" PageCall "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}

    PageId "(" {Exp ","}* ")"  -> PageCall {cons("PageCall")}

  %%

    %% deprecated
    "action" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
    "action" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
    "actionLink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
    "actionLink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}

    "submit" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
    "submit" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
    "submitlink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
    "submitlink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}

    "submit"     ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
    "submit"     ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
    "submitlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}
    "submitlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}

    "downloadlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
    "downloadlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
    "outputimage" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}
    "outputimage" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}

    ActionCall -> ActionCallOrInline
    InlineAction -> ActionCallOrInline

    Id "(" {Exp ","}* ")"  -> ActionCall {cons("ActionCall")}

  %%

    "action" Block -> InlineAction {cons("InlineAction")}
    %% reject ambiguous ObjectCreation(SimpleSort("action"), [])
    "action" -> Sort {reject}
    %%"template" "{" TemplateElement* "}" -> InlineTemplate {cons("InlineTemplateCall")}
    %% "template"               -> Id {reject}

    %% Template call without braces must be disambiguated in some cases
    "action" -> TemplateCall {reject}  %%this is an action definiton, not a templatecall without params
    "action" -> Exp {reject}           %%this is an inline action, not a variable
    "action" -> PropertyValue {reject} %%this is an inline action, not an id

  %%

    %% preferably have the symbol options in one production, unfortunately then it ends up in ast, can use ast instead of cons...
    %% SubmitProp PropertyAssignSymbol ActionCallOrInline -> PropertyAssignment {ast("PropertySubmit(<1>,<3>)"),prefer}
    %% however, in this case the constructors are not automatically generated for stratego
    %%
%%  lexical syntax %% different opinions about nice syntax here, something to discuss (leaning towards "=")
%%    ":"  -> PropertyAssignSymbol %% same as type declaration
%%    ":=" -> PropertyAssignSymbol %% same as assignment
%%    "="  -> PropertyAssignSymbol %% same as html and data model property annotations
    SubmitProp ":" ActionCallOrInline  -> PropertyAssignment {cons("PropertySubmit"),prefer}
    SubmitProp ":=" ActionCallOrInline -> PropertyAssignment {cons("PropertySubmit"),prefer}
    SubmitProp "=" ActionCallOrInline  -> PropertyAssignment {cons("PropertySubmit"),prefer}
    ExtendedId ":" PropertyValue            -> PropertyAssignment {cons("PropertyAssignment")}
    ExtendedId ":=" PropertyValue           -> PropertyAssignment {cons("PropertyAssignment")}
    ExtendedId "=" PropertyValue            -> PropertyAssignment {cons("PropertyAssignment")}
    Exp                                            -> PropertyValue
    "ajax"                                         -> PropertyAssignment {cons("TemplateCallPropertyAjax"),prefer}
    "no loading feedback"                          -> PropertyAssignment {cons("TemplateCallPropertyNoLoadingFeedback"),prefer}
    "secure"                                       -> PropertyAssignment {cons("TemplateCallPropertySecure"),prefer} %% for navigates and submits
    "ignore-validation"                            -> PropertyAssignment {cons("TemplateCallPropertyIgnoreValidation"),prefer}
    "not-secure"                                   -> PropertyAssignment {cons("TemplateCallPropertyNotSecure"),prefer} %% for navigates and submits
    "not null"                                     -> PropertyAssignment {cons("TemplateCallPropertyNotNull"),prefer}
    CommonAttribute -> PropertyAssignment


%% multiple action calls, e.g. trigger an onkeyup action and also execute the onkeyup passed in attributes
    SubmitProp "=" {ActionCallOrInlineOrExp ";"}+ -> PropertyAssignment {cons("PropertySubmitMultiple"),avoid}
    ActionCallOrInline 							  -> ActionCallOrInlineOrExp {prefer}
    PropertyValue                                 -> ActionCallOrInlineOrExp


  lexical syntax
    "onabort" -> SubmitProp
    "onblur"  -> SubmitProp
    "onchange"  -> SubmitProp
    "onclick"  -> SubmitProp
    "ondblclick" -> SubmitProp

    "onerror"  -> SubmitProp
    "onfocus"  -> SubmitProp
    "onkeydown"  -> SubmitProp
    "onkeypress" -> SubmitProp
    "onkeyup" -> SubmitProp

    "onload" -> SubmitProp
    "onmousedown" -> SubmitProp
    "onmousemove" -> SubmitProp
    "onmouseout" -> SubmitProp
    "onmouseover" -> SubmitProp

    "onmouseup" -> SubmitProp
    "onreset" -> SubmitProp
    "onresize" -> SubmitProp
    "onselect" -> SubmitProp
    "onsubmit" -> SubmitProp

    "onunload" -> SubmitProp
    "oninput" -> SubmitProp

  context-free syntax
  %%

    %% "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateCall {reject}
    %% "else" "{" TemplateElement* "}"                -> TemplateCall {reject}
    "separated-by" "{" TemplateElement* "}"        -> TemplateCall {reject}

    "init" Block       -> InitAction {cons("InitAction"),prefer}
    "databind" Block   -> TemplateElement {cons("DataBindAction"),prefer}
    "render" Block     -> TemplateElement {cons("RenderAction"),prefer}
    "allphases" Block  -> TemplateElement {cons("AllPhasesAction"),prefer}
    "validate" Block   -> TemplateElement {cons("ValidateAction"),prefer}

    "action" ActionModifier* Id OptFormalArgs Block -> Action {cons("Action")}
    "ignore-validation" -> ActionModifier{cons("ActionModifierIgnoreValidation")}

  context-free syntax

    Id ".elements" -> TemplateCallId {cons("QualifiedElementsCall"),prefer}

  context-free syntax  %% template var args

    "[" {FormalVarArg ","}+ "]"             -> Sort {cons("TemplateVarArgSort")}
    Id ":" Sort                             -> FormalVarArg {cons("FormalVarArg")}
    Id "." TemplateCall                     -> TemplateCall {cons("MemberTemplateCall"), avoid}

    "[" {ExpVarArg ","}+ "]"                -> Exp {cons("TemplateVarArgExp")}
    "(" {Exp ","}* ")"                      -> ExpVarArg {cons("ExpVarArg")}


    "for" "(" Id ":" Sort "in" Exp OptFilter ")"
      "{" {ExpVarArg ","}* "}" 				-> ExpVarArg {cons("ExpVarArgFor")}

    "for" "(" Id "in" Exp OptFilter ")"
      "{" {ExpVarArg ","}* "}" 				-> ExpVarArg {cons("ExpVarArgForInferred")}

    "for" "(" Id ":" Sort OptFilter ")"
       "{" {ExpVarArg ","}* "}" 					-> ExpVarArg {cons("ExpVarArgForAll")}

    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")"
       "{" {ExpVarArg ","}* "}" 	               -> ExpVarArg {cons("ExpVarArgForCount")}

  context-free syntax %% htmlwrapper shorthand

    "htmlwrapper" Id Id HTMLWrapperAssigns -> HTMLWrapper {cons("HTMLWrapper")}

    "[" {Attribute ","}*"]"                -> HTMLWrapperAssigns{cons("HTMLWrapperAssigns")}
    "[" Attribute* "]"                     -> HTMLWrapperAssigns{cons("HTMLWrapperAssigns"), prefer}
                                           -> HTMLWrapperAssigns{ast("HTMLWrapperAssigns([])")}

    HTMLWrapper                            -> TemplateDefinition
    "htmlwrapper" "{" HTMLWrapperBody* "}" -> TemplateDefinition {cons("HTMLWrapperMultiple")}
    Id Id HTMLWrapperAssigns               -> HTMLWrapperBody {cons("HTMLWrapperBody")}

  context-free syntax %% id -> getTemplate().getUniqueId()

    "id" -> TemplateId {cons("TemplateId")}
    TemplateId -> Exp
    TemplateId -> SimpleVar  %% allows string interpolation "~id"
    "id" -> VarId {reject}

  context-free restrictions

    TemplateId -/- [a-zA-Z0-9\_]
