module org/webdsl/dsl/modules/types/string

imports
  libstrategolib
  libwebdsl-front

rules
  is-simple-sort = ?SimpleSort("String")
  extends-builtin : "String" -> "Object"

  //to allow static functions
  built-in-template-rule-setup = declare-native-class-static-functions(|"String","java.lang.String");fail

rules

  type-default-value :
    SimpleSort("String") -> exp|[ "" ]|

  eq-type-of :
    String(_) -> SimpleSort("String")

  eq-type-of :
    StringInterp(_) -> SimpleSort("String")

  check-builtin-signature :
    (s1, "toString", []) -> SimpleSort("String")
    where not(<?None()> s1)

rules //native string operations

 check-builtin-signature :
    (GenericSort("List",[SimpleSort("String")]), "concat", []) ->  SimpleSort("String")

 check-builtin-signature :
    (GenericSort("List",[SimpleSort("String")]), "concat", [SimpleSort("String")]) ->  SimpleSort("String")

 check-builtin-signature :
    (None(), "log", [s]) ->  SimpleSort("Void")

rules

  normalize-constructor:  Stat(String(x))        ->  Stat(ThisCall("log", [String(x)]))
  normalize-constructor:  Stat(StringInterp(x))  ->  Stat(ThisCall("log", [StringInterp(x)]))

rules // hook to specify string-compatible types, e.g. 'string-compatible = ?SimpleSort("Text")'

  type-compatible = ?(<StringCompatible>, <StringCompatible>)

  make-string-compatible =
    typename := <id>
  ; rules(
      StringCompatible : SimpleSort(typename)
      StringCompatibleTypeNames :+= typename
    )

  built-in-template-rule-setup = <make-string-compatible> "String"; fail
