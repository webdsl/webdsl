module org/webdsl/dsl/modules/types/collection

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/typechecker/-

rules
  /** overloading resolve:
   *  SimpleSort types' extends-builtin simply works on strings in order
   *  to behave similarly to the Extends DR used for entities, however,
   *  GenericSorts are strictly separated by using the whole constructor.
   *  see action/overloading.str
   *  see typechecker/utils.str
   */
  extends-genericsorts :
    GenericSort(x, [SimpleSort(s)]) -> GenericSort(x, [SimpleSort(supertype)])
    where supertype := <extends-check> s
    with  <?"List"<+?"Set"> x

  extends-genericsorts :
    GenericSort(x, [SimpleSort(s)]) -> "Object"
    where not(<extends-check> s)
    with  <?"List"<+?"Set"> x

strategies

  subtype-of =
    ?(GenericSort(_,_), SimpleSort("Object"))

  type-default-value :
    GenericSort("Set", [srt]) -> exp |[ Set<srt>() ]|

  type-default-value :
    GenericSort("List", [srt]) -> exp |[ List<srt>() ]|

rules

   type-compatible =
    ?(GenericSort(a,types1), GenericSort(b, types2))
    ; where (  a2 := <strip-annos> a
             ; a2 := <strip-annos> b
             ; <zip; map(type-compatible)>(types1, types2)
            )

   eq-type-of :
     SetCreation(e*) -> GenericSort("Set", [t])
     where t := <Hd; type-of> e*

   eq-type-of :
     TypedSetCreation(s, e*) -> GenericSort("Set", [s])
     where <map(<type-compatible>(s, <type-of>))> e*

   eq-type-of :
     TypedListCreation(s, e*) -> GenericSort("List", [s])
     where <map(<type-compatible>(s, <type-of>))> e*

   eq-type-of :
     ListCreation(e*) -> GenericSort("List", [t])
     where t := <Hd; type-of> e*

  eq-type-of = ?ExpVarArgFor(_, _, _, _, <Hd; type-of>)
  eq-type-of = ?ExpVarArgForInferred(_, _, _, <Hd; type-of>)
  eq-type-of = ?ExpVarArgForAll(_, _, _, <Hd; type-of>)
  eq-type-of = ?ExpVarArgForCount(_, _, _, <Hd; type-of>)

rules // fields

   eq-type-of :
     FieldAccess(e1, "length") -> SimpleSort("Int")
     where GenericSort(t,_) := <type-of> e1
         ; <?"List" <+ ?"Set"> t

   eq-type-of :
     FieldAccess(e1, "first") -> s
     where GenericSort(t,[s]) := <type-of> e1
         ; <?"List" <+ ?"Set"> t

   eq-type-of :
     FieldAccess(e1, "last") -> s
     where GenericSort(t,[s]) := <type-of> e1
         ; <?"List" <+ ?"Set"> t

rules

  check-builtin-signature :
    (GenericSort(x, [s]), "get", [SimpleSort("Int")]) -> s
    where <?"List" <+ ?"Set"> x

  check-builtin-signature :
    (GenericSort(x, [s]), "add", [s1]) -> SimpleSort("Void")
    where <?"List" <+ ?"Set"> x
        ; <first-is-super-or-same-type> (s,s1)

  check-builtin-signature :
    (GenericSort(x, [s]), "remove", [s1]) -> SimpleSort("Void")
    where <?"List" <+ ?"Set"> x
        ; <first-is-super-or-same-type> (s,s1)

  check-builtin-signature :
    (GenericSort(x, [s]), "clear", []) -> SimpleSort("Void")
    where <?"List" <+ ?"Set"> x

  check-builtin-signature :                    //_ below because this is meant to convert between collections
    (GenericSort(x, [s]), "addAll", [GenericSort(_, [s1])]) -> GenericSort(x, [s])
    where <?"List" <+ ?"Set"> x
        ; <first-is-super-or-same-type> (s,s1)

  check-builtin-signature :
    (GenericSort(x, [s]), "random", []) -> s

  desugar :
    Call(e, "random", []) -> <rename> |[ e.get( random( e.length ) ) ]|

rules //set only

  check-builtin-signature :
    (GenericSort("Set", [s]), "list", []) -> GenericSort("List", [s])

  desugar :
    |[ e.list() ]| -> <rename> |[ List<srt>().addAll(e) ]| //assumes addAll returns the collection
    where GenericSort("Set", [srt]) := <type-of> e

rules //list only

  check-builtin-signature :
    (GenericSort("List", [s]), "set", []) -> GenericSort("Set", [s])

  desugar :
    |[ e.set() ]| -> <rename> |[ Set<srt>().addAll(e) ]| //assumes addAll returns the collection
    where GenericSort("List", [srt]) := <type-of> e

  check-builtin-signature :
    (GenericSort("List", [s]), "indexOf", [s1]) -> SimpleSort("Int")
    where <first-is-super-or-same-type> (s,s1)

  check-builtin-signature :
    (GenericSort("List", [s]), "set", [SimpleSort("Int"), s]) -> SimpleSort("Void")

  check-builtin-signature :
    (GenericSort("List", [s]), "insert", [SimpleSort("Int"), s]) -> SimpleSort("Void")

  check-builtin-signature :
    (GenericSort("List", [s]), "removeAt", [SimpleSort("Int")]) -> SimpleSort("Void")

  check-builtin-signature :
    (GenericSort("List", [s]), "subList", [SimpleSort("Int"),SimpleSort("Int")]) -> GenericSort("List", [s])
