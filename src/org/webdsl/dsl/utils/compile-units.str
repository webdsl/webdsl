module org/webdsl/dsl/utils/compile-units

imports
  libstrategolib
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/compiler-options
  org/webdsl/dsl/utils/debug
  org/webdsl/dsl/utils/constructors
  org/webdsl/dsl/utils/compile-toggles
  org/webdsl/dsl/utils/remove-position-annos

strategies

  disable-code-generation-if-cache-exists =
    where(
      if is-custom-compile-units-enabled then not(read-custom-compile-cache-file) end // only if clean compile when custom compile units is enabled, entities ignored there for now
    ; if is-compile-units-cache-enabled then is-compile-units-cache-stale end // recompile only when entities were changed
    )

  disable-if-not-first-build =
    where(
      if is-compile-units-cache-enabled then CompileUnitsCacheFirstBuild end // compile only if first build
    )
// compile units cache for front-end

strategies

  get-compile-units-cache-file = <concat-strings> [<DirName>, "/.servletapp/.compile-units-cache"]
  get-compile-units-tmp-cache-file = <concat-strings> [<DirName>, "/.servletapp/.compile-units-cache-tmp"]

strategies

  try-get-changed-compile-units-and-prune = try(get-changed-compile-units-and-prune)

  get-changed-compile-units-and-prune :
    Application(n,ast) -> Application(n,ast')
    with  (zipped,(newcachekeys,asts)) := <read-compile-units> ast //always write tmp cache file
    where oldcachekeys := <read-compile-units-cache-file <+ disable-compile-units-cache;fail> //fail here, don't prune anything, if there was no cache file yet
    with  // detect newly added,removed,changed toplevel definition asts
          <sym-diff> (newcachekeys,oldcachekeys)
        ; uniq
        ; ?changed
        ; where(if-verbose-2(<debug-stage> ["Compile units changed:",changed]))
        ; if <fetch(changed-def-requires-full-recompile)> changed
          then ast' := ast
             ; where(if-verbose-2(<debug-stage> ["Full recompile required."]))
             ; disable-compile-units-cache
          else changednormalized := <filter(normalize-cache-item);uniq> changed //filter here, because the normal matches are handled with 'changed' set
             ; defs := <filter(prune-compile-units-cache-helper(|changed,changednormalized) <+ always-keep-specific-ast-nodes)> zipped
             ; acdefs := <filter(?AccessControlRule(_,_,_,_,_))> defs
             ; nonacdefs := <filter(not(?AccessControlRule(_,_,_,_,_)))> defs
               //Issue: changed definitions have no access controll if-statements weaved into calls to navigates/templates/actions when the called elements did not changed.
               //It needs analysis of changed defs to collect navigate-calls and perform "process-page-checks" on the called template/page/action in order to have a matching "WeaveAccessControlInferred" rule for the calls
             ; ast' := [Section("definitions",nonacdefs),AccessControlDefinition(None(),acdefs)]
          end
          
          
  // record-called-pages-ac: 
  //   d@Define(_,_,_,_,elem*) ->d
  //   with <debug(!"Changed def: "); topdown( try( ?NavigateCall( PageCall(x_ident,_),_ ,_ ); debug(!"Found nav: ") ; rules( GenACPageChecks :+= x_ident ) ) )> elem*

  // this list can be made smaller by improving the dependency analysis for caches
  changed-def-requires-full-recompile =
       ?AccessControlPrincipal(_,_)
    <+ ( where( not(QueryOptimizationDisabled) ); ?Entity(_,_,_) <+ ?EntityNoSuper(_,_) <+ ?ExtendEntity(_,_) )
    <+ ?SessionEntity(_,_)
    <+ ?ExtendSessionEntity(_,_)
    <+ ?Enum(_,_)
    <+ ?GlobalVarDecl(_,_)
    <+ ?GlobalVarDeclInit(_,_,_)
    <+ ?GlobalVarDeclInitInferred(_,_)
    <+ ?GlobalsDefinition(_)
    <+ ?RequestScope(_)
    <+ ?InitAction(_)
    <+ is-inlineable-define // if inlined template changed, need to recompile all use sites. @TODO recompile only use sites and handle cases where template goes from being inlineable to not inlineable and vice versa
    <+ is-entityderive-define // this template is used to generate a new template for each call, need to at least recompile all callers when this changes
  
  is-inlineable-define = ?Define(_,_,_,_,_){anno*}; where(<fetch(InlineableTemplate())> anno*)

  is-entityderive-define = ?Define(_,_,args,_,_); where(<fetch(?Arg(_,ArgEntityDerive(_,ArgEntityDeriveProp(_,_))))>  args)

  prune-compile-units-cache-helper(|changed,changednormalized) :
    (a,b) -> b
    where <fetch(?a)> changed
       <+   anorm := <normalize-cache-item> a
          ; <fetch(?anorm)> changednormalized
       <+ is-access-control-enabled; <?AccessControlRule(_,"*",_,_,_)> a //always handle wildcard rules, only if access control is enabled

  always-keep-specific-ast-nodes : (AccessControlPrincipal(_,_),b) -> b // always include principal in AST to correctly generate ac rules
  always-keep-specific-ast-nodes : (SpecialAccessControlRule(_,_),b) -> b // logsql ac rule is placed in PageServlet generated base class, which is regenerated each build
  always-keep-specific-ast-nodes : (ExtendSessionEntity("securityContext",_),b) -> b // because principal is always included in AST, the entity securityContext is also always added to the AST by the compiler. Any securityContext extension needs to be kept in the AST as well.
  always-keep-specific-ast-nodes : (Test(_,_), b) -> b // always keep test blocks for now. AllTestNames DR currently depends on all Test blocks, test names should be declared in declare phase to avoid this recompile
  always-keep-specific-ast-nodes : (d@Define(_,_,_,_,_),b) -> b where <is-inlineable-define> d // need to keep these definitions to be able to inline them
  always-keep-specific-ast-nodes : (AttributeCollection(_, _, _) ,b) -> b // can be improved by only keeping track of the names for lookup and overrides. similar to how template names are always registered even if thrown away by compile units cache.
  // request vars are inserted in the always regenerated PageServlet superclass. request var declare rule extracts the globalvardecls from the RequestScope node and creates this tuple
  always-keep-specific-ast-nodes : ((GlobalVarDecl(_,_),_,_), b) -> b
  always-keep-specific-ast-nodes : ((GlobalVarDeclInit(_,_,_),_,_), b) -> b
  always-keep-specific-ast-nodes : ((GlobalVarDeclInitInferred(_,_),_,_), b) -> b

  // change in template or ac rule should invalidate cache for both
  normalize-cache-item : Define(_,x,_,_,_) -> Define([],<strip-annos> x,[],[],[])
  normalize-cache-item : ServiceFunction(_,x,_,_) -> Define([],<strip-annos> x,[],[],[])
  normalize-cache-item : AccessControlRule("page",x,_,_,_) -> Define([],x,[],[],[])
  normalize-cache-item : AccessControlRule("template",x,_,_,_) -> Define([],x,[],[],[])
  normalize-cache-item : AccessControlRule("ajaxtemplate",x,_,_,_) -> Define([],x,[],[],[])
  // 'invoke x every y' these are collected in generation of DispatchServlet (to-java-servlet/dispatch-servlet.str), if one changes re-evaluate all of them
  normalize-cache-item : InvokeEvery(_,_) -> InvokeEvery([],[])
  // search mapping changes can affect multiple entities, but will not change their signature -> for now regenerate all entities but not all definitions
  normalize-cache-item : SearchMapping(x,_) -> Entity([],[],[]) // all entities because entity name x is not used
  normalize-cache-item : Entity(x,_,_) -> Entity([],[],[])
  normalize-cache-item : EntityNoSuper(x,_) -> Entity([],[],[])
  normalize-cache-item : ExtendEntity(x,_) -> Entity([],[],[])
  // change in full text analyzer def should trigger regeneration of dummy_webdsl_entity with _all_ (not only changed) analyzer defs
  normalize-cache-item : FullTextAnalyzer(_,_,_) -> FullTextAnalyzer([],[],[])

strategies

  read-compile-units-cache-file =
    get-compile-units-cache-file
  ; (file-exists <+ if-verbose-2(debug(!"missing .compile-units-cache, there has been no initial build yet, compiling the whole application"));rules(CompileUnitsCacheFirstBuild := True());fail)
  ; ReadFromFile

  read-compile-units =
      result := <collect(compile-units-section <+ compile-units-acdef);concat>
    ; (cachekeys,asts) := <unzip> result
    ; where(<store-compile-units-tmp> cachekeys)
    ; !(result,(cachekeys,asts))

  compile-units-section : Section(name, defs){anno*} -> <filter(compile-units-helper)> defs
  compile-units-acdef : AccessControlDefinition(name, defs){anno*} -> <filter(compile-units-helper)> defs

  // default is to leave it in the AST, that way new constructs will not cause confusing errors by being removed
  compile-units-helper :
    x -> (cachekey,x)
    where not(?Imports(_))
        ; cachekey := <remove-all-position-annos> x

  store-compile-units-tmp =
    ?content
  ; <WriteToBinaryFile> (<get-compile-units-tmp-cache-file>, content)

  // wait with writing the actual cache file until the last phase of the compiler, that way interruping the compilation early should work
  store-compile-units-cache =
    <copy-file> (<get-compile-units-tmp-cache-file>, <get-compile-units-cache-file>)
