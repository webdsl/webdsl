module org/webdsl/dsl/utils/signatures

imports
  libstrategolib

rules

  // DR match fails when annotations are different, need to normalize any signature used as DR key
  normalize-signature = (strip-annos,formal-arguments-to-types)

  //type could contain annotation, e.g. SimpleSort("URL"){IsRefSort()}, need strip-annos because these types are used in LHS of DR
  formal-arguments-to-types = map(?Arg(_,<id>)); prepare-type-list-for-compare

  //ref arg not used in overload resolution; remove arg names from function sort
  prepare-type-list-for-compare =
    map(
      strip-ref-sort
    ; try(simplify-functionsort)
    ; try(convert-entityderive-type)
    ; try(convert-template-var-arg)
    )
  ; strip-all-annos

  convert-entityderive-type :
    ArgEntityDerive(_,_) -> SimpleSort("Entity")

  convert-template-var-arg :
    TemplateVarArgSort(elems) -> TemplateVarArgSort(argtypes)
    where  argtypes := <map(?FormalVarArg(_,<id>))> elems

  //prepare-type-for-call-compare = try(simplify-functionsort)

  simplify-functionsort : FunctionSort(fargs,return) -> <strip-all-annos> FunctionSort(<map(try(?Arg(_,<id>);!UnnamedArg(<id>)))> fargs,return)

rules  // utility rules to get the unique name generated for a template

  generate-template-name-fargs :
    (n,fargs,mod*) -> name2
    with t* := <formal-arguments-to-types> fargs
        ;name1 := <generate-template-name> (n,t*)
        ;name2 := <if <fetch(TemplateModOverride)> mod* then <concat-strings>["$Override$",name1] else !name1 end; make-java-class-name-compliant>

  generate-template-name = new-function-name

  generate-template-name-from-def = ?Define(_, name, fargs, _, _); <normalize-signature; generate-template-name> (name,fargs)

rules //rename names that end up as Java class or method names

  function-decl-to-newname: Function(nm,farg*,_,_) -> <new-function-name> (nm, <map(farg-to-type)> farg*)
  function-decl-to-newname: StaticEntityFunction(nm,farg*,_,_) -> <new-function-name> (nm, <map(farg-to-type)> farg*)

  farg-to-name = ?Arg(<id>,_)
  farg-to-type = ?Arg(_,<id>)

  new-function-name :
    (nm, argtypes) -> name3
    with name2 := <concat-strings; replace-special-chars-func-name> [nm, <pp-types> argtypes] //reuse pp-types
    //limit the name length because this name is used for class names and thus file names, which are limited to 255 chars
    //http://yellowgrass.org/issue/WebDSL/757
    ; if( <gt>(<strlen>name2,230) ) then
           name3 := <explode-string;take(|230);implode-string> name2
         else
           name3 := name2
         end

  replace-special-chars-func-name =
     string-replace(|"<","_")
   ; string-replace(|">","_")
   ; string-replace(|"(","_")
   ; string-replace(|")","_")
   ; string-replace(|"[","_")
   ; string-replace(|"]","_")
   ; string-replace(|":","_")
   ; string-replace(|", ","_")
   ; string-replace(|",","_")
   ; string-replace(|" ","_")
