module org/webdsl/dsl/utils/annotations

imports
  libstrategolib

signature
  constructors
   
    TypeAnno : Term -> Term
    NativeClassAnno : Term * Term -> Term
    EntityAnno : Term * Term * Term -> Term
    DefValueAnno : Term -> Term
    PositionAnno : Term -> Term
    
    //annotates entities with:
    //all-, untokenized-, java types of-, spellcheck-, autocomplete-, default- and dualanalyzer- search fields
    IndexedAnno : Term * Term * Term * Term * Term * Term * Term -> Term
    SearchNamespaceAnno: Term -> Term
    AnalyzersInUseAnno: Term -> Term
    HasDynamicSearchFields : Term
    
    NamePropertyAnno : Term -> Term
    CallToDefinedAnno : Term
    CallToRequiredAnno : Term
    GlobalCallAnno : Term -> Term
    PropertyEventAnno : Term * Term -> Term
    PageArgsAnno : Term -> Term
    OriginalNameAnno : Term -> Term
    NewFunctionNameAnno : Term -> Term
    NoRenameOnFunctionName : Term
    SuperClassesAnno : Term -> Term
    StaticFunctionCallAnno : Term * Term -> Term
    StaticFunctionAnno : Term
    CalledTemplateArgs : Term -> Term
    IsRefSort : Term
    DirectCollectionReplace : Term
    ArgNumber : Term -> Term
    ExtraLocalDefineArgs : Term -> Term
    SpanNames : Term * Term -> Term
    EnclosingDefine : Term * Term * Term * Term * Term -> Term
    ActionFargAnno : Term -> Term
    InternalSort : Term -> Term
    IsPropertyType : Term
    // annotates searchable properties which are part of an inverse relation, in which the other side of the inverse relation is marked searchable
    InverseOfSearchable: Term 
    // annotates call to a function which is declared as a native function of a built-in type
    TypeNativeFunction : Term -> Term
    TemplateDefineNameBeforeLifting : Term -> Term
    HasViewPage : Term
    Precompiled : Term
    SearchableAnno : Term -> Term
    SearchableAnno : Term
    SearchableAnnoBoost : Term * Term -> Term
    SessionEntities : Term -> Term
    EntitySort : Term -> Term   
    NativeClassConstructorAnnotation: Term * Term -> Term 
    NativeClassConstructorCall: Term * Term * Term -> Term 
    
rules        // annotation utilities
    
  // Add annotation to term, don't duplicate if it was already there
  add-anno(|new-anno):
    elem{anno*} -> res
    where if <fetch(?new-anno)> anno*
          then res := elem{anno*}
          else res := elem{new-anno, anno*} end

  // Return given anno if found, fail otherwise
  get-anno(|anno):
    elem -> anno
    where (?_{anno*}; !anno*; fetch-elem(?anno))

  // Return anno that matches the strategy, fail otherwise
  get-anno(s) = ?_{anno*}; !anno*; fetch-elem(s)

  //succeed if term has annotation, fail otherwise; don't change current term
  has-anno(|t) = where(?_{anno*}; <fetch(?t)> anno*)
  has-anno(s) = where(?_{anno*}; <fetch(s)> anno*)
  
  // Succeed if no anno matches
  has-no-anno(|t) = not(has-anno(|t))
  has-no-anno(s) = not(has-anno(s))
  
  // Add annotation if not present, fail otherwise
  add-new-anno(|anno) =
    where(has-no-anno(?anno)); add-anno(|anno)
    
  //remove annotation that matches
  remove-anno(|t) : elem{anno*} -> elem{<remove-all(?t)> anno*}
  remove-anno(s) : elem{anno*} -> elem{<remove-all(s)> anno*}
   
rules
  
  add-farg-numbers = add-indices;map(\(i,x{anno*}) -> x{ArgNumber(i),anno*}\)
 
rules
  
  is-ref-type = ?RefSort(_) <+ get-anno(IsRefSort)
  is-ref-type-get-inner-type = ?RefSort(<id>) <+ where(get-anno(IsRefSort))
  
rules
  
  is-property-type = get-anno(IsPropertyType)
  
rules
  
  strip-all-annos = topdown(try(strip-annos))
  
  strip-outer-annos = ?x; !x{}
