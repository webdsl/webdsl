module org/webdsl/dsl/back-end-transformations/analysis

imports
  libwebdsl-front
  org/webdsl/dsl/back-end-transformations/back-end-transformations

rules      // analyze-elem
  
  // Optimization: currently only global definitions have to be searched, succeed if we're done
  // with the section to avoid complete traversal of the tree
    analyze-elem: sec -> sec
    where Section(_,defs) := sec
        ; <map(
            try(
                analyze-elem-global
              ; fatal-err(|"ERROR: analyze-elem-global succeeded")
          ))> defs
        
rules	// analyze-elem for global elements

  // entity
  analyze-elem-global: ent -> ent
    where class := <?Entity(<id>,_,body) <+ ?EntityNoSuper(<id>,body) <+ ?SessionEntity(<capitalize-string>,body)>
        ; rules (AllEntityNames :+= class)
        ; rules (EntityFromName : class -> ent)
        ; <try(get-anno(?IndexedAnno(sf,_,_,spellcheckfields,autocompletefields,_,_))
           ; rules(IndexedEntities :+= class)
           ; rules(ClassToSpellCheckFields : class -> spellcheckfields) 
           ; rules(ClassToAutoCompleteFields : class -> autocompletefields)
          )> ent
        ; rules (AllEntities :+= ent)
        ; fail

  // test
  analyze-elem-global =
      ?Test(name,body); rules (AllTestNames :+= name)
    ; fail
  
  // global var
  analyze-elem-global =
      ?GlobalVarDeclInit(_,_,_)
    ; rules(AllGlobalVars :+= <id>)
    ; fail
  
  // session entity
  analyze-elem-global =
      ?SessionEntity(_, _)
    ; rules(SessionEntities :+= <id>)
    ; fail
 
  // invoke every
  analyze-elem-global =
      ?InvokeTimedTask(_,_)
    ; rules(AllInvokeTimedTask :+= <id>)
    ; fail
      
  // full text analyzers
  analyze-elem-global :
    s@FullTextAnalyzer(None(), name, body) -> <fail>
    with rules(FullTextAnalyzerFromName :+ name -> s)

  analyze-elem-global :
    s@FullTextAnalyzer(Some(kw), name, body) -> <fail>
    with rules(FullTextAnalyzerFromName :+ kw -> FullTextAnalyzer(Some(kw), "default", body)
           FullTextAnalyzerFromName :+ name -> s)
           
  // attribute collections
  analyze-elem-global :
    AttributeCollection(None(), name, _) -> <fail>
    with rules(AttributeCollectionName :+= name)
  
  analyze-elem-global :
    AttributeCollection(AttributeCollectionOverride(), name, _) -> <fail>
    with rules(AttributeCollectionName :+= <concat-strings> ["$Override$",name])
         
  // defines
  //analyze-elem-global-define =
  analyze-elem-global-define =
      ?def@Define(mod*,x,farg*,_,_)
    // handle override
    ; x_stripped := <strip-annos> x
    ; if not(<TopLevelTemplateClassNameOverride> x_stripped) then //if there is an override, don't declare the regular implementation class here. if the regular implementation was already processed (can't predict order), the override will overwrite the DR for e.g. TopLevelTemplateClassName
        if <fetch(TemplateModOverride)> mod* then rules( TopLevelTemplateClassNameOverride : x_stripped ) end
      ; x_if_page_add_override := <if-page-add-override-in-name> (mod*, x)
      // Pages
      ; if <fetch(Page)> mod* then
            rules( AllPageNames :+= x_if_page_add_override
                   TemplateFormalArguments : x_if_page_add_override -> farg* )
          ; if <fetch(ExpireCache)> mod* then
            	rules( AllPageWithExpireCacheNames :+= x)
            end
        end
      // Emails
      ; if <fetch(Email)> mod* then
            rules ( AllEmailNames :+= x )
        end
      // Toplevel templates
      ; if <not(fetch(Page <+ Email <+ ?TemplateDefineNameBeforeLifting(_)))> mod* then  // remove lifted templates, these are registered in the lookup map inside the template class they are lifted from (enables better separate compilation with compile-units-cache).
            // used to create lookup hashmap in java-base-page.str
            rules( AllTopLevelTemplateNamesJavaServlet :+= x ) 
          ; if <fetch(AjaxTemplate)> mod* then 
              rules ( AllTopLevelTemplateNamesWithAjax :+= x_if_page_add_override
                      TemplateFormalArguments : x_if_page_add_override -> farg* ) end
        end
      // determine template classname for all variants of define: pages, templates, ajax templates, emails  
      ; classname := <template-name-to-classname> (mod*, x)
      ; rules(
          // declare template classname with and without pagename, necessary for ajax templates which can be used as both page and template
          TopLevelTemplateClassName : x -> classname
          TopLevelTemplateClassName : x_if_page_add_override -> classname
        )
      end
    
rules // utils

  if-page-add-override-in-name :
	(mod*, x) -> name
	with if <fetch(Page <+ AjaxTemplate)> mod* 
	     then name := <if <fetch(TemplateModOverride)> mod* then <concat-strings>["$Override$",<id>] end>x 
	     else name := x end
 
  template-name-to-classname: 
  	(mod*, x) -> class1
    with  name := <try(<fetch(Email)> mod*; <concat-strings> [x, "_Email"])> x 
        ; class := <template-name-to-classname-helper> name
        ; class1 := <make-java-class-name-compliant; if <fetch(TemplateModOverride)> mod* then <concat-strings>["$Override$",<id>] end> class
  
  template-name-to-classname-helper: 
  	x -> class
    with  class := $[[x]_Template]
